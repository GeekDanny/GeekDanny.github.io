<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Code Committer on Design Patterns-Single Responsibility Principle</title>
      <link href="/2020/06/21/ab5f/"/>
      <url>/2020/06/21/ab5f/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>Design patters are common architecture approaches.  (是架构的设计的具体应用方法论)</li><li>Students in Software Engineering Major are usually requirde to take the design patterns in their 3rd year program.</li><li>Popularized by the Gang of Fours book, 1994 – Smalltalk & C++</li><li>Translated to many OOP languages: C#, Jav</li></ul><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/gbkQcf.png" data-fancybox="group" data-caption="gbkQcf" class="fancybox"><img alt="gbkQcf" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/gbkQcf.png" class="lazyload" title="gbkQcf"></a></p><h1 id="Course-Structure"><a href="#Course-Structure" class="headerlink" title="Course Structure"></a>Course Structure</h1><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/XDVYku.png" data-fancybox="group" data-caption="XDVYku" class="fancybox"><img alt="XDVYku" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/XDVYku.png" class="lazyload" title="XDVYku"></a></p><h2 id="Creational-创建型"><a href="#Creational-创建型" class="headerlink" title="Creational (创建型)"></a>Creational (创建型)</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/YUfWuB.png" data-fancybox="group" data-caption="YUfWuB" class="fancybox"><img alt="YUfWuB" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/YUfWuB.png" class="lazyload" title="YUfWuB"></a></p><h2 id="Structual-（结构型）"><a href="#Structual-（结构型）" class="headerlink" title="Structual （结构型）"></a>Structual （结构型）</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/atFs0y.png" data-fancybox="group" data-caption="atFs0y" class="fancybox"><img alt="atFs0y" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/atFs0y.png" class="lazyload" title="atFs0y"></a></p><h2 id="Behavioral-（行为型）"><a href="#Behavioral-（行为型）" class="headerlink" title="Behavioral （行为型）"></a>Behavioral （行为型）</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/eE5Zkn.png" data-fancybox="group" data-caption="eE5Zkn" class="fancybox"><img alt="eE5Zkn" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/eE5Zkn.png" class="lazyload" title="eE5Zkn"></a></p><h1 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h1><ul><li>Software Coach in 2012 Software Engineering Lab</li></ul><h1 id="The-SOLID-Design-Principles"><a href="#The-SOLID-Design-Principles" class="headerlink" title="The SOLID Design Principles"></a>The SOLID Design Principles</h1><p><strong>SOLID is an acronym which stands for the following design principles (and their abbreviations):</strong></p><p><em>• Single Responsibility Principle (SRP)</em></p><p><em>• Open-Closed Principle (OCP)</em></p><p><em>• Liskov Substitution Principle (LSP)</em></p><p><em>• Interface Segregation Principle (ISP)</em></p><p><em>• Dependency Inversion Principle (DIP)</em></p><ul><li>Was introduced by Robert C. Martin</li><li>I will reference from these books</li></ul><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/CrjDKq.png" data-fancybox="group" data-caption="CrjDKq" class="fancybox"><img alt="CrjDKq" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/CrjDKq.png" class="lazyload" title="CrjDKq"></a></p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/NViQJZ.png" data-fancybox="group" data-caption="NViQJZ" class="fancybox"><img alt="NViQJZ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/NViQJZ.png" class="lazyload" title="NViQJZ"></a></p><h2 id="Single-Responsibility-Principle-单一功能原则"><a href="#Single-Responsibility-Principle-单一功能原则" class="headerlink" title="Single Responsibility Principle (单一功能原则)"></a>Single Responsibility Principle (单一功能原则)</h2><p>The <strong>single-responsibility principle</strong> (<strong>SRP</strong>) is a computer-programming principle that states that every <a href="https://en.wikipedia.org/wiki/Modular_programming" target="_blank" rel="noopener">module</a> or <a href="https://en.wikipedia.org/wiki/Class_(computer_programming)" target="_blank" rel="noopener">class</a><a href="https://en.wikipedia.org/wiki/Single-responsibility_principle#cite_note-cleancode-1" target="_blank" rel="noopener">[1]</a> should have responsibility over a single part of the <a href="https://en.wikipedia.org/wiki/Software_feature" target="_blank" rel="noopener">functionality</a> provided by the <a href="https://en.wikipedia.org/wiki/Software" target="_blank" rel="noopener">software</a>, and that responsibility should be entirely <a href="https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)" target="_blank" rel="noopener">encapsulated</a> by the class, module or function.</p><p>在<a href="https://zh.wikipedia.org/wiki/面向对象编程" target="_blank" rel="noopener">面向对象编程</a>领域中，<strong>单一功能原则</strong>（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Supposed we created a notebook which provides a function to add a new note to the notebook and persist all the entries to a file.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdio></cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><string></string></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><fstream></fstream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><boost lexical_cast.hpp></boost></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteBook</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="built_in">string</span> title;</span><br><span class="line">    <span class="built_in">vector</span><<span class="built_in">string</span>> entries;</span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    NoteBook(<span class="keyword">const</span> <span class="built_in">string</span> &title) : title(title) {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add a note the notebook</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_note</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>& note)</span></span>{</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        entries.push_back(lexical_cast<<span class="built_in">string</span>>(count) + <span class="string">": "</span> + title);</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//what if you want to let the Notebook to save the entries to a file</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>& filename)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//Open a file output steam</span></span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="comment">//write all the note entries to the file</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>& entry:entries){</span><br><span class="line">            ofs << entry << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> << <span class="string">"Single Responsibility Principle Example"</span> << <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    NoteBook notebook{<span class="string">"Study Diligently"</span>};</span><br><span class="line">    notebook.add_note(<span class="string">"We need to understand the principles."</span>);</span><br><span class="line">    notebook.add_note(<span class="string">"We need to do lots of hands-on work!"</span>);</span><br><span class="line">    <span class="comment">//Single Responsibility Principle is broken</span></span><br><span class="line">    notebook.save(<span class="string">"notebook.txt"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>However, the <strong>save</strong> function above raises a problem. Sooner in the future, the the system starts to add more media types such as <strong>Journal</strong> and <strong>BookMark</strong>, which has its own <strong>Save</strong> and Load <strong>function</strong>.</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/EECb2t.png" data-fancybox="group" data-caption="EECb2t" class="fancybox"><img alt="EECb2t" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/EECb2t.png" class="lazyload" title="EECb2t"></a></p><p>Later the product manager decides to save the records into the the database instead of a file system.</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/SHEI1E.png" data-fancybox="group" data-caption="SHEI1E" class="fancybox"><img alt="SHEI1E" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/SHEI1E.png" class="lazyload" title="SHEI1E"></a></p><p>This migration causes tremendous amount changes of the code because engineers have to go to each sub module, NoteBook, Journal and BookMark to change the <strong>Save</strong> and <strong>Load</strong> function.  To avoid this problem, we essentially use the <strong>seperation of concerns</strong>.(<strong>忧虑分离</strong>)</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/qkzDyf.png" data-fancybox="group" data-caption="qkzDyf" class="fancybox"><img alt="qkzDyf" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/qkzDyf.png" class="lazyload" title="qkzDyf"></a></p><p>In this example, to resovle this concern, we separate the pesistence functiionality to a third class, call <strong>PersistenceConnector</strong>.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistenceConnector</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">const</span> NoteBook& noteBook, <span class="keyword">const</span> <span class="built_in">string</span>& filename)</span></span>{</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="comment">//write all the note entries to the file</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>& entry:noteBook.entries){</span><br><span class="line">            ofs << entry << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>This is precisely what is meant by <strong>Single Responsibility</strong>: each class has only one responsibility, and therefore has only one reason to</p><p>change. On the other hand, if you wanted to change the persistence mechanic, this would be changed in <strong>PersistenceConnector</strong>.</p><p>Instead of using the <strong>save</strong> function from the <strong>NoteBook</strong> class, we can use the  <strong>PersistenceConnector</strong> to handle hte responsiblity of the persistence. Now, we have the final version of the code with considering the <strong>Single Responsibility Principle</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdio></cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><string></string></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><vector></vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><fstream></fstream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><boost lexical_cast.hpp></boost></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteBook</span> {</span></span><br><span class="line">    <span class="built_in">string</span> title;</span><br><span class="line">    <span class="built_in">vector</span><<span class="built_in">string</span>> entries;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    NoteBook(<span class="keyword">const</span> <span class="built_in">string</span> &title) : title(title) {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add a note the notebook</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_note</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> ¬e)</span> </span>{</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        entries.push_back(lexical_cast<<span class="built_in">string</span>>(count) + <span class="string">": "</span> + note);</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//what if you want to let the Notebook to save the entries to a file</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &filename)</span> </span>{</span><br><span class="line">        <span class="comment">//Open a file output steam</span></span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="comment">//write all the note entries to the file</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &entry:entries) {</span><br><span class="line">            ofs << entry << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistenceConnector</span> {</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">const</span> NoteBook ¬eBook, <span class="keyword">const</span> <span class="built_in">string</span> &filename)</span> </span>{</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="comment">//write all the note entries to the file</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &entry:noteBook.entries) {</span><br><span class="line">            ofs << entry << <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> << <span class="string">"Single Responsibility Principle Example"</span> << <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    NoteBook notebook{<span class="string">"Study Diligently"</span>};</span><br><span class="line">    notebook.add_note(<span class="string">"We need to understand the principles."</span>);</span><br><span class="line">    notebook.add_note(<span class="string">"We need to do lots of hands-on work!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Single Responsibility Principle is broken</span></span><br><span class="line">    <span class="comment">//notebook.save("notebook.txt");</span></span><br><span class="line">    <span class="comment">//Instead, we use the PersistenceConnector to handle the persistence.</span></span><br><span class="line">    PersistenceConnector pc;</span><br><span class="line">    pc.save(notebook, <span class="string">"notebook.txt"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>An extreme example of an antipattern that violates the SRP is called a <strong>God Object</strong>. A God Object is a huge class that tries to handle as many concerns as possible, becoming a monolithic monstrosity that is very difficult to work with.</p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式架构师 重温</title>
      <link href="/2020/06/21/276b/"/>
      <url>/2020/06/21/276b/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><ul><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1G1WUM2CrcWgBzqGdm6yI9diJkeKK0VHv?usp=sharing" target="_blank" rel="noopener">C.Primer.Plus (6th,2013.12）Stephen.Prata</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1G1WUM2CrcWgBzqGdm6yI9diJkeKK0VHv?usp=sharing" target="_blank" rel="noopener">Primer c++ 第5版</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/13zMrxQ65eBJPEhSxLB3kqGoyLX2dQJwp?usp=sharing" target="_blank" rel="noopener">精品C语言 （视频）</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1DfKXd80155dlNEu-btKcBp4dV0-2_kKg?usp=sharing" target="_blank" rel="noopener">C语言进阶 （视频）</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1XDY55MEK5HTBjkoGUv3kviwqEi1jwlVC?usp=sharing" target="_blank" rel="noopener">C++深入浅出 （视频）</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/13zMrxQ65eBJPEhSxLB3kqGoyLX2dQJwp?usp=sharing" target="_blank" rel="noopener">精品汇编课程（视频）</a></li></ul><h1 id="中极篇"><a href="#中极篇" class="headerlink" title="中极篇"></a>中极篇</h1><ul><li><input disabled type="checkbox"> Design Patterns in Modern C++： <a href="https://drive.google.com/file/d/1DPp956Entl-S5d4WxvupG5rk5fSRWRwM/view?usp=sharing" target="_blank" rel="noopener">Book</a>， <a href="https://drive.google.com/drive/folders/186OtxMC7cAlh_U7i50Nh_o2zXcLndEb9?usp=sharing" target="_blank" rel="noopener">视频</a>，<a href="https://github.com/Apress/design-patterns-in-modern-cpp" target="_blank" rel="noopener">Code</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1jQnXlUjyoPTe18FpJvcTmzTCDn_GdDXB?usp=sharing" target="_blank" rel="noopener">c++系统工程师</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/file/d/1BYehUwOBD1wSxLjHVO35o9FVObVeX2Ib/view?usp=sharing" target="_blank" rel="noopener">C++性能优化指南</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/file/d/1UhzXFe-UU7mW2Jcz3EtDeRbyygzNmXSJ/view?usp=sharing" target="_blank" rel="noopener">编写高质量代码：改善C++程序的150个建议</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1OpB5dcgvAgIen1xJPnKBqXSj9I-_Cinu?usp=sharing" target="_blank" rel="noopener">Linux.Kernel.Fundamentals （视频）</a></li></ul><h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><ul><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1A4DFq5jK_iAIuUrr59-NcaCVPO67zIez?usp=sharing" target="_blank" rel="noopener">Linux Kernel Development (3rd Edition)</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/file/d/1wsvPulN7v3YtpHe4GytI1NAjj9puGjRU/view?usp=sharing" target="_blank" rel="noopener">深入Linux内核架构</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/1-HoKu1TecFPOhmQf41XrlrnmKtQtesb-?usp=sharing" target="_blank" rel="noopener">Domain-Driven Design - Tackling Complexity in the Heart of Software-Eric Evans 2003 （领域驱动设计：软件核心复杂性应对之道）</a></li><li><input disabled type="checkbox"> <a href="https://drive.google.com/drive/folders/18YH5qU4V-HzSD5MCzY19t78knLzzTajg?usp=sharing" target="_blank" rel="noopener">Implementing Domain-Driven Design-2013（实现领域驱动设计 （美）弗农著）</a></li></ul><h1 id="专家篇"><a href="#专家篇" class="headerlink" title="专家篇"></a>专家篇</h1><ul><li><input disabled type="checkbox"> linux内核探秘</li></ul><h1 id="选读"><a href="#选读" class="headerlink" title="选读"></a>选读</h1><ul><li><a href="https://drive.google.com/file/d/1hy4oA8ywfnJ1sqd4gT5gDiURDT3WQbOe/view?usp=sharing" target="_blank" rel="noopener">Understanding the LINUX Kernel -2001</a></li><li>基于Linux的C++  (NAS 918 Video)</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arm全新GPU深度解读：一次重大的飞跃</title>
      <link href="/2020/06/10/dc8/"/>
      <url>/2020/06/10/dc8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>回顾Arm 推出了 新的 Cortex-A77 CPU微架构， 但更重要的 推出 了新的 Valhall GPU 架构和新的 Mali-G77 GPU 。 Bifrost 架构 推出 已有三年，随着行业和工作负载的不断发展， Arm 的 GPU 也必须与时俱进。</p><p>Valhall和新款Mali-G77继上三代Mali GPU之后，在性能、密度和效率方面都有了一些显著的改进。尽管去年的G76对执行引擎的计算架构进行了一些重大更改，但G77更进一步，并且脱离了Arm相对不同寻常的计算核心设计。</p><p><strong>回顾Bifrost——第三次是魅力</strong></p><p>过去几年对Arm的GPU IP产品不太友好，这不是什么大秘密。当第一款Bifrost GPU——Mali-G71于2016年推出，并在当年晚些时候在麒麟960和Exynos 8895上投入生产时，我们曾期待会有良好的性能和效率提升。</p><p>Bifrost是Arm的第一个标量GPU架构，不同于上一代（Midgard：T-600，700&800系列）的矢量指令设计。这一变化是根本性的，就像我们看到AMD和英伟达这样的台式计算机GPU供应商在过去十年中推出了新的GCN和Tesla架构。</p><p>不幸的是，前两代Bifrost，Mali-G71和随后的G72都不是很好的GPU。Arm的两大主要授权商，海思和三星，用这两代架构推出的GPU都非常令人失望。麒麟960和970在这方面尤其糟糕，我认为它对华为和荣耀的产品规划和营销产生了相当大的影响。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014395.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014395.jpg" class="lazyload"></a></p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014282.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014282.jpg" class="lazyload"></a></p><p>在Bifrost架构的最后一次迭代中，Mali-G76对于Arm而言是一次更重要的飞跃，IP在很大程度上能够解决其前代产品的一些关键问题，从而为Exynos 9820和麒麟980芯片组带来了相对较好的结果。</p><p>不幸的是，当Arm迎头赶上并解决BiFrost的问题时，竞争对手并没有止步不前，而且还在挑战极限。高通的Adreno GPU架构多年来一直在移动领域处于领先地位，尽管Adreno 640今年没有取得令人印象深刻的改进，但它在性能、效率和密度方面仍明显领先于Arm。更令人担忧的是，苹果A12的GPU在性能和效率方面绝对是一个重大飞跃，甚至比高通最好的GPU都要好得多，更不用说Arm的Mali GPU了。</p><p><strong>Valhall简介：一次重大的改进</strong></p><p>今天我们要介绍Arm的全新GPU架构：Valhall（古挪威语Valhöll,即Valhalla）。新架构带来了全新的ISA和计算核心设计，试图解决Bifrost架构的主要缺点，并且看起来与我们看到的其他GPU供应商采用的设计方法非常相似。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014988.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020014988.jpg" class="lazyload"></a></p><p>Valhall GPU的第一次迭代是新的Mali-G77，它将实现我们今天将要讨论的所有架构和微架构改进。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015221.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015221.jpg" class="lazyload"></a></p><p>Arm承诺的是，能效和面积密度（基于ISO性能和工艺）提高30％，以及GPU上的机器学习推理工作负载性能提高60％。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015152.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015152.jpg" class="lazyload"></a></p><p>更有趣的是，在即将到来的2019年底和2020年，SoC的性能预计将比2019年的器件提高40%。下一代SoC预计只有很小的工艺节点改进，因此这里引用的大部分提升都归功于新Mali-G77 GPU的架构和微架构的飞跃。</p><p><strong>Valhall简介：一个用于现代工作负载的新ISA</strong></p><p>新的Valhall架构的核心是Arm的新执行核心，这与它的前代产品有很大的不同。它仍然是一个标量设计，但是不同于Bifrost不同寻常的狭窄的8-wide设计，新的执行核心更类似于我们从AMD和英伟达等台式计算机GPU供应商那里看到的样子。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015276.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015276.jpg" class="lazyload"></a></p><p>Bifrost在Mali-G71和G72的初始迭代中，核心中的执行块由4-wide标量SIMD单元单元组成，其warp/wavefront大小也是4。在去年的G76上，它增加到了2个4-wide单元，warp大小是8。最初，在BiFrost的设计中，Arm使用如此窄的单元和如此小的warp的理由是为了减少ALU上的空闲周期。当时的工作负载无法有效地填充足够的线程来支持更大的warp设计。这样做的好处是，理论上Arm可以以更多的控制逻辑为代价实现更好的ALU利用率。</p><p>然而，随着新一代工作负载的不断发展，这种方法突然变得没有什么意义了。今天的游戏正在快速地向更复杂的计算发展，特别是在过去的一两年中，我们看到了起源于PC的游戏被移植到了移动设备上。</p><p>随着着色计算复杂性的增加，发出更多线程并对其进行更宽的warp设计变得更加容易。在这种情况下，新的Valhall架构支持16-wide的基于warp的执行模型。虽然仍然没有英伟达的32-wide或AMD的64-wide设计那样的宽度，但考虑到去年之前Mali GPU使用的是4-wide warp执行模型，因此这是一次巨大的飞跃。</p><p>Arm也改变了ISA本身，简化了很多指令。虽然我们没有更多细节，但据说新的ISA更易于编译，并且其设计可以更好地配合现代API（如Vulkan）。</p><p>对于此前的BiFrost GPU甚至是Midgard GPU，我们看到的是单个GPU核心采用多个执行引擎。这3个引擎有自己专用的数据路径控制逻辑、自己的调度程序和指令缓存，以及自己的寄存器文件和消息传递块，这自然会产生相当多的开销晶体管。特别是在高端，这没有任何意义，因为GPU IP自4年前的T860/880系列以来就没有改变过执行引擎的数量。</p><p>新的G77将前几代“小型”执行引擎整合到一个具有共享控制逻辑的较大的IP块中。新引擎的IP设计仍然存在一些重复：实际的ALU流水线被组织成两个“集群”，每个集群都有自己的16-wide FMA单元以及相应的执行单元。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015322.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020015322.jpg" class="lazyload"></a></p><p>新ISA的一部分是一种新的编码，它比我们在Bifrost中看到的更加规则。Valhall架构的一个重要新特性是，新ISA摆脱了固定的问题调度、子句和元组。在Bifrost中，Arm将指令的调度委托给编译器，将它们分组到所谓的子句中。这在实践中是有效的，尽管它在编译器上花费了大量的工作来获得最佳的结果，并试图隐藏指令和数据访问之间的延迟。</p><p>在ValHall中，调度完全由硬件完成，这本质上更类似于无序CPU的工作方式。这种新设计还意味着实际的ISA与实现的微架构更加脱节，这是一种更具前瞻性的设计选择。</p><p>新的ISA还将重点放在优化纹理指令上，这与新架构大幅增强的纹理能力有关。</p><p>其他变化包括对现有技术的增量更新和数据结构的演变，其中包括对几何流的优化和对AFBC（ARM帧缓冲压缩）的优化。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016792.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016792.jpg" class="lazyload"></a></p><p>我们深入研究了执行引擎的结构，发现该结构一般可以分为四个模块：包含有warp调度和I-cache的前端、两个相同的数据路径集群（处理单元），以及连接到加载/存储单元和固定功能块的消息块。</p><p>前端支持多达64个warp或1024个线程。每个处理单元都有三个ALU：FMA和CVT（Convert）单元是16-wide，而SFU（特殊功能单元）是4-wide。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016381.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016381.jpg" class="lazyload"></a></p><p>前端创建和撤消warp，并保持必要的状态。在前端内有一个动态调度程序，它决定每个warp执行哪些指令。等待dependency 的warp将替换为准备执行的warp。</p><p>I-cache在处理之间共享，是16KB（2048指令）4路组相联（4-way set associative），根据带宽每个周期能够发出4条指令。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016236.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016236.jpg" class="lazyload"></a></p><p>在实际的处理单元（集群）中，我们有四个提取单元发出到算术单元中。每个提取单元都有一个紧密耦合的寄存器文件，以及一个减少访问寄存器文件的延迟的转发缓冲区。</p><p>FMA ALU每周期支持16个FP32 FMA，是FP16的两倍，也是INT8 dot产品的两倍。convert单元处理基本整数操作和自然类型转换操作，并充当分支端口。</p><p>SFU是4-wide而不是16-wide，因为它处理不太常用的指令，不需要那么大的吞吐量。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016187.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016187.jpg" class="lazyload"></a></p><p>总体而言，通过在Mali-G77与Mali-G76的执行引擎之间进行更高级别的比较，我们看到了单引擎同三个引擎的对决。单引擎在主数据路径上有更多实体，而控件和I-cache的实体更少，从而提高了整个块的区域效率。</p><p>ALU延迟方面的一个重要变化是，数据路径现在是4-cycle的深度，而不是以前的8-cycle，这可以在不进行链式操作时提高性能。</p><p>同样，新核心具有类似超标量的发布，而不是过去的桶形流水线设计，在过去的桶形流水线设计中，流水线必须对上述延迟做出适当的妥协。这一变化也是新编译器被大大简化的原因之一，因为它不再需要像以前的流水线设计那样同时发出匹配指令。</p><p><strong>Mali-G77微架构</strong></p><p>前文介绍完了负责算术处理的执行引擎，这一节的微架构只是更宽的核心设计的一部分。此处，Arm通常保持了与上一代GPU非常相似的总体设计，但是在几个区块中有一些重要的变化。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016707.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016707.jpg" class="lazyload"></a></p><p>着色器核心仍然包含执行引擎、带有缓存的加载/存储单元、属性单元、变化单元、纹理映射单元和像素后端，以及其他各种3D固定功能块。</p><p>这里最大的变化是纹理单元块，与我们在Mali-G76上发现的已经加倍的单元相比，它的吞吐量翻了一番。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016266.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020016266.jpg" class="lazyload"></a></p><p>从高级功能的角度来看，新的TMU看起来与其前代产品非常相似，但是我们发现新设计在吞吐量方面有一些非常重要的变化。</p><p>该设计被分成两条“路径”，一条命中路径（hit-path）和一条未命中路径（miss-path），它们可以处理缓存内部或纹理缓存外部的“未命中”（miss）。命中路径自然是一种更短的、经过延迟优化的路径。</p><p>在命中路径上，纹理缓存本身已得到改进，现在是32KB，并且能够达到16 texel/cycle吞吐量。滤波单元也得到了改进，其吞吐量也得到了提高，现在双线性纹理每cycle支持一个四边形，三线性纹理每cycle支持半个四边形，两者都是G76吞吐量的2倍。</p><p>有趣的是，Arm表示，新的TMU与之前的TMU大致相同，但仍能实现能力翻番，堪称极为优秀的工程壮举。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017228.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017228.jpg" class="lazyload"></a></p><p>从根本上说，核心纹理能力的这种大幅增加改变了ALU，即GPU的Tex比率。尽管ALU能力提升了33%，但TMU吞吐量翻番意味着我们现在回到了一个更低的比率，更倾向于纹理吞吐量，而过去的GPU专注于提高计算性能。Arm认为这是一个必要的改变，因为现在的工作负载开始加重GPU在这方面的负担。</p><p>需要注意的是，虽然纹理过滤吞吐量增加了，但是实际像素后端吞吐量没有增加。这里的着色器核心仍然只能为每个时钟绘制2个像素，因此我们现在的texel（像素比率）是2：1，而在过去它仍然是1：1。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017580.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017580.jpg" class="lazyload"></a></p><p>着色器核心块中的另一个重新设计是新的加载存储缓存块。从功能上讲，它与过去一样，但是现在经过重新设计，考虑到了更多的吞吐量。在同一区域内，流水线阶段的数量减少了一半，进一步降低了核心操作的延迟。带宽已被扩大到全cacheline宽度，这应该是其前身的两倍。</p><p>实际的缓存大小为16KB，4路组相联（4-way set associative），据说对于机器学习工作负载非常有用。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017880.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020017880.jpg" class="lazyload"></a></p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020018166.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020018166.jpg" class="lazyload"></a></p><p>将所有的部分放在一起，并从着色器核心缩小到GPU级别，我们再次看到了Arm将全部的模块组织到一起的方法。该架构支持将着色器核心从1核扩展到32核，尽管G77的微架构目前仅支持16核。此外，Arm目前为RTL准备的最小的设计是7核配置，使用不同的IP（例如G52，或者未来在相同范围内的未推出的IP）可以更好地为客户提供较小的配置。</p><p>L2缓存仍然由四个部分组成，每个片的大小从256KB到1MB不等。目前，大多数供应商都采用2MB配置，我认为没有任何被授权方实现过4MB配置。在带宽方面，L2到LSC的带宽也从32B/cycle增加了一倍，达到64B/cycle（一个完整的cacheline），而外部带宽则取决于供应商为L2的每个部分实现128位还是256位AXI接口。</p><p><strong>性能目标：提高30%的PPC和效率</strong></p><p>从纸面上看，新的Valhall架构和新的Mali-G77看起来确实是一个很大的变化，但更重要的是知道Arm宣称的性能、效率和面积如何。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020018724.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020018724.jpg" class="lazyload"></a></p><p>Arm的性能声明非常有趣，因为Arm公布的性能是基于每mm²。基于供应商实现他们的GPU的方式，他们可以改变核心数量以及频率，实际上很难给出一个清晰的数字来描述两个独立GPU配置之间的改进。对于G77，Arm声称新IP能够提供比G76的每mm²性能提高1.2~1.4倍。就绝对值而言，G77着色器核心的大小据说与G76核心的大小相同。</p><p>这意味着这可以直接为供应商转换成更小的GPU，或只是更多的空间，以增加额外的GPU核心，从而提高性能。特别是，Arm声称G77在纹理重的游戏中表现得非常好，因此，关注器件实际的样子，以及不同工作负载的表现将是一件有趣的事情。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019933.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019933.jpg" class="lazyload"></a></p><p>另一种提高性能的方法是提高GPU的时钟。这里的根本限制是智能手机的4<del>5W TDP限制。在ISO流程和性能方面的比较中，据说新的G77使用17%</del>29%的能源和功率来完成同样的工作负载。或者换言之，性能/W提高了1.2~1.39倍。Arm表示G76和G77之间的基本频率根本不会发生太大变化，内部Arm的目标仍然是850MHz。</p><p>今年我不打算尝试任何性能和效率预测，因为有太多的变量在发挥作用。我预计，明年更大的变化之一是SoC将支持LPDDR5，这可能会显着改变智能手机的功率动态。</p><p>Arm的确指出，他们预计明年使用G77的SoC性能将提高1.4倍。以三星的Exynos9820作为G76的参考，这意味着未来的G77 SoC将以更高的功率效率（假设维持功率水平不变）接近苹果的A12 GPU性能。这将使高通陷入麻烦，因为它将明显超越当前一代Adreno 640，但我们预计高通也将推出新一代GPU。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019787.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019787.jpg" class="lazyload"></a></p><p>G77的机器学习性能是Arm引以为豪的。这不仅仅是因为内核的处理单元数量增加了33％，而且LSC的设计和带宽也有了很大的改进，这使得G77的推理性能比G76提高了1.6倍。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019609.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019609.jpg" class="lazyload"></a></p><p>最后，Arm对最近两代Mali GPU进行了代际比较。在相同的工艺和相同的性能下，新的G77继续实现30％的同比能效改进，并且比Mali-G72节省50％的能源。</p><p><strong>结论</strong></p><p>在TechDay活动期间，Arm显然对新的Valhall架构和新的Mali-G77感到非常兴奋。他们非常有理由感到兴奋，因为看起来Arm似乎将展示Mali GPU IP的重大代际飞跃。</p><p>新的G77采用了一种全新的架构，从根本上改进了ARM的执行核心，旨在实现更现代的、符合台式计算机GPU的架构。这似乎是一个长期的转变，虽然G76是一个相对较好的GPU，但前代的G72和G71不是。</p><p><a href="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019395.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.semiinsights.com/uploadfile/2019/0528/20190528020019395.jpg" class="lazyload"></a></p><p>我期待今年晚些时候和明年年初在下一代三星Exynos和海思Kirin SoC中看到Mali-G77。从理论上讲，如果一切顺利，G77应该能够缩小与苹果和高通在性能和效率方面的差距。尤其是G77应该能够超越高通的Adreno GPU，至少是当前一代的Adreno。</p><p>我对此相当乐观，现在Arm和被授权的合作伙伴只需要正确地执行，就可以让用户享受最终成果。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> GPU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPU Mali</title>
      <link href="/2020/06/10/8d33/"/>
      <url>/2020/06/10/8d33/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="GPU-进化"><a href="#GPU-进化" class="headerlink" title="GPU 进化"></a>GPU 进化</h2><p>GPU 方面，最新发布 Mali-G77 GPU 采用了最新的 Valhall 架构，此时距离上一代 Bifronst 架构的发布已经有三年时间，之前的G71一直到G76用的都是BIFROST架构。</p><p><a href="https://www.eet-china.com/d/file/news/2019-05-28/f3b725a6d65a86f428db09393f57a57c.jpg" data-fancybox="group" data-caption="20190528-arm-cortex-a77-1.jpg" class="fancybox"><img alt="20190528-arm-cortex-a77-1.jpg" title="20190528-arm-cortex-a77-1.jpg" data-src="https://www.eet-china.com/d/file/news/2019-05-28/f3b725a6d65a86f428db09393f57a57c.jpg" class="lazyload"></a></p><p>新架构带来了全新的ISA和计算核心设计，解决了Bifrost体系结构的主要缺点，性能提升 40%、效能提升 30%，性能密度提升 30%、机器学习性能提升 60%；按照官方的说法，Mail-G77 着力于在移动游戏方面的提升，同时也非常注重 AR 和 VR 方面的应用。</p><p>据称新Mali-G77 GPU的架构，可以让2019年末和2020年的手机GPU性能在工艺不变的情况下提升1.4倍。值得一提的是，Mail-G77 GPU 还可与新的 Mali-D77 显示处理器协同工作。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/xeUxz1.png" data-fancybox="group" data-caption="xeUxz1" class="fancybox"><img alt="xeUxz1" title="xeUxz1" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/xeUxz1.png" class="lazyload"></a></p><p>从分类来看，<strong>A77和A76同样基于ArmV8.2，也是属于华为获得永久授权的Armv8系列范围内</strong>，按道理说华为拥有自主研发和修改的权力。</p><p>从授权时间来看，SoC产品开发都有一定的流程，首先是原理方案研究，比如选定哪些技术，决定后才会进入产品设计，这时候就要签技术、架构IP授权。因此SoC厂商拿到新设计架构资料的时间一般会远远早于发布会，会提前一到两年，绝不会出现产品都快设计好了还没授权的情况。<strong>按时间点算，华为海思在此前应该已经获得了A77和G77的授权</strong>。</p><p>其实Arm的公版架构一直以来都被诟病，相比高通苹果的自研架构来说性能不尽如人意，这点在前几代的华为麒麟处理器和三星猎户座处理器上就能看出来。特别是公版Mali-GPU，比高通Adreno差得不止一点点。好在后来华为利用软件优化，勉强把麒麟980处理器的GPU游戏性能提升到与骁龙845 Adreno接近的水平。</p><p>据传按照麒麟“发布一代，流片下一代，预研下下一代”的开发节奏，下一代麒麟990处理器已经流片，若也是采用A77和G77新架构，再加上华为自己的优化，搞不好就能胜过高通855的GPU。</p><p>业内有传闻，<a href="https://www.eet-china.com/news/201806201004.html" target="_blank" rel="noopener">华为从2014年开始就筹划自研GPU，</a>去年的GPU Turbo技术就震惊业界——原来自研GPU还可以这样玩？其实GPU自研的难度无论从流片还是兼容性上，都远大于CPU。三星目前还在埋头苦干，苹果也是在挖了imagination很多工程师后才搞定。所以我们需要多给国内厂商一些时间，即便是华为，除了自研全网通基带外，SoC的其他核心架构也要依靠授权，不可能实现跳跃式发展。</p><p><a href="https://pic2.zhimg.com/80/v2-5473d8708cc9c59f347c24f4441bfdb9_720w.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://pic2.zhimg.com/80/v2-5473d8708cc9c59f347c24f4441bfdb9_720w.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> GPU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果失去华为，中国会怎样?</title>
      <link href="/2020/05/28/bda3/"/>
      <url>/2020/05/28/bda3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="如果失去华为，中国会怎么样-关系到中国国运-组图"><a href="#如果失去华为，中国会怎么样-关系到中国国运-组图" class="headerlink" title="如果失去华为，中国会怎么样?关系到中国国运(组图)"></a>如果失去华为，中国会怎么样?关系到中国国运(组图)</h2><p>新闻来源: 肖磊看市 于2020-05-28 7:30:51 大字阅读 <strong>提示:</strong>新闻观点不代表本网立场</p><p>关于美国以倾国之力来猎杀华为这件事，我看到很多的讨论和分析，但总体来说偏悲观，大部分知识阶层认为中国跟美国在芯片领域的差距太大，美国这种近乎无耻的“无限追溯”，基本上就是“杀不死华为誓不罢休”的节奏，而同时认为中国可用的反制措施有限，从而得出一个结论，美国的强大超乎想象，不要再吹中国厉害了等等。</p><p>当然，乐观派也有很多，把美国对华为的猎杀，看成是一种倒逼的激励机制，一时间也激发了诸多科技工作者、消费者和创业者的情绪，这是一种比较好的现象。</p><p>但我要分析的角度，并不简单的是表明某种立场，因为华为的问题，不是一个简单的企业问题，美国已经将华为的问题，上升到了政治和国家安全的角度，这背后一定是有战略性考量的，中国一定要以同等的支持，来帮助华为脱困，这关系到能否保住中国改革开放成果的问题，也可以说关系到中国国运的问题（别着急反驳，听我慢慢说）。</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>作为全球化的坚定支持者，我个人的消费观念是，谁率先占领我的视野和体验，我就会一直用谁家的东西，直到哪天被某种体验给恶心到了，才会去换掉。华为做手机其实算比较晚的，直到现在我个人依然没有买过华为的手机，也跟华为没有任何利益关系，不存在对华为这家公司有特殊的感情，所以我的分析是基于整个全球发展历史和政治、经济，以及中美问题，而非一家公司或一个产业。</p><p>那华为到底代表着什么呢？</p><p>我给大家举一个例子，比如中国顶级理工科学府清华大学（也是综合性大学），2019年主要就业去向，在大公司里面，华为排名第一，招聘了189人。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/zeGyEr.png" data-fancybox="group" data-caption="zeGyEr" class="fancybox"><img alt="zeGyEr" title="zeGyEr" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/zeGyEr.png" class="lazyload"></a></p><p>请注意，这个数字接近于第二名至第四名的总和，那第二名至第四名都是什么企业或组织呢，分别是大名鼎鼎的腾讯、阿里巴巴、国家电网、中国建筑集团。而腾讯和阿里巴巴，在清华大学的招聘人数加起来，也只有华为招聘人数的一半。</p><p>如果你再去看看2018年给华为输送人才的大学，你就会发现，全中国最牛的23所理工科类大学，也可以说未来最顶级的中国理工科人才，仅2018年，就有4621名被华为收入麾下。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/q0lV6y.png" data-fancybox="group" data-caption="q0lV6y" class="fancybox"><img alt="q0lV6y" title="q0lV6y" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/q0lV6y.png" class="lazyload"></a></p><p>华为所代表的，已经不是单纯的一家企业，而是中国人才、科技，以及教育等等综合实力的一个承载、发挥和蓄能池，一旦华为在国际市场失败，意味着中国企业吸引国内顶尖理工科人才的能力将损失惨重，甚至面临灭顶之灾。</p><p>也可以这么说，中国出台那么多吸引高科技人才的行政政策，其实远远比上建立一家像华为一样的科技公司有效。当然，各自有各自的作用，只是如果没有足够优秀的企业，对科技人才的吸引肯定是不可持续的。</p><p>很多人可能会说，华为倒了，还有其他企业呢，请注意，这些科技类人才，不是简单的选择华为的高薪，很多是基于华为的国际化市场和研发体系需求，这种需求给一个人的眼界和发展空间提供了不一样的机会。</p><p>腾讯和阿里巴巴，以及国家电网等等，是无法替代华为的软硬件多领域需求和国际化的。腾讯海外收入占比还不到10%，阿里巴巴海外收入占比也就20%左右，而华为海外收入占比一度接近70%，这几年国内市场起来后国内收入占比有所提高，但国际收入占比依然超过40%。更重要的是，腾讯和阿里加起来的收入，还没有华为高，大部分需求也是服务型人才（最近两年才开始投研发）。</p><p>什么意思呢，意思是说，如果你是一个想走向国际化的科技类顶级人才，中国企业里面，华为可以说是最综合的一个选择，也是承载能力最大的理工科人才池子。而华为一旦失去吸纳这部分人才的能力，那么这些人才至少会有很大一部分，将加盟美国，以及更多其他国家的企业。</p><p>同样的，美国不只是在封杀华为，还在启动对中国理工科输美留学生的限制。因此，美国所实施的，是对中国科技人才从教育、需求、留存到承载体系的全面遏制和封杀。</p><p>大家应该还记得中兴通讯吧，被美国打压之后（2018年4月16日，美国商务部宣布立即重启对中兴通讯的制裁禁令，中兴通讯将被禁止以任何形式从美国进口商品），结果就是，2018年第二季度遭遇了58％的损失，当时中兴通讯的工厂已经停产，随后的第三季度下降了14％，第四季度下降了17％。</p><p>在这样的背景下，中兴吸引科技人才的能力以及对科研的投入立马遭到削减，这种损失不仅仅是企业层面的，还是国家层面，是一种战略性损失。</p><p>如果中兴事件不足以引起重视，此时美国对华为的猎杀，必须要重视了，如果这还不足以引起各个方面的及时应对，那中国失去的就不是一个华为，而是整个建立起来的高科技人才市场化产业链条的崩溃（我并非危言耸听），以及难以挽回的中国企业国际声誉损失，因为这意味着华为无法给全球170多个国家提供稳定的产品和技术服务保障，你让人家怎么看中国企业？</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/qlGxpJ.png" data-fancybox="group" data-caption="qlGxpJ" class="fancybox"><img alt="qlGxpJ" title="qlGxpJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/qlGxpJ.png" class="lazyload"></a></p><p>对于封杀华为，更大的战略威胁是什么呢，当然是遏制和降低中国在科技领域的全球化，永远把中国锁死在中低端加工领域，无法在国际市场获得更大利润，从而进入中等收入陷阱，彻底清除中国对美国各类霸权的战略挑战。</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>很多人可能又要问了，一个华为的问题，能上升到国运和“中等收入陷阱”等层面？那好，我们先来看看关于人均GDP1万美元的问题（中等收入阶段）。</p><p>全球来看，目前人均GDP比中国高的只有约11亿人，而全球人口的数量是76亿。</p><p>这是什么意思呢，中国的加入，让全世界人均GDP超过1万美元的人口，增加了130%。</p><p>其实全球人均超过1万美元的国家有很多，总计超过70个，很多国家人均GDP非常高，但主要的原因是人口少，比如卢森堡（人口60万）、冰岛（人口35万）、卡塔尔（人口264万）等，对于中国来说，这些国家的人均GDP并没有参考价值。</p><p>而人口超过5000万的国家里面，人均GDP超过1万美元的国家，只有8个，这里面，除了俄罗斯和韩国，其他都是G7成员，包括美国、德国、英国、法国、意大利和日本。</p><p>人口超过1亿的国家里面，人均GDP超过中国的国家，只有美国、日本、俄罗斯，另外两个墨西哥和巴西跟中国差不多，但去年已经被中国超越。另外，在接近1亿人口的国家里面，土耳其的GDP略低于中国。</p><p>请注意，这会我就要说到关键点了，大家仔细去看，除了韩国之外，其他比中国人均GDP高的人口大国，基本都是百年强国，早在一百年前就开始欺负我们了，即八国联军（除了已经消失的奥匈帝国）。</p><p>这意味着什么呢？意味着一百多年来，除了韩国，整个地球上其他所有想挑战这几个国家人均GDP水平的大型新兴经济体，都失败了。这难道是偶然？难道真的是制度问题？难道是无法抗拒的命运？</p><p>那我们就要问了，中国能成功吗？为什么唯独韩国成功了呢？</p><p>其实在大型新兴经济体里面，有至少三个国家努力尝试赶上众“列强”，他们分别是巴西、墨西哥和土耳其。但经过多轮博弈，这三个国家基本上都被“掐死”在摇篮里了，因为他们都掉入了中等收入陷阱，也就是被锁死在人均GDP1万美元左右这个区间里了。</p><p>那根本原因是什么呢？</p><p>我们分别来看一个指标，比如巴西，拥有8家世界500强企业，但其中两家是石油/天然气公司，一家是肉类加工出口企业，一家是矿业巨头，另外四家都是银行。</p><p>再比如墨西哥，进入世界500强的企业只有4家，一家是石油企业，一家是电信公司，一家是饮料食品企业，一家是风电设备公司。</p><p>不知道大家有没有看出来，巴西进入世界500强的公司，实际上都是资源行业和银行业，这些都是技术含量并不高的垄断行业，还有一家肉类加工出口企业，也主要是因为农业养殖自然条件较好。</p><p>而墨西哥，作为紧挨着美国的国家，为美国做了那么多年代工的国家，在全球500强企业里面，竟然只有一家算得上有一定技术含量的企业，就是那家风电设备公司，大家不觉得奇怪吗？</p><p>相比来说，土耳其的产业相对来说更丰富一些，比如Beko及Vestel都是欧洲知名的家用电子产品与电器制造商，土耳其的建筑承包行业也相当发达，目前也是中国在全球市场的竞争对手之一，另外船舶制造业也很有竞争力，军工方面有F16生产线等。</p><p>但土耳其的问题在于，产业规模不够，进入世界500强的企业只有一家Beko的母公司考奇集团（KOC）。</p><p>那我们再来看看韩国，是如何超越中等收入陷阱，把5000万人口带向发达经济体的。请看下图。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/ZpkBAf.png" data-fancybox="group" data-caption="ZpkBAf" class="fancybox"><img alt="ZpkBAf" title="ZpkBAf" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/ZpkBAf.png" class="lazyload"></a></p><p> 大家估计一下子就能看明白，韩国有16家企业进入了世界500强，在这些企业里面，我没找到一家纯粹的垄断性能源企业，也没有一家是纯粹的银行，而大部分是科技企业，以及重工业、汽车等制造业，还有三星等高科技企业，这些企业基本上都是靠真正的拼杀闯出来的（背后也离不开国家的支持）。 所以，我想说的是，如果中国想真正跨越中等收入陷阱，不做“八国联军”的垫脚石，被踩死在巴西、墨西哥，或者土耳其这个水平上，那就必须要有真正的，拼杀出来的科技类世界500强企业。</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>那我们再回过头来看看中国入围世界500强的企业。</p><p>从去年的数据看，中国（含港台）有129家企业入围世界500强，历史上首次超过美国的121家，位列全球第一。</p><p>但请注意，如果去掉港台企业及银行、保险、电力、电信、煤炭、石化、房地产企业后，就只剩下47家，而在这47家里面，如果除去大型国有企业，以及军工相关企业，真正的靠自身技术和营销等方式打拼出来的市场化企业，只有华为、正威国际、阿里巴巴、联想、吉利、腾讯、魏桥集团、雪松控股、美的、苏宁、青山控股、格力、海尔、小米等14家企业，比韩国少两家。</p><p>然后大家再仔细看看，这14家里面排在第一的是谁，是华为，而且这里面有最多技术的是谁，也是华为。你可能会说，阿里巴巴和腾讯也有很多技术，而且是平台级企业，问题是我已经说过了，阿里巴巴和腾讯国际业务占比远远低于华为，其实也可以看作仅仅是一家内地公司。</p><p>不信你去看，天猫和微信，再加上京东、苏宁，可能都挑战不了亚马逊和WhatsAPP等的地位，因为除了最近一阵子兴起的抖音海外版（Tik Tok），中国这些互联网公司的各类软件，在欧洲等市场，从未进入过下载量的前十，何谈国际影响力？</p><p>也就是说，如果用国际化来衡量的话，中国互联网科技领域，被美国横扫十次都绰绰有余。</p><p>如果再接着分析，魏桥集团、雪松控股、青山控股等，都还是非常传统的产业，而美的、格力、海尔、吉利等本身也是相对传统的产品企业。这就好比很早之前IBM就把个人电脑业务卖给联想一样，就算这类终端产品市场全给中国企业做了，对美国都没有啥威胁，因为操作系统掌握在美国手上。</p><p>那就只剩下三家，一个是正威国际，另外两个是华为和小米。而正威国际是做有色金属的，这个对美国来说也没啥需要特别关注的。所以就只剩下华为和小米，那这两家就不用我做什么对比了，小米虽然国际化也做得不错，但跟华为比起来，还差很多。更重要的是，华为不仅是国际市场占有率高，而且有非常强的技术，并拥有发展成为规模级平台的能力。</p><p>所以，华为必将成为美国围剿的对象，因为干掉华为，相当于阻断了唯一一家中国真正具有全球活跃性竞争力的世界500强高科技企业。</p><p>那么也就意味着，一旦猎杀华为，预示着中国最有可能挑战美国全球科技以及平台布局的中国500强企业，被扼杀了。而华为之后，中国再想创造一个类似的国际化技术平台级企业，恐怕难度就很大了。</p><p>当然，华为死了，地球照样转，问题是，中国想要想靠大型国有企业（基建、能源、银行军工等），以及传统制造业，还有国内市场，来完成中等收入陷阱的跳跃，这种难度是非常大的，其实前车之鉴就是土耳其。</p><p>如果没有华为等公司，中国未来很有可能就会变成一个大号的土耳其，看上去产业较为丰富，比土耳其规模大很多，但更多的支撑因素是国内需求，而非国际竞争力。我虽然也经常强调国内需求的重要性，但国内需求是基本盘，而非真正的中国经济增值来源。</p><p>因此我非常担心，连华为一旦夭折，那中国陷入中等收入陷阱，进入类似土耳其模式的可能性是非常大的，因为这是一个标志性事件，类似于1997年亚洲金融风暴等标志性事件。</p><p>中国之所以比土耳其有更多的世界500强企业，最重要的原因是中国国内规模足够大，但这会被中国更大规模的人口给对冲掉，也就是说，我们跟土耳其的产业非常类似，但我们的人口是土耳其的20倍，所以尽管我们有更多的世界500强，但对人均GDP的支撑非常有限。</p><p>那为什么没有国际化的高科技平台级别的企业，就会陷入“中等收入陷阱”呢？原因也很简单，因为只有国际化的平台公司和技术公司，才可以获得超额利润，才可以带动国内的整个产业链和人均收入的快速抬升。</p><p>如果没有国际市场，单纯国内市场的消耗，实际上是一个内循环，对人均GDP的拉升，其实同时也形成了对等的消耗，这就类似于，中国银行业或基建军工等也赚了很多钱，贡献了很多GDP，但主要体现出来的，是债务的增加，是就业的维持，并不能大幅提升人均回报，不信的话你去看看这些企业的薪资增长、招聘规模等等，都是远远落后于华为等国际化公司的。更深层一点的讨论，实际上就是计划经济和市场经济之间的区别了。</p><p>你再去看看美国，仅仅四大科技企业，苹果、谷歌、亚马逊和微软，其年收入就达到5.5万亿人民币，这四个公司里面，收入最低的微软，都比中国最强的华为高出接近1千亿元。更重要的是，美国这些企业的利润大部分来自全球，而非美国本土。</p><p>如果保不住华为，让华为的国际化止步，那么未来中国各行各业想要再挑战美国无理打压，恐怕难度就更大了，因为华为是一家完全靠自身技术和业务拼杀下来的国际市场地位，是有巨大用户粘性的，这种背景的公司，都扛不住，那还有哪家公司扛得住？</p><p>这对中国企业家的精神和自信都是重大的打击，未来更多的企业家将会更加惧怕美国，只能寻求寄生在美国平台下赚点小钱而已。</p><p>所以，华为的问题，不是简单的一个企业的问题，是足以代表中国能否突破“中等收入陷阱”，能否成为世界一流经济体的问题。一旦失败，中国就存在被遏制在巴西、墨西哥和土耳其这个阶段，成为永远的二流国家的风险。</p><p>大家现在不要觉得这个问题好像没那么严重，其实如果你再回溯几十年，看看土耳其、巴西、阿根廷、墨西哥、马来西亚等等，哪个不是勃勃生机、豪情万丈，现在还不是得接受二流国家、中等收入陷阱的现实。</p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>好，那接下来我们再说说，华为到底为什么领衔全球5G，美国又是如何打击企图跨越“中等收入陷阱”国家的，中国应该以什么样的方式破局。 首先我们要搞清楚一个问题，美国为什么在5G领域落后。</p><p>如果要深入的讨论，实际上5G的问题，并不是一个简单的通讯技术的问题，而是一个政治问题。</p><p>我看了很多技术分析，包括频谱的问题，意思是说，美国最早发布了5G高频段（毫米波）频率规划（2016年），但问题是，高频段有非常明显的商用弱点，那就是需要建设更多的基站，是中国中频段的3至4倍，才能达到中频段同等的覆盖能力。</p><p>而美国在实施基站建设方面，其难度又是巨大的，要完成这样的大规模基建，不仅仅是钱的问题，光纤资源、城市管道系统等等对美国都是挑战，而且要跟各州、各地、各企业民众协调，很多人预计要完成这种规模的基站建设，十年恐怕都不够。</p><p>那美国为什么不用中频段呢，原因有两个，一个是中频段有很大一部分被美国国防部控制，但问题是，美国也提出了CBRS计划，即“公民宽带无线电服务”，作为一种辅助技术，可以让美国无线运营商与海军共用3.5GHz频段，极大缓解无线频谱短缺的现状，可是该计划响应者非常少。</p><p>另一个是，美国一直想主导全球5G发展节奏，所以美国的详细规划是，先从高频，再到中频，然后到低频。那这个跟中国直接从中频起步又有什么关系呢，问题很简单，我举个例子，这就好比，美国和中国的房地产，美国主要是郊区独栋为主，而中国是城市高层为主。现在美国要求全球都应该效仿美国，在开发房地产方面，应该先发展郊区独栋，而不能先发展城市高层，这样对美国的建筑商和后期的物业公司等就非常有利，美国也就能主导蛋糕分配了。</p><p>但问题是，全球各国面临的土地和城市发展情况，跟中国更相似，而不是跟美国，所以在城市发展高层建筑的模式就迅速被推广开了，美国则还停留在不紧不慢的制定独栋别墅建设标准的阶段。</p><p>按理说，各发展各的也可以啊，问题在于，全球大部分国家已经都默认中频为5G主流商用频段，而且发展迅速，美国对5G发展的主导权已经丧失。</p><p>那美国有没有可能会夺回对5G的主导权呢？</p><p>有一种可能，那就是让全世界的5G发展，跟美国同步，也就是等美国从高频段，慢慢发展到中频段（可能得10年的时间），然后就同步了。所以现在很多人认为，美国对华为的封杀，也是为了延缓其他国家5G的商用步伐。</p><p>我当然不同意这种看法，因为这不是美国真正的目的。</p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>中国近十多年的发展，是比较快的，快到什么程度呢，全球几乎没有几个人能预测到。</p><p>可能我这么说你还是会觉得怪怪的（又在吹了），那我给你举个简单的例子，比如2005年，中国领导人提出的目标是，到2020年，也就是到现在，中国人均GDP要突破3000美元。</p><p>那当时中国的人均GDP是多少呢？只有1700美元。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/tAyDiy.png" data-fancybox="group" data-caption="tAyDiy" class="fancybox"><img alt="tAyDiy" title="tAyDiy" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/tAyDiy.png" class="lazyload"></a></p><p> 也就是说，在过去15年里，中国的发展计划是，将人均GDP推升76%，结果呢，中国人均GDP涨了接近6倍，因为去年中国人均GDP已经突破了1万美元。</p><p>与此同时，中国也成长起来了一批国际化的公司，比如最典型的就是华为，所以华为的发展，其实跟中国经济的发展一样，是所有对手始料未及的。</p><p>当下美国封杀华为，其实跟遏制中国经济崛起是同一个目的之下的不同执行层面，逻辑上是一致的。只不过中国由于体量有点大，影响力也都起来了，所以美国要想把中国打入“中等收入陷阱”需要作出的努力可能会更大，因此现在大家看到的就是，由于用力过猛，美国的动作有点“变形”，而在遏制其他相对体量较小的挑战者方面，恐怕一次金融危机就足够了，甚至没人能看出来。</p><p>大家再想想，中国这种速度的发展，如果连我们自己都没有想到，一直看不起我们的竞争对手会想到吗？当然，可能有那么一两个疯狂的预言家会想到（比如很多人动不动就引用所谓拿破仑说的“中国是一头沉睡的雄狮,一旦醒来就会震惊世界”这类言论），但这并不会成为对手关注我们的依据。</p><p>所以，过去十多年里，美国在对待中国的问题上，其实还处在战略观察阶段，美国知道中国未来肯定会成为一个强国，但会不会成为美国霸权的挑战者，还不好说，中国崛起的时间也可能会比较长，美国对中国进入中等收入阶段的预估是2030年（晚了十年），而且也需要诸多的条件来助力，中国现在还难以满足这些条件（比如好的“制度”等），这样的话，美国有足够的时间去中东搞事情的。 然而，转眼间，中国的人均GDP已经达到了1万美元，成为全球第二大经济体。更重要的是，中国经济的发展，并不是在美国所期望的制度下完成的。</p><p>当然，光拿出人均GDP数据，对于很多人来说，可能并不觉得有什么政治意义。那我要告诉你的是，当上个世纪80年代初，日本人均GDP达到1万美元的时候，美国发起了对日本企业的疯狂打压，包括对丰田汽车等的各种绞杀。同时美国出现了反日情绪。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/9Elmg2.png" data-fancybox="group" data-caption="9Elmg2" class="fancybox"><img alt="9Elmg2" title="9Elmg2" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/9Elmg2.png" class="lazyload"></a></p><p>到了1985年（日本人均GDP是11500美元，跟今天的中国基本一样），美国直接强制日本签署“广场协议”，要求日元升值，来打压日本的出口，刺激日本对美国的投资，结果日元在而后的六年里，对美元升值了超过4倍，日本人到处买美元，然后疯狂的去美国炒楼炒股，把此前多年赚来的钱都投向了美国，一时间美国人感叹，日本要买下整个美国了。</p><p>结果就是，在高潮之后，美国迎来了新一轮的发展期，而日本很快陷入了“失去的二十年”。当然，关于这一点，有很多争论，到底日本有没有失去二十年，失去二十年的原因是什么，众说纷纭，但有一点是肯定的，看一下日本房地产和股市的走势，就知道失去的二十年并不是危言耸听。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/yWcSoD.png" data-fancybox="group" data-caption="yWcSoD" class="fancybox"><img alt="yWcSoD" title="yWcSoD" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/yWcSoD.png" class="lazyload"></a></p><h2 id="日本失去的二十年"><a href="#日本失去的二十年" class="headerlink" title="日本失去的二十年"></a>日本失去的二十年</h2><p>到了上个世纪九十年代末，亚洲的韩国、马来西亚、泰国等国家，陆续奔向人均GDP1万美元的时代。比如到了1997年，韩国人均GDP1.5万美元，马来西亚人均GDP1.2万美元，泰国人均GDP也超过了7000美元。于是，1997年亚洲金融风暴来了。</p><p>那1997年亚洲金融风暴的后果是什么呢，美元迅速从亚洲市场逃离，高速发展的东南亚经济突然陷入崩溃边缘，直到现在，泰国和马来西亚的人均GDP，还处在跟1997年一样的水平上，失去了不止二十年。</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>那美国具体得到了什么呢？</p><p>大家可以去看看美国股市的走势，从跟日本签署《广场协议》，到1997年亚洲金融危机，美国股市一直在上涨，尤其是在1997年亚洲金融危机之后，美股由于涌入的资金巨大，诸多高科技企业获得了前所未有的估值，研发投入大幅增长，以至于搞出了纳斯达克世纪泡沫，酝酿出来了谷歌、微软、亚马逊等等巨型公司，至今称霸全球。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/iazUDR.png" data-fancybox="group" data-caption="iazUDR" class="fancybox"><img alt="iazUDR" title="iazUDR" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/iazUDR.png" class="lazyload"></a></p><p>大危机与美国股市走势</p><p>很多人可能不太理解，为什么1985开始的日元升值，和1997年东南亚开启的本币贬值，都使得美元涌入美国呢？原因很简单，在货币这个问题上，其实大家担心的不是升值或贬值，而是波动。</p><p>只要一个国家的货币，出现巨大的波动，无论是升值还是贬值，都会给民众带来不安全感，出现“处置”冲动。这就好比一个人，有时候对你特别好，有时候威胁要杀了你，你的最好选择是，远离他。</p><p>如果你去看美国股市走势，在1985年没有签署《广场协议》之前，道琼斯工业指数长期徘徊在1200点左右，协议签署后由于日本市场资金的涌入，该指数迅速上涨，以至于涨得太快了，发生了1987年的股灾，但很快恢复。再加上1997年亚洲金融风暴导致的韩国等东南亚资金的涌入，道琼斯指数从1985年的1200点，涨到了2000年的接近12000点，涨了10倍。</p><p>2000年之后的美国股市，基本没有什么大的起色，2000年到2007年，道琼斯工业指数仅仅从接近12000点，涨到了14000点，七年里只涨了不到20%。</p><p>最近十年，美股也出现了历史上最长的牛市，但大家不知道的是，这一轮美股的上涨，另一个重要的原因是，2010年欧债危机爆发，欧洲资金向美国涌入，再加上2014年至2016年，中国尝试放开外汇管制，人民币迅速贬值，中国外汇储备两年流失超过1万亿美元，把美国股市推向了新高潮。道琼斯指数从2010年的不到1万点，涨到了今年年初的接近3万点。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/BQ1y3y.png" data-fancybox="group" data-caption="BQ1y3y" class="fancybox"><img alt="BQ1y3y" title="BQ1y3y" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/BQ1y3y.png" class="lazyload"></a></p><p>欧元和人民币两次大贬值后美股走势 很多人可能又要反驳了，这种逻辑分析属于阴谋论，美国股市的上涨，并不是因为其他国家的危机，而是美国有全球最好的企业。</p><p>这一点我也是承认的，但问题的关键点不在这里，问题的关键点在于，为什么只有美国可以缔造出那么多全球企业呢？当风险来临时，美元反而不跌反涨呢？难道欧洲国家的制度，也都不如美国？</p><p>我的观点是，自二战后，欧洲传统强国被削弱，亚洲更惨，人类逐步进入了新的起点，可以说世界被再一次推平了，成了一张白纸，而这个时候唯一的获胜者，是美国。世界开始任由美国“设计”，而美国所执行的是平台战略，只要参与到这个平台里面，就成了美国的一颗棋子，未来只能任其调拨，来配合美国的本土利益。</p><p>在平台战略方面，我不用多说了，美国的军事系统、美元系统、互联网系统，其实都是平台型的，一旦加入这些平台，再想离开，成本巨大，美国就有能力控制所有加入这个平台的国家和企业，以及民众。</p><p>比如一旦加入美国的军事系统，那么你就必须基于美国的卫星定位、情报、指挥等系统来发挥军事战略，基本上你自己就失去了独立做战和离开美国保护的能力。</p><p>而一旦加入美元系统，你就必须要承受美元的“自由流动”，也就是说，当美国本土需要美元的时候，美国有一百种办法让美元回流，而当美国要输出美元的时候，也会有一百种办法让美元流向全世界，但这种流动对很多国家造成的剧烈波动，只能被动承受。</p><p>至于互联网系统，那威力就更大了，这种平台战略，看上去兴起的时间较短，但整个系统，是美国为了打造军事情报共享平台，才发明出来了阿帕网，这就是整个现在互联网的前身，所以说，现在的互联网系统平台，对于美国来说，只不过是军事和美元等系统的一种延续罢了。</p><p>比如微软操作系统、苹果系统、谷歌安卓、GMS系统等。其实这次美国封杀华为，对华为现实威胁最大的，还不是芯片，因为芯片问题，有很多巧妙的解决办法，但如果不让华为使用谷歌的GMS系统（没有这个系统很多软件没法下载），那么意味着华为的手机在国际市场可以说就卖不动了，这就好比说，在中国，你买的手机不能装微信和支付宝，那你还会买这个手机吗？</p><p>所以，美国实际上并不担心一个国家一款产品的领先，就像阿里巴巴，是不会担心格力空调或茅台酒在各自的行业技术或品牌上领先的。美国担心的是挑战自己所搭建的平台。</p><p>华为对美国真正的威胁正在这里，华为是一家随时都可以打造平台的公司。比如在无法使用GMS系统之后，华为就用上了自己研发的HMS系统，但正是因为没有使用GMS系统，华为手机在欧洲的销量下降了超过30%。如果换做其他厂商，可能直接就死掉了。 </p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p> 那美国这种平台战略，就没有漏洞和缺点吗？</p><p>其实对于美国来说，其平台战略，有其无与伦比的优势，但也有战略性的弱点。如果打造平台的国家/公司，开始采取不公平的手段，那么平台的信誉也就会出现战略性滑坡。</p><p>举个例子，还是阿里巴巴，如果阿里巴巴在卖空调这个问题上，对格力特别支持，但对其他空调品牌采取打压措施，那意味着平台已经介入到了产品领域，这个时候其他产品只能自建平台渠道，而放弃原有平台，因为没有其他选择。</p><p>如果美国为了政治需求，把美国的各类平台，用来打压具体的产品方，比如禁止谷歌、微软等企业，向中国的企业提供系统支持等，这看上去很致命，但从战略上来说，这就失去了平台的本身的战略定位。当裁判随时会变成运动员的时候，你还会参加这样的比赛吗？</p><p>很多人可能又要说了，那美国就是要这样打击你呢，你如果不妥协让步，还能怎么办呢？中国人难道还能不用微软、苹果ios、谷歌安卓GMS等系统？</p><p>我可以告诉大家，美国如果禁止中国使用这些系统，反而可能是中国的机会。</p><p>道理很简单，因为很多事情，必须要在极端的情况下才能完成。就像美国要打阿富汗，如果不发生911恐怖袭击，美国人是不会支持美国政府打阿富汗的。</p><p>同样的道理，如果美国不能彻底禁止中国企业对微软、苹果、谷歌等公司系统的使用，那么中国永远都无法拥有搭建自己系统的机会，因为市场没有人支持。</p><p>另外，中国是唯一可以撑起新平台系统的国家，因为中国有足够的内部市场规模。也可以这么说，在搭建互联网系统这方面，美国唯一的对手是中国。比如在卫星导航领域，欧洲需要联合起来（伽利略系统）才能对抗美国，俄罗斯有一定的实力（格洛纳斯系统），但也仅仅是卫星导航等国防领域。如果是互联网系统领域，欧洲和俄罗斯一个缺乏统一的管理，另一个缺乏人口规模，所以在大型制造业领域，欧盟和俄罗斯尚可称得上美国对手，到互联网领域，基本就歇菜了，就只剩下中国了。</p><p>诺基亚手机以前收购开发了塞班操作系统，很快就被苹果和谷歌的操作系统打败，也包括诺基亚的手机业务也基本上算失败了，其实最根本的原因是，诺基亚这家企业，没有“基本盘”，一旦国际市场竞争失败，就彻底失败了。而华为等企业，还有中国内部市场这个基本盘支撑。</p><p>比如诺基亚是芬兰的企业，而芬兰总人口只有550万人，所以诺基亚必须得依靠国际市场，一旦国际市场被打败，其实就相当于彻底失败了，因为国内需求支撑不了诺基亚手机和塞班系统。诺基亚现在只剩下通讯硬件业务了，其市值跟顶峰时期相比，缩水了95%。</p><p>而中国不同，中国的国内用户基数超过10亿，华为这样强大的国际化企业，依然有数亿的用户来自中国。在这种背景下，华为仅仅依靠中国市场，都可以很好的活下去，这对于华为来说，就有了足够的时间打造和培育自己的系统，比如完善HMS系统生态，逐步让国际市场接受。</p><p>很多人可能又要说了，国际主流依然是谷歌的GMS系统，HMS想替代谈何容易，这一点我不否认，但我会告诉你另一个重大机会。</p><p>你知道红军长征是如何在蒋介石几十万大军眼皮底下活下来的吗？其中一个原因是，四川、贵州、云南等各军阀与蒋介石之间，本身就存在着巨大的底层矛盾。</p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>大家可以去欧洲市场看看，欧洲市场现在销售额前五的手机，三星排第一，华为排第二，苹果只是第三。而自从华为手机销量下降以来，小米和OPPO在欧洲的销量大增。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Bklx9e.png" data-fancybox="group" data-caption="Bklx9e" class="fancybox"><img alt="Bklx9e" title="Bklx9e" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Bklx9e.png" class="lazyload"></a></p><p>我跟大家说这个，并不是说华为丢失的份额，被小米等中国手机厂商给补回来了那么简单。大家有没有想过，为什么欧洲人其实也很愿意选择苹果之外的手机呢？</p><p>这其实不是简单的性价比的问题，而是欧洲目前面临的情况跟中国类似。大家知道英国和美国正在举行自由贸易谈判，两国的重大分歧在于，英国要向美国互联网巨头征收数字税的问题。</p><p>其实法国和德国也是一样的，美国的互联网科技公司，用平台和系统，一样绑架了整个欧洲的互联网科技领域。从电脑、手机的操作系统，到聊天、社交等等软件工具，全部被美国的科技巨头垄断，欧洲非常希望有第二种选择，这样就可以留有一定的后路，但美国似乎不会允许平台级别的第二种选择出现在欧洲。</p><p>可能大家还不知道，在美国不厌其烦的骚扰下，也就是美国天天给法国、德国、英国等灌输华为5G会影响国家安全等背景下，欧洲这几个大国里面，还没有一个领导人反对华为参与5G建设的。</p><p>所以在5G和手机软硬件等领域，欧洲精英人群表面上跟随美国的舆论步伐，对美国提出的问题很重视，但在行动方面，非常清楚选择芬兰、韩国、中国等企业的战略意义。</p><p>假设华为的HMS系统生态真的能慢慢发展起来，欧洲人肯定是可以选择的，但现在的问题是，国际市场的各类必要性软件（APP），也都是美国公司提供的，比如WhatsApp、Messenger、推特、脸书、Youtube、Netflix等等。</p><p>这个时候华为是很无助的，如果微信、新浪微博、优酷等等，能够在欧洲占有一席之地，其实华为要推HMS系统就没那么难了。</p><p>所以华为现在是孤军奋战。也就是说，华为的HMS要获得些许成功，还需要将全球数百万家APP运维企业纳入生态。这是一个极其漫长的过程。</p><p>其实美国不仅在封杀华为，还在企图鼓动各市场封杀中国的APP，包括抖音海外版TikTok，理由如出一辙，认为TikTok是国家威胁。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/a99CAx.png" data-fancybox="group" data-caption="a99CAx" class="fancybox"><img alt="a99CAx" title="a99CAx" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/a99CAx.png" class="lazyload"></a></p><p>据Sensor Tower发布的报告称，TikTok全球下载量超过 7 亿，是 2019 年下载量第二大的应用。这意味着TikTok击败了Facebook((下载量不到 7 亿))和Facebook Messenger (下载量略超过 7 亿)。 但我们再来看看欧洲，TikTok已经在德国取得成功，德国网红、明星、足球俱乐部等等都建立了TikTok账号和各类跟TikTok的合作。法国数十家媒体在TikTok建了账号，有法国女孩在TikTok的粉丝超过2000万。上周，字节跳动宣布将在英国伦敦设立TikTok欧洲业务中心。</p><p>那为什么欧洲在对待中国高科技和互联企业方面，跟美国有如此之大的反差呢？</p><p>大家还记得任正非有一次在接受采访时，被拍到在办公桌上有本《美国陷阱》吗？里面就是讲美国是如何肢解掉法国电信巨头阿尔斯通公司的。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/M0Zz8h.png" data-fancybox="group" data-caption="M0Zz8h" class="fancybox"><img alt="M0Zz8h" title="M0Zz8h" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/M0Zz8h.png" class="lazyload"></a></p><p>​                                                                                                任正非办公桌</p><p>德国也非常清楚，美国是如何对待德国的汽车企业，以及德意志银行的。欧洲各国也都非常清楚，当年为什么要几个欧洲国家联合起来成立空客，来应对美国对欧洲飞机企业的打击的。</p><p>所以，欧洲也非常清楚美国目前打压中国企业的真正战略意图，所以，按照我的推测，只要中国等国家能够提供新的可用系统和平台，以及各类产品，可以满足欧洲要求的话，欧洲其实从潜意识里，是愿意有多个选择存在的，并支持美国以外的系统平台或产品的。</p><p>因为欧洲跟美国一下一轮的重点博弈，就是科技巨头的数字税问题。欧洲也不会允许美国科技巨头大量的赚欧洲的钱，最后还给欧洲搞社交媒体攻势，动不动就来个“黄背心”运动。这种压力欧洲精英也越来越感到难受，只是欧洲暂时还没有第二种选择，跟美国叫板缺乏筹码。 因此，只要中国这次能够帮助华为突围，全球市场对中国企业的信心就会更足，中国各类产品在欧洲的占有率只会上升。相反，如果华为无法突围，我可以很有把握的说，欧洲立马就会对美国进行妥协，很有可能会调转枪头跟随美国的步伐来遏制中国的企业，因为如果当欧洲看不到中国可以提供稳定的产品和第二套可选择的系统，欧洲其实也就只能依靠美国的平台了，大树底下好乘凉。</p><p>说到这里，大家应该可以感受到，我为什么要说，保住华为，就是为了保住改革开放成果的原因。这里面能否守住经济利益，其实也是能否兑现政治利益的问题。</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>最后再说一下芯片的问题。</p><p>说实话，我从来不担心芯片的问题，因为芯片是一个纯技术的问题，而不是像微软、谷歌、苹果这种直接面对数亿终端的平台或系统渗透的问题。</p><p>中国的优势就是集中力量突破重要领域和环节，只是我们此前的集中力量，用在了国防等领域，时间上出现了错位，毕竟整体资源是有限的，发展阶段是不一样的，而且芯片市场本身一直就非常市场化，全球各个国家嵌入很深，如果没有发生极端的倒逼，资源难以长期聚集来搞非优势产业。</p><p>你看中国的国防科技，如果不是各种严格的封锁，以及各种赤裸裸的军事威胁，比如核打击威胁、现实战争、炸大使馆、撞机等等，中国也是能买就买的，关键是人家不卖给你，你没有就可能面临亡国风险，所以才有了核技术、导弹技术、卫星技术、歼20、055大驱等等。</p><p>芯片的问题是，美国一直叫喊，但一直卖给你，而且当你买得稍微慢一点的时候，就赶紧威胁要制裁你什么的，然后中国企业就赶紧利用窗口期囤货，不计成本的使劲买一把，美国芯片相关企业就又可以弄一个很好的季度财报，然后股价再推一波。</p><p>现在很多人说，中国跟美国的芯片行业差距至少10年，面对美国的卡脖子，中国一点办法都没有。</p><p>那我的问题是，如果中国一点办法都没有，只能认输的话，美国为什么不一次性直接卡死华为呢？难道美国不想让华为消失？请注意，美国是拿着国家安全理由来打击华为的，那还不一下子整死，留着威胁美国安全？还记得前一阵美国是如何猎杀伊朗军事人物苏莱曼尼的吗？如果有可能将对手置之死地，美国绝不会选择放生的。</p><p>这次的“无限溯源”，也没一下子全禁止啊，美国还顾虑什么呢？很简单，美国在芯片领域要一下子干死华为，必须要出台非常无理的封杀条件，比如只要是使用了美国技术或产品，从而加工出来的芯片，都不允许出售给华为。但那是不是说，我芯片加工厂，用的一个螺丝刀，厂房里吹的空调，员工上班来开的汽车，都不能有美国的技术呢？这么追溯下去，那中国还有四大发明呢。</p><p>美国知道自己这种“无限溯源”的招数很搞笑，所以出台了一个，只要是各代工厂和核心设备，其使用的美国技术不能高于10%，如果比10%高，就得征得美国的同意才能跟华为合作。</p><p>说到这里，其实我想问一句，如果美国把封杀华为的要求升高到了，只要占美国技术10%就得禁用（此前的制裁要求是25%，结果发现加工企业很快就把对美国技术的依赖给降低了），那是不是也说明，其他90%的技术都可以跟美国无关？这其实令我很惊讶的。</p><p>而我了解到的是，很多领域美国技术占比之所以超过10%，不是因为没有替代，而是惯性选择。按照此前传出的台积电经过内部审核， 7 纳米制程的美国技术占9%，一些技术依然可以使用比如日本韩国等其他替代来进一步降低对美国技术的依赖。其实现在就只剩下一个光刻机的问题，这就是纯政治的问题了，因为最好的光刻机是荷兰的，使用了美国的部分技术。</p><p>那什么是政治问题呢？</p><p>在这个高度嵌入和全球化的时代，美国也没有只能杀死对方，而自己不受损的工具。如果双方走向极端，中国很大的可能也是被迫去美国产品化，高通、思科、苹果、波音等企业将会遭遇中国严厉的制裁或调查。这就要看谁的损失更大，谁更难以承受了。</p><p>一个国家的崛起，尤其是想摆脱“中等收入陷阱”，绝对不是一帆风顺的，也绝对不是只有掌声和鲜花的，这就好比，当病毒来临，隔离抗疫就是唯一的选择，很多人也都失业了，但你还是得必须挺过去，因为挺不过去，命可能都没了。同样的道理，当美国对华为的封杀来临时，战胜这种流氓行为，就是唯一的选择，要做好付出代价的准备。</p><p>很多人可能会说，那后果还不是老百姓承担吗？请注意，如果我们没有做好全民付出代价的反击决心，任由美国狙击华为，现在看跟自己无关，但未来你就会发现，你的工作机会同样在减少，你所购买的东西还会不断的涨价，你的生活品质不升反降，国际社会开始嘲笑你，就像现在“调侃”俄罗斯、巴西、墨西哥、土耳其等掉入中等收入陷阱的国家一样。</p><p>举个例子就是，当年日本占我东北，华北觉得没事，南方的蒋介石觉得可以忍受（不抵抗），很多人还不怀好意的议论一下东北同胞，但接下来就是华北、就是上海、南京。此时顶不住美国对华为的进攻，跟当年丢失东北道理一致。只不过这次丢失的，可能是改革开放以来获得的综合成果。</p><p>那如果顶住了呢？</p><p>我再跟大家举个例子，比如除了光刻机，芯片加工领域另一个核心设备叫刻蚀机，这个设备此前也遭遇美国的封锁。但自从中国的16nm刻蚀机量产运行，美国立马就解除了对中国刻蚀机的封锁，目前中国5nm刻蚀机已经获得批量订单。</p><p>也就是说，如果顶住了，就是战役的转折点，就是胜利，就是世界的尊重（包括美国），就是更大的生存空间，就是突然间冒出来更多的盟友。难道没有比这更值得争取吗？</p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p>按照美国各类顶级智库最近发出的报告来看，未来全球将演变为两套科技标准和不同的操作系统，这是必然趋势。</p><p>中国国内企业应该早做准备，这种危机，也意味着前所未有的机会。发达国家的人口不过9亿，中国所能提供的物美价廉的产品，可以覆盖中国乃至发展中国家至少三十亿的人口，这就是中国重新打造系统，农村包围城市的基础。</p><p>未来中国制造的手机等，完全可以搭载自己的操作和应用系统，以非常低廉的价格销售到发展中国家（希望中国的各互联网企业和各团队通力合作）。美国当年就是利用自身运营商系统，利用合约机的低价模式（美国98%的手机销售是合约机），也就是每月固定缴纳少量话费，就可以拿走手机，来完成了对美国系统的支撑和全球扩张的。</p><p>那为什么只有中国制造可以席卷更多发展中国家市场呢？道理也很简单，发达国家没有足够的制造业规模来降低成本。</p><p>我再跟大家举个例子就明白了，比如平衡车这个技术是荷兰人发明的，但荷兰人造出来一台要卖6万美元，结果没人买，公司倒闭后就把技术转给了美国人，而美国人造出来是3万美元，依然没有人买，最后干不下去了，把技术转给了中国的小米，结果小米把价格降到了一千多人民币（现在年销量数十万台，全球第一）。</p><p>如果中国不利用这种硬件价格优势，赶紧在发展中国家培植自己的软件系统，那留给中国的时间窗口就不多了。迫切的现实是，全球依然有三分之一的人没有手机（约25亿人），就算有手机的地方，用价格更低的硬件来换取用户对新的系统的支持，也是可以做到的。</p><p>如果你硬要说低价策略没有用，那是因为你所了解的世界，依然停留在被9亿发达人口洗脑的世界。我举一个我们身边的例子，比如以农村包围城市低价策略起步的拼多多，现在市值几乎跟京东相当。而跟京东的刘强东相比，你甚至可能都不知道拼多多的创始人是谁，你不觉得这很颠覆吗？</p><p>正是因为我们被发达国家洗脑时间太长了，近两百年来工业革命等的冲击太大了，所以对人类几千年的历史纵深失去了敬畏，失去了运用，所以你看，两百年来，发达国家依然还是那么几个，他们对待世界的态度几乎都没变过（比如美国现在对华为），以至于当我们可能掉入中等收入陷阱，当我们被发达经济体打压的时候，还反过来还要卑贱的告诉自己，发达国家之所以发达，是有原因的，我们之所以落后挨打，也是有原因的，就差说出“认命”二字了。</p><p>需要继续强调的是，我最担心的不是芯片问题，而是系统问题。就好比现在华为更苦恼的，也并非单纯的芯片问题，由于无法替代谷歌GMS系统，从而导致海外手机销量大幅下滑，这才是华为最致命的，因为这是面对数亿人的终端，这种渗透不是简单的砸钱就能换来的。</p><p>关于芯片领域，中国目前在芯片制造总计七个环节，全部23个细分方向，都实现了零的突破，其中至少有十个领域全球市场占有率接近或超过10%。</p><p>在芯片领域，反而我更担心美国（别笑），一旦这些领域都被中国攻克（中国诺一定会攻克），芯片市场可能又要进入“白菜价”了。到时候遭遇困境的，可能就不是中国企业了，美国又得失业一部分工人、流失一部分人才，然后又说是中国抢走了他们的工作。但到了那个时候，美国还有什么技术可以封锁中国呢？</p><p>最后，作为个人对华为的支持，我的下一部手机将会换成华为（我现在用的是苹果7Plus，已经用了好几年了），无论其搭载什么样的技术，就算体验倒退三年，我都接受。不管未来华为会变成什么样的企业，会犯什么样的错误，但这跟当下支持华为突围并不冲突。</p><p>前不久，英国前首相布莱尔（典型西方价值观捍卫者）罕见的对中国做了一下评论，一方面布莱尔承认全球已经离不开中国，承认中国已经拥有很大的实力，但同时布莱尔指出，现在全球担心的是，中国会如何使用这种力量。</p><p>那中国是如何回应的呢？</p><p>而后的中央政治局常委会，明确指出，中国要发挥新型举国体制优势，加强科技创新和技术攻关，强化关键环节、关键领域、关键产品保障能力。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Voimdq.png" data-fancybox="group" data-caption="Voimdq" class="fancybox"><img alt="Voimdq" title="Voimdq" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Voimdq.png" class="lazyload"></a></p><p>我想，中国新型的举国体制，也就是对自身力量的运用，不仅要体现在抗击疫情，以及攻克关键领域技术难题上，还要用在保卫改革开放三十年的发展成果上。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object-Relational Impedance Mismatch</title>
      <link href="/2020/05/25/3cd2/"/>
      <url>/2020/05/25/3cd2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="http://www.agiledata.org/essays/objectOrientation101.html" target="_blank" rel="noopener">Object-oriented technology</a> supports the building of applications out of objects that have both data and behavior. <a href="http://www.agiledata.org/essays/relationalDatabases.html" target="_blank" rel="noopener">Relational technologies</a> support the storage of data in tables and manipulation of that data via data manipulation language (DML) internally within the database via stored procedures and externally via SQL calls. Some relational databases go further and now support objects internally as well, a trend that will only grow stronger over time. It is clear that object technologies and relational technologies are in common use in most organizations, that both are here to stay for quite awhile, and that both are being used together to build complex software-based systems. It is also clear that the fit between the two technologies isn’t perfect, that there is an “impedance mismatch” between the two.</p><p>In the early 1990s the differences between the two approaches was labeled the “object-relational impedance mismatch”, or simply “impedance mismatch” for short, labels that are still in common use today. <strong>中文：“对象与关系的抗阻的不一致性”。全称为“面向对象编程与关系型数据库间的不一致”。</strong>Much of the conversation about the impedance mismatch focus on the <a href="http://www.agiledata.org/essays/impedanceMismatch.html#TechnologicalImpedanceMismatch" target="_blank" rel="noopener">technical differences</a> between object and relational technologies, and rightfully so because although there are <a href="http://www.agiledata.org/essays/impedanceMismatch.html#DeceptiveSimilarities" target="_blank" rel="noopener">deceptive similarities there are also subtle yet important differences</a>. Luckily, there are <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Strategies" target="_blank" rel="noopener">strategies for overcoming the O/R impedance mismatch</a>.</p><h2 id="1-The-O-R-Impedance-Mismatch"><a href="#1-The-O-R-Impedance-Mismatch" class="headerlink" title="1. The O/R Impedance Mismatch"></a>1. The O/R Impedance Mismatch</h2><p>Why does this impedance mismatch exist? The object-oriented paradigm is based on proven software engineering principles. The <a href="http://www.agiledata.org/essays/relationalTheory.html" target="_blank" rel="noopener">relational paradigm</a>, however, is based on proven mathematical principles. Because the underlying paradigms are different the two technologies do not work together seamlessly. The impedance mismatch becomes apparent when you look at the preferred approach to access: With the object paradigm you traverse objects via their relationships whereas with the relational paradigm you join the data rows of tables. This fundamental difference results in a non-ideal combination of object and relational technologies, although when have you ever used two different things together without a few hitches?</p><p>To succeed using objects and relational databases together you need to understand both paradigms, and their differences, and then make intelligent tradeoffs based on that knowledge. <a href="http://www.agiledata.org/essays/relationalDatabases.html" target="_blank" rel="noopener">Relational Databases 101</a> overviews relational databases and <a href="http://www.agiledata.org/essays/dataModeling101.html" target="_blank" rel="noopener">Data Modeling 101</a> describes the basics of data modeling, providing you with sufficient background to understand the relational paradigm. Similarly <a href="http://www.agiledata.org/essays/objectOrientation101.html" target="_blank" rel="noopener">Object-Orientation 101</a> overviews object-orientation and the UML, explaining the basics of the object-oriented paradigm. Until you understand both paradigms, and gain real-world experience working in both technologies, it will be very difficult to see past the deceptive similarities between the two.</p><h2 id="2-Deceptive-Similarities-Subtle-Differences"><a href="#2-Deceptive-Similarities-Subtle-Differences" class="headerlink" title="2. Deceptive Similarities, Subtle Differences"></a>2. Deceptive Similarities, Subtle Differences</h2><p>The easiest similarity/difference to observe is the different types in object languages and in relational databases. On the subtle side, Java has a string and an int whereas Oracle has a varchar and a smallint. Although values are stored and manipulated differently, it’s fairly straightforward to convert back and forth and DB access libraries such as JDBC handle them automatically. However, on the not-so-subtle side Java has collections whereas Oracle has tables, clearly not the same concepts. Oracle has blobs whereas Java has objects, once again clearly not the same concepts.</p><p><a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure1PDM" target="_blank" rel="noopener">Figure 1</a> depicts a physical data model (PDM) using <a href="http://www.agiledata.org/essays/umlDataModelingProfile.html" target="_blank" rel="noopener">UML data modeling notation</a>. <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure2ClassModel" target="_blank" rel="noopener">Figure 2</a> depicts a <a href="http://www.modelingstyle.info/classDiagram.html" target="_blank" rel="noopener">UML class diagram</a>. On the surface they look like very similar diagrams, and on the surface they in fact are. It’s how you arrive at the two diagrams that can be very different.</p><p><strong>Figure 1. A physical data model (UML notation).</strong></p><p><a href="http://www.agiledata.org/images/impedanceMismatchPDM.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.agiledata.org/images/impedanceMismatchPDM.gif" class="lazyload"></a></p><p>Let’s consider the deceptive similarities between the two diagrams. Both diagrams depict structure, the PDM shows four database tables and the relationships between them whereas the UML class diagram shows four classes and their corresponding relationships. Both diagrams depict data, the PDM shows the columns within the tables and the class model the attributes of the classes. Both diagrams also depict behavior, the <em>Customer</em> table of <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure1PDM" target="_blank" rel="noopener">Figure 1</a> includes a delete trigger and the <em>Customer</em> class of <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure2ClassModel" target="_blank" rel="noopener">Figure 2</a> includes two operations. The two diagrams also use similar notations, something that I did on purpose, although the UML data modeling notation is little different than other industry notations.</p><p><strong>Figure 2. A UML class model.</strong></p><p><a href="http://www.agiledata.org/images/impedanceMismatchClassDiagram.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.agiledata.org/images/impedanceMismatchClassDiagram.gif" class="lazyload"></a></p><p>Differences in your modeling approaches will result in subtle differences between your object schema and your data schema:</p><ul><li>By considering both data and behavior in the class diagram the modeler created a different structure than in the data model that only considered data</li><li><a href="http://www.agiledata.org/essays/dataNormalization.html" target="_blank" rel="noopener">Data normalization</a> in <a href="http://www.agiledata.org/essays/dataModeling101.html" target="_blank" rel="noopener">data modeling</a> versus <a href="http://www.agiledata.org/essays/classNormalization.html" target="_blank" rel="noopener">class normalization</a> in <a href="http://www.agiledata.org/essays/objectOrientation101.html" target="_blank" rel="noopener">class modeling</a></li><li>The application of data analysis patterns (<a href="http://www.amazon.com/exec/obidos/ASIN/0932633293/ambysoftinc" target="_blank" rel="noopener">Hay 1996</a>) versus object-oriented analysis patterns (<a href="http://www.amazon.com/exec/obidos/ASIN/0201895420/ambysoftinc" target="_blank" rel="noopener">Fowler 1997</a>; <a href="http://www.ambysoft.com/buildingObjectApplications.html" target="_blank" rel="noopener">Ambler 1997</a>) and design patterns (<a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/ambysoftinc" target="_blank" rel="noopener">Gamma et. al. 1995</a>)</li></ul><p>There are differences in the types of relationships that each model supports, with class diagrams being slightly more robust than physical data models for relational databases. This is because of the inherent nature of the technologies. For example, you see that there is a many-to-many relationship between <em>Customer</em> and <em>Address</em> in <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure2ClassModel" target="_blank" rel="noopener">Figure 2</a>, a relationship that was resolved in <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure1PDM" target="_blank" rel="noopener">Figure 1</a> via the <em>CustomerAddress</em> associative table. Object technology natively supports this type of relationship but relational databases do not, which is why the associative table was introduced.</p><p><a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure3FullyAttributedClassModel" target="_blank" rel="noopener">Figure 3</a> also reveals a schism within the object community. It is common practice to not show <a href="http://www.agiledata.org/essays/keys.html" target="_blank" rel="noopener">keys</a> on class diagrams (<a href="http://www.ambysoft.com/books/elementsUMLStyle.html" target="_blank" rel="noopener">Ambler 2003/2005</a>), for example there isn’t any shown on <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure2ClassModel" target="_blank" rel="noopener">Figure 2</a>. However, the reality is that when you are using a relational database to store your objects then each object must maintain enough information to be able to successfully write itself, and the relationships it is involved with, back out to the database. This is something that I call “<a href="http://www.agiledata.org/essays/mappingObjects.html#ShadowData" target="_blank" rel="noopener">shadow information</a>”, which you can see has been added in <a href="http://www.agiledata.org/essays/impedanceMismatch.html#Figure3FullyAttributedClassModel" target="_blank" rel="noopener">Figure 3</a> in the form of attributes with implementation visibility (no visibility symbol is shown). For example the <em>Address</em> class now includes the attribute <em>addressID</em> which corresponds to <em>AddressID</em> in the <em>Address</em> table (the attributes customers, state, and <em>zipCode</em> are required to maintain the relationships to the <em>Customer</em>, <em>State</em>, and <em>ZipCode</em> classes respectively).</p><p><strong>Figure 3. A fully attributed UML class model.</strong></p><p><a href="http://www.agiledata.org/images/impedanceMismatchFullyAttributed.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.agiledata.org/images/impedanceMismatchFullyAttributed.gif" class="lazyload"></a></p><table><thead><tr><th><strong><a href="http://www.ambysoft.com/books/agileDatabaseTechniques.html" target="_blank" rel="noopener"><img alt="Agile Database Techniques" data-src="http://images.amazon.com/images/P/0471202835.01.MZZZZZZZ.jpg" class="lazyload"></a></strong></th><th>The schism is that the object community has a tendency to underestimate the importance of object persistence. Symptoms of this problem include:The lack of an official data model in the UML (see <a href="http://www.agiledata.org/essays/umlDataModelingProfile.html" target="_blank" rel="noopener">The Unofficial UML Data Modeling Profile</a>)The practice of not modeling keys on class diagramsThe misguided belief that you can model the persistent aspects of your system by applying a few stereotypes to a UML class diagramMany popular OOA&D books spend little or no time discussing object persistence issues</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>Yet in reality object developers discover that they need to spend significant portions of their time making their object persistent, perhaps because they’ve run into performance problems after <a href="http://www.agiledata.org/essays/mappingObjects.html" target="_blank" rel="noopener">improper mappings </a>or perhaps because they’ve discovered that they didn’t take <a href="http://www.agiledata.org/essays/legacyDatabases.html" target="_blank" rel="noopener">legacy data constraints</a> into account in their design. My experience is that persistence is a significant blind spot for many object developers, one that promotes the <a href="http://www.agiledata.org/essays/culturalImpedanceMismatch.html" target="_blank" rel="noopener">cultural impedance mismatch</a>.</p><h2 id="3-Strategies-for-Overcoming-the-Object-Relational-Impedance-Mismatch"><a href="#3-Strategies-for-Overcoming-the-Object-Relational-Impedance-Mismatch" class="headerlink" title="3. Strategies for Overcoming the Object-Relational Impedance Mismatch"></a>3. Strategies for Overcoming the Object-Relational Impedance Mismatch</h2><p>Object and relational technologies are real, you are very likely working with both, and they are here to stay. Unfortunately the two technologies differ, these differences being referred to as “the object-relational impedance mismatch”. In this article you learned that there are two aspects to the impedance mismatch: technical and cultural.</p><p>The technical mismatch can be overcome by ensuring that project team members, including both application developers and Agile DBAs, understand the basics of both technologies. Furthermore, you should actively try to reduce the coupling that your database schema is involved with by encapsulating access to your database(s) as best you can, by designing your database well, and by keeping the design clean through <a href="http://www.agiledata.org/essays/databaseRefactoring.html" target="_blank" rel="noopener">database refactoring</a>.</p><h2 id="4-The-Cultural-Impedance-Mismatch"><a href="#4-The-Cultural-Impedance-Mismatch" class="headerlink" title="4. The Cultural Impedance Mismatch"></a>4. The Cultural Impedance Mismatch</h2><p>Unfortunately there has been less attention spent on the cultural differences between the object-oriented community and the data community. These differences are often revealed when object professionals and data professionals argue with each other regarding the approach that should be taken by a project team. For a detailed discussion, see <a href="http://www.agiledata.org/essays/culturalImpedanceMismatch.html" target="_blank" rel="noopener">The Cultural Impedance Mismatch Between Data Professionals and Application Developers</a>.</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 设计架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Architecture </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Android Work Environment</title>
      <link href="/2020/05/25/417d/"/>
      <url>/2020/05/25/417d/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="设置-Mac-OS-编译环境"><a href="#设置-Mac-OS-编译环境" class="headerlink" title="设置 Mac OS 编译环境"></a>设置 Mac OS 编译环境</h2><p>在默认安装过程中，macOS 会在一个保留大小写但不区分大小写的文件系统中运行。Git 不支持这种类型的文件系统，而且此类文件系统会导致某些 Git 命令（如 <code>git status</code>）的行为出现异常。因此，我们建议您始终在区分大小写的文件系统中处理 AOSP 源代码文件。使用下文中介绍的磁盘映像可以非常轻松地做到这一点。</p><p>有了适当的文件系统，在新型 macOS 环境中编译 <code>master</code> 分支就会变得非常简单。要编译较早版本的分支，则需要一些额外的工具和 SDK。</p><h3 id="创建区分大小写的磁盘映像"><a href="#创建区分大小写的磁盘映像" class="headerlink" title="创建区分大小写的磁盘映像"></a>创建区分大小写的磁盘映像</h3><p>您可以使用磁盘映像在现有的 macOS 环境中创建区分大小写的文件系统。要创建磁盘映像，请启动磁盘工具，然后选择 <strong>New Image</strong>。完成编译至少需要 25GB 空间；更大的空间能够更好地满足未来的增长需求。使用稀疏映像有助于节省空间，同时可以根据需要进行扩展。请选择 <strong>Case sensitive, Journaled</strong> 卷格式。</p><p>您也可以通过 shell 使用以下命令创建文件系统：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdiutil <span class="keyword">create</span> -<span class="keyword">type</span> <span class="keyword">SPARSE</span> -fs <span class="string">'Case-sensitive Journaled HFS+'</span> -<span class="keyword">size</span> <span class="number">40</span>g ~/android.dmg</span><br></pre></td></tr></tbody></table></figure></div><p>这将创建一个 <code>.dmg</code>（也可能是 <code>.dmg.sparseimage</code>）文件，该文件在装载后可用作具有 Android 开发所需格式的驱动程序。</p><p>如果您以后需要更大的卷，可以使用以下命令来调整稀疏映像的大小：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">arduino</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdiutil resize -<span class="built_in">size</span> <<span class="keyword">new</span>-<span class="built_in">size</span>-you-want>g ~/android.dmg.sparseimage</span><br></pre></td></tr></tbody></table></figure></div><p>对于存储在主目录下的名为 <code>android.dmg</code> 的磁盘映像，您可以向 <code>~/.bash_profile</code> 中添加帮助程序函数：</p><ul><li>要在执行</li></ul>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mountAndroid</span></span><br></pre></td></tr></tbody></table></figure></div><p>  时装载映像，请运行以下命令：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">jboss-cli</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount the android file image</span></span><br><span class="line">    mountAndroid<span class="params">()</span> { hdiutil attach ~<span class="string">/android.dmg</span> -mountpoint <span class="string">/Volumes/android</span>; }</span><br></pre></td></tr></tbody></table></figure></div><p>  <strong>注意</strong>：如果系统创建的是 <code>.dmg.sparseimage</code> 文件，请将 <code>~/android.dmg</code> 替换为 <code>~/android.dmg.sparseimage</code>。</p><ul><li>要在执行</li></ul>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">umountAndroid</span></span><br></pre></td></tr></tbody></table></figure></div><p>  时卸载映像，请运行以下命令：</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">awk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unmount the android file image</span></span><br><span class="line">    umountAndroid() { hdiutil detach <span class="regexp">/Volumes/</span>android; }</span><br></pre></td></tr></tbody></table></figure></div><p>装载 <code>android</code> 卷后，您将在其中开展所有工作。您可以像对待外接式驱动盘一样将其弹出（卸载）。</p><ol><li><h3 id="安装-Xcode-和其他软件包"><a href="#安装-Xcode-和其他软件包" class="headerlink" title="安装 Xcode 和其他软件包"></a>安装 Xcode 和其他软件包</h3><ol><li><p>使用以下命令安装 Xcode 命令行工具：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ada</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></tbody></table></figure></div><p>对于旧版 macOS（10.8 或更低版本），您必须从</p></li></ol></li></ol><pre><code>Apple 开发者网站安装 Xcode。如果您尚未注册成为 Apple 开发者，则必须创建一个 Apple ID 才能下载。</code></pre><ol start="2"><li><p>安装 <a href="http://www.macports.org/install.php" target="_blank" rel="noopener">MacPorts</a> 或 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 以进行软件包管理。</p></li><li><p>确保关联的目录位于</p></li></ol><pre><code><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">haml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight haml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br></pre></td></tr></tbody></table></figure></div>文件的路径中：1. MacPorts -   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">applescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/<span class="keyword">local</span>/bin</span><br></pre></td></tr></tbody></table></figure></div>   必须显示在   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">awk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin</span><br></pre></td></tr></tbody></table></figure></div>    之前：   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/opt/local/bin:$PATH</span><br></pre></td></tr></tbody></table></figure></div>2. Homebrew - /usr/local/bin：   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/usr/local/bin:$PATH</span><br></pre></td></tr></tbody></table></figure></div>3. 如果使用 MacPorts，请发出：   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">POSIXLY_CORRECT</span>=1 sudo<span class="built_in"> port </span>install git gnupg</span><br></pre></td></tr></tbody></table></figure></div>4. 如果使用 Homebrew，请发出：   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">mipsasm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git gnupg2</span><br></pre></td></tr></tbody></table></figure></div>### 设置文件描述符数量上限在 macOS 中，可同时打开的文件描述符的默认数量上限太低，在高度并行的编译流程中，可能会超出此上限。要提高此上限，请将下列行添加到 `~/.bash_profile` 中：`    # set the number of open files to be 1024    ulimit -S -n 1024`</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 编译环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 中美爆发芯片战争</title>
      <link href="/2020/05/23/e277/"/>
      <url>/2020/05/23/e277/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>编者按：</p><p>180年前发生的那场鸦片战争，英国不道德地利用其军事优势来解决当时的贸易争端，打开了大清的国门。在鸦片战争近两百年后，西方文明现在又不得不准备与中国打一场「芯片战争」。最有讽刺意义的就是，「芯片战争」要解决的实质问题，和鸦片战争要解决的其实是同一个问题，那就是按照什么原则来发展不同文明之间的交往与合作。</p></blockquote><h1 id="分水岭"><a href="#分水岭" class="headerlink" title="分水岭"></a>分水岭</h1><p>2020年5月16日，美国商务部工业与安全局(BIS)突然宣布，将全面限制华为购买采用美国软件和技术生产的半导体，包括美国以外被列入管制清单的生产设备，在为华为和海思生产代工前，都要获得美国允许。</p><p>这意味着，由台积电为华为供货的芯片产业链，或将遭到全面封杀。中芯国际，将成为华为芯片最后的依靠。</p><p>虽然台积电做了否认，但美国的制裁，从放出消息开始显然已经箭在弦上。</p><p>此前的5月5日晚，中芯国际宣布将回归A股科创板上市，芯片股板块早已掀起一阵涨停潮。</p><p>但这家企业本身，却命运多舛。</p><p>2009年，中芯国际创始人张汝京因台积电起诉而下课，从而经历了一段没有技术主干的探索期。那时，中芯国际虽号称中国芯片巨头，但与国内同行的技术差距并不大。</p><p>2017年，神秘人物梁孟松加入中芯国际，企业迎来了加速发展期。一年后，中芯国际的芯片制程提升到14nm工艺，产品良率提升到95%。</p><p>至此，中芯国际奠定了国内芯片“一哥”的地位。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/ra4PtP.png" data-fancybox="group" data-caption="ra4PtP" class="fancybox"><img alt="ra4PtP" title="ra4PtP" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/ra4PtP.png" class="lazyload"></a></p><p>梁孟松和中芯国际创始人张汝京，都出自台积电。此前，梁孟松曾在三星电子担任研发部总经理，并在2011-2015年将三星的芯片制程工艺，提升到和台积电的同一水平。结果，台积电依然挥舞起诉大棒，将梁孟松逼走。于是两年后，梁孟松加入中芯国际。而为了应对今天的困境，中国芯片产业发展一直在走生态路线，基本兼顾了全产业链的大部分环节。</p><p>2017年IC Insights报告显示，全球前十大IC设计企业中，华为海思已名列第7位。一边企业在推动，一边国家也在布局。2014年9月，国家集成电路产业投资基金(简称“大基金”)成立，重点投资集成电路芯片制造业，兼顾芯片设计、封装测试、设备和材料等产业，涵盖了IC产业上、下游。公开资料显示，大基金在制造、设计、封测、设备材料等产业链各环节投资比重，分别为63%、20%、10%、7%。正是大基金出现后，国内芯片公司掀起集体上市潮，且上市之路都一路绿灯。这基本坐实了中国在芯片领域全方位、全生态布局的基本思路。</p><p>现实证明，未雨绸缪非常有必要。2018年4月16日，“中兴事件”的爆发，中国科技保卫战正式打响。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/EYO6gr.png" data-fancybox="group" data-caption="EYO6gr" class="fancybox"><img alt="EYO6gr" title="EYO6gr" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/EYO6gr.png" class="lazyload"></a></p><p>▲中兴事件爆发后，77岁的创始人侯为贵赶赴美国斡旋(从左到右：董事长殷一民、创始人侯为贵、总裁赵先明）</p><p>面对美国的“长臂管辖”，当时就有业内人士预言：这只是中美贸易冲突的第一步，意在给中国高科技企业一个集体下马威。果不其然，2019年，华为成为美国打压的第二个重点目标。而且，这次打压华为的力度之强，远超中兴，并延绵至今。在贸易战、科技战的背景下，高科技产业链的断裂似乎近在眼前。于是从2019年8月开始，中国半导体行业迎来一波牛市。</p><p>截止2020年5月，闻泰科技、兆易创新、澜起科技、三安光电、中微公司、韦尔股份、汇顶科技等公司，市值纷纷突破千亿。它们在各自的领域，以领头羊的身份引领着中国芯片产业崛起。像汇顶科技的光学指纹模块，已经在国产手机中得到广泛使用，是距离我们最近的国产芯片之一。而基于中国在5G、AI、物联网等“新基建”的全面带动，中国的芯片市场将迎来一轮爆发，并推动中国芯片生态的整体进步。</p><h1 id="芯绞痛"><a href="#芯绞痛" class="headerlink" title="芯绞痛"></a>芯绞痛</h1><p>从2013年备战至今，中国芯片产业技术薄弱，依然是一个不争的事实。芯片设计上，华为依然需要ARM等公司在芯片架构上的授权;芯片生产上，中芯国际仍然绕不开荷兰ASML的光刻机。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/968ZXe.png" data-fancybox="group" data-caption="968ZXe" class="fancybox"><img alt="968ZXe" title="968ZXe" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/968ZXe.png" class="lazyload"></a></p><p>　　                        ▲荷兰ASML被曝禁止招收中国籍员工</p><p>而且，由芯片造就的生态环境，也垄断而封闭。只要是PC和手机的业内玩家，就必须选择Windows或安卓的阵营，因为无法在芯片架构上绕开英特尔的X86和ARM的独家授权。</p><p>一位业内人士曾形容：</p><p>“就像只有知道1+1=2，才能推算出1+2=3一样，在X86和ARM的生态中，除非颠覆Windows和安卓两大世界级操作系统，否则任何人都无法在这两套生态内，打破对英特尔和ARM的垄断。”</p><p>而在芯片设计环节，EDA等设计软件也存在严重垄断。全球做EDA的厂商有六七十家，Synopsys、Cadence及Mentor三家公司，垄断了国内95%、全球65%的市场份额。EDA对于芯片，就像考场上考生必须用的2B铅笔。离开这支笔，考生再优秀，也只能望题兴叹。</p><p>对于芯片设计标准的垄断，一位专业人士曾经以汽车行业举例：</p><p>国内芯片公司造芯片，就好像汽车零件厂商造出一个世界领先的零件，却无人采购。不是零件不能用，而是汽车制造时，零件参数都是照抄国外的。企业也不知道零件参数为什么设置成这样，一旦换了新零件，害怕出现难以预料的问题。这正是大部分中国芯片企业的困境。因为未知领域太多，所以从芯片设计到芯片应用，能够形成一定自主权的，也只有华为海思、汇顶科技等寥寥几家。芯片设计公司寄人篱下，芯片制造公司也并不好过。芯片行业，向来赢家通吃。通常是，老大吃好、老二吃饱，老三、老四可能生死难料。</p><p>基于此，老大、老二还会持续投入，更新技术。几轮沉淀下来，英特尔与AMD、高通与联发科的盈利差距，都是3倍起跳。至于第三、第四，若非华为倾力扶持海思、苹果绑定A系芯片，高通和联发科之外的名字可能根本不存在。</p><p>在芯片制造领域，这一规律同样适用。比如，手机SOC，大部分来自台积电;内存和储存芯片，大部分来自三星;手机相机的CMOS芯片，主要来自索尼和三星。造成这种局面的原因，可以在iPhone 6s的A9芯片上找到一些原因。2015年，苹果将A9芯片交给三星和台积电两家企业一起生产，其中三星使用14nm工艺，台积电使用16nm工艺。台积电的16nm工艺制程看似落后，但芯片实际投入市场后，不但性能不输，在功耗和发热控制上比三星的14nm更为优秀。鉴于芯片表现上的巨大差异，苹果公司一度因A9芯片混用的舆论倍感压力。经过这次翻车，台积电成功拿下此后大部分A系芯片订单。</p><p>大厂之间，尚且赢家通吃，小厂的生存窘境可想而知。</p><p>集邦咨询数据显示，中国1380家芯片设计企业中，80%以上企业年营收少于1亿。虽然这类企业的整体营收增速达到13.4%，但因为中国晶圆厂的代工产能无法满足芯片设计高涨的需求，导致缺口一直在扩大。</p><p>我们需要认知的事实是：在IC Insights 5月报告中，虽然海思冲进了全球前10，但也只是第10;芯片代工上，因为受制于光刻机，只能在14nm做文章，而台积电和三星已向5nm进发。所以，我们仍有太多短板需要补足。芯片的战争，从中国寻求自立的开始，就注定是一场持久战。此外，稀有材料和人才保障也是中国芯片生态茁壮成长的重要土壤。而这些，都是我们尚未深入涉足的领域。</p><p>唯一庆幸是，我们已经在路上。</p><h1 id="大良机"><a href="#大良机" class="headerlink" title="大良机"></a>大良机</h1><p>既然芯片攻坚这么难，中国还有机会吗?</p><p>当然有!</p><p>但芯片投资，百亿刚起步、千亿不算富，民间投资根本扛不住。这让国产芯片发展，陷入了一旦落后就一直落后的怪圈。但这一切，随着2014年大基金的成立彻底改变，芯片成为事关国家安全的命脉产业，投资从亏不亏钱的经济考量，变成了国家信息安全的战略博弈。太平洋研究院数据显示：2014年以后，中国在半导体领域的资本支出直线上升，并在2018年成功追平日本、欧洲的相关公司。</p><p>由此，海思、中芯、汇顶等一众巨头开始崛起。如今，它们都是国家半导体产业的中流砥柱。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/HbXZp5.png" data-fancybox="group" data-caption="HbXZp5" class="fancybox"><img alt="HbXZp5" title="HbXZp5" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/HbXZp5.png" class="lazyload"></a></p><p>而伴随5G、AI、物联网等领域的蓬勃兴起，中国市场的大江大海，显然能容纳更多的芯片巨头的成长。其中的标志性事件，就是2018年，制造业巨头格力和互联网巨头阿里，分别创立“零边界”和“平头哥”。2019年9月25日，杭州云溪大会上，阿里推出含光800 AI芯片。除了性能上号称全球最强之外，其“自研架构”格外引人瞩目。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/9n95ty.png" data-fancybox="group" data-caption="9n95ty" class="fancybox"><img alt="9n95ty" title="9n95ty" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/9n95ty.png" class="lazyload"></a></p><p>对此，阿里CTO张建锋表示：“在全球芯片领域，阿里巴巴是一个新人，玄铁和含光800是平头哥的万里长征第一步，我们还有很长的路要走。”  国家推动、巨头引领，中国芯片人才开始向头部企业聚集。某种程度上，也只有大公司开得起百万、千万的薪酬，吸引全球行业精英，并为经费高昂的芯片研发提供基础保障。</p><p>数据更能说明大公司的影响力。欧盟一份报告显示：2018年，全球研发投入最多的2500家公司，约占全球上百万企业整体研发经费的90%。</p><p>所以，中国芯片的生态战争，首先需要大公司为人才培养担负起责任，增强造血能力，从而实现生态层面的崛起。事实上，芯片的人才战争一直暗潮涌动。</p><p>比如，韩国半导体人才“出走”中国，已成现象级趋势。有报道显示，中国给三星电子部长级技术人员的年薪，高达294万人民币，是韩国薪水的3-4倍。有了人才的引入，加之大公司对新生人才的培育，中国正在逐渐打通生态体系的隔阂。只是，生态化自足，涉及到人才、硬件、原材料、光刻机和芯片架构等方方面面，注定了这是一条极其难走的道路。</p><p>而在现有技术条件下，中国的冲刺存在两大利好：</p><p>一是芯片制程方面的“摩尔定律”正在失效，让中国不再是永无止境的追赶，而存在弯道超车的可能。</p><p>二是在芯片设计领域，AI是一条全新赛道，全球尚未形成架构标准，这让AI芯片的生态系统拥有从底层重构的可能。</p><p>这一切，都是5G的战争前奏。</p><h1 id="沉寂中爆发"><a href="#沉寂中爆发" class="headerlink" title="沉寂中爆发"></a>沉寂中爆发</h1><p>2003年，上海交大微电子学院院长、教授陈进，通过把摩托罗拉芯片Logo磨掉的方法，伪造出“自研”的“汉芯”芯片。为了这块假芯片，国家虚耗了上亿资金。自研受挫后，中国企业一度展开各种技术并购，结果在美国政府阻挠下大都失败。自研受挫，并购受阻，中国信息产业一直严重依赖芯片进口。</p><p>1999年，中国大陆芯片销售总额为86亿美元，仅占全球市场的5.9%;但经过信息互联网产业的爆发式发展，2018年，中国进口芯片4175.7亿件，金额达2.184万亿，超过石油1.59万亿的进口总额，成为中国最大宗的进口商品。</p><p>2010年，是中国国产手机的集体爆发之年。那一年，华为、小米、Ov、魅族都悉数登场，摩拳擦掌等待着4G时代的手机红利。</p><p>但高通这样的芯片巨头，才是时代红利的终极收割者。通过芯片，高通横征暴敛，从所有手机厂商手里攫取整机价格4%的“高通税”，高过手机厂商3%的净利润率。</p><p><a href="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf2z6becelj30o20fndwz.jpg" data-fancybox="group" data-caption="image-20200523120534256" class="fancybox"><img alt="image-20200523120534256" title="image-20200523120534256" data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf2z6becelj30o20fndwz.jpg" class="lazyload"></a></p><p>​                        　　▲“我们有钱请律师!”是高通前CEO保罗·雅各布的名言</p><p>由于掌控他人命脉，高通对此毫不避讳：你不喜欢没关系，“我们有钱请律师”。2017年，苹果、三星、华为奋起反击，起诉高通。但折腾两三年，苹果选择和解，还付了45亿美元专利费;华为、三星也只能和解了事。</p><p>然而，芯片的本质上无非是高级沙子。眼见不计其数的中国制造和稀土等战略资源，被小小的芯片用白菜价换出去，中国成立大基金背后的自强与不甘，亦可想而知。</p><p>如今，5G风口已至。如果中国的芯片产业再错失机遇，芯片仍会是制约中国5G建设的最大掣肘。在这场旷日持久的大国博弈中，华为海思终成产业先锋。在经历多次迭代后，2019年9月，华为推出了可与高通、苹果比肩的麒麟990 5G芯片。从磨掉摩托罗拉Logo的伪造“汉芯”，到2019年苹果全球发布会上，苹果CEO库克将A13与麒麟980对标，中国的芯片征程走过了太多坎坷。</p><p>然而，华为过于亮眼的成绩，引发了美国以各种名义实施的全方位打压。多少习惯了“拿来主义”、鼓吹技术无国界的人才如梦初醒：原来只有缴够芯片“智商税”，才能平平稳稳做“全球化生意”。从这一刻起，芯片竞争已经演变为残酷的世界级战争。也正因如此，华为、中芯国际的一举一动，都被市场密切注视。</p><p>14nm的制程远远算不上优秀，甚至只能为中低端手机的SoC代工，但2020年4月荣耀Play4T搭载着中芯国际代工的麒麟710A处理器开售时，第一款纯国产芯片的商业化量产，让无数中国半导体人为之泪目。基于对中国芯的认可，2020年第一季度CINNO Research产业报告显示：华为海思以43.9%的市场份额首次超过高通，正式成为国内出货量最大的手机处理器品牌。</p><p><em>每个中国普通消费者，也都在用自己的方式，默默为优秀的中国企业投票。</em></p><p>有从业者观察表示：无数地方都梦想成为“中国硅谷”，甚至拿出几十亿补贴建厂。但芯片的生态战争，注定有人去拓荒，有人打基础。它比一场真实战争的复杂程度有过之而无不及，背后的动员、谋划、粮草安排都需要更顶层的设计与部署。</p><p>这是一场备受关注的世界大战，也是改变世界产业格局的博弈大战。它既是资本战、市场战，又是人才战，也是持久战，现在的情形看，还是一场几乎你死我活的恶战。它的成败，不仅将关系到一众高科技企业的命运，也将在科技驱动经济的时代关乎国运，关乎你我的未来。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片 </tag>
            
            <tag> 华为 </tag>
            
            <tag> 麒麟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding the Android Compilation Process</title>
      <link href="/2020/05/18/156f/"/>
      <url>/2020/05/18/156f/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/06xuWt.png" data-fancybox="group" data-caption="06xuWt" class="fancybox"><img alt="06xuWt" title="06xuWt" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/06xuWt.png" class="lazyload"></a></p><h1 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h1><p>The main objective of this blog post is to give you a clear idea about the Android compilation process which describes the stages through which your android application goes through when you build it.</p><h1 id="Step-1-What-you-should-know-before-starting-Android-Development"><a href="#Step-1-What-you-should-know-before-starting-Android-Development" class="headerlink" title="Step 1 What you should know before starting Android Development?"></a>Step 1 What you should know before starting Android Development?</h1><p><strong>Are you new to Android?</strong></p><p><em>Don’t worry! “I have got your back!!!” ;)</em></p><p><em>Any Android application has several building blocks. I will give you overview of</em></p><p><em>The Android’s component Architecture</em></p><p><em>The Android Runtime Environments - DALVIK AND ART.</em></p><p><em>Android Compilation Process</em></p><p><em>Fasten your seat belt! We are about to get started.</em></p><h2 id="1-1-The-Android’s-Component-Architecture"><a href="#1-1-The-Android’s-Component-Architecture" class="headerlink" title="1.1 The Android’s Component Architecture"></a>1.1 The Android’s Component Architecture</h2><p>Every <strong>Android application</strong> is made up of <strong>Components</strong>. Components are implemented as Java Classes.</p><p>For example, an <a href="https://developer.android.com/guide/components/fundamentals.html" target="_blank" rel="noopener">Activity</a> in Android represents a screen or a portion of a screen of the user’s device. It is an instance of a Java class named <strong>Android.app.Activity</strong></p><p><a href="http://www.theappguruz.com/app/uploads/2017/04/the-main-activity-or-user-screen.png" data-fancybox="group" data-caption="The Main Activity or user screen" class="fancybox"><img alt="The Main Activity or user screen" title="The Main Activity or user screen" data-src="http://www.theappguruz.com/app/uploads/2017/04/the-main-activity-or-user-screen.png" class="lazyload"></a></p><p>Another example is the <strong>UI element Button</strong>. A button in an Android application is an instance of a Java class named <strong>Android.widget.Button</strong></p><p><a href="http://www.theappguruz.com/app/uploads/2017/04/the-button-component.png" data-fancybox="group" data-caption="The Button Component" class="fancybox"><img alt="The Button Component" title="The Button Component" data-src="http://www.theappguruz.com/app/uploads/2017/04/the-button-component.png" class="lazyload"></a></p><p><em>These are just two examples I have mentioned, but there are thousands of Java classes and interfaces in the Android SDK. I do not want you to worry about ALL THOSE at this moment. ;).</em></p><p><em>You can also create your own Java classes representing your app’s components.</em></p><h2 id="1-2-The-Android-Compilers-DALVIK-vs-ART"><a href="#1-2-The-Android-Compilers-DALVIK-vs-ART" class="headerlink" title="1.2 The Android Compilers (DALVIK vs ART)"></a>1.2 The Android Compilers (DALVIK vs ART)</h2><p><strong>How do your devices (Mobile Phone, Tablet, Android TV and many more) understand the Java code that you have written?</strong></p><p>Your source code is <strong>compiled by</strong> Standard Java Compiler which uses the <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank" rel="noopener">JIT- ‘Just-In-Time’</a> <strong>compilation model</strong>.</p><p>Once the code is compiled, it becomes <strong>bytecode</strong> <em>(with ‘.class’ extension)</em>. This code goes for a second round of compilation (Again to Bytecode - But this time it is minimized).</p><p>The bytecode gets <strong>executed by target-specific-JVM</strong> (<a href="http://www.javatpoint.com/internal-details-of-jvm" target="_blank" rel="noopener">Java Virtual Machine</a>) which is a runtime environment for Java.</p><p><strong>But for Android, we have two different virtual machines:</strong></p><ol><li>DALVIK</li><li>ART</li></ol><h3 id="1-2-1-DALVIK"><a href="#1-2-1-DALVIK" class="headerlink" title="1.2.1 DALVIK"></a>1.2.1 DALVIK</h3><p>Prior to <a href="https://en.wikipedia.org/wiki/Android_Runtime" target="_blank" rel="noopener">ART</a> <em>(that was introduced with the release of Android 4.4 - that is, ‘Kitkat’)</em> the <strong>runtime environment for Android apps</strong> was <a href="https://en.wikipedia.org/wiki/Dalvik_(software)" target="_blank" rel="noopener">DALVIK</a>.</p><p><strong>So why did Google moved from DALVIK to ART?</strong></p><p><strong>There was one major disadvantage of DALVIK - It was SLOW!</strong>.</p><p>It was FRUSTRATING for users to use their apps on their devices as the apps stuttered while running.</p><p>Dalvik uses JIT compilation model. JIT compiler compiles the app when they are opened by users (The app start up procedure). So it made opening of apps slower and which in turn hampered the user experience.</p><h3 id="1-2-2-ART"><a href="#1-2-2-ART" class="headerlink" title="1.2.2 ART"></a>1.2.2 ART</h3><p>ART uses the <a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation" target="_blank" rel="noopener">ahead-of-time</a> compilation model which compiles the apps to machine code upon installation</p><p>Apps run a bit FASTER! under ART, so the startup time of apps gets reduced.</p><p>It also has improved garbage collection so that the user sees fewer pauses and stutters in a low memory environment.</p><p><strong>ART has its own limitations:</strong></p><ol><li><strong>Installation time issue:</strong> The installation process is slow with ART as apps to machine code conversion takes time.</li><li><strong>Size issue:</strong> Compiling the code upon installation means that the app has to ‘live’ on your device. So, for a relatively smaller Java code the machine or the bytecode will be comparatively large.</li></ol><p><a href="https://www.quora.com/Why-is-ART-better-than-Dalvik" target="_blank" rel="noopener">Here</a> is a quora thread discussing ART vs DALVIK</p><p><a href="http://www.theappguruz.com/app/uploads/2017/04/android-kitkat-introduces-art.png" data-fancybox="group" data-caption="Introduces Android Kitkat Art" class="fancybox"><img alt="Introduces Android Kitkat Art" title="Introduces Android Kitkat Art" data-src="http://www.theappguruz.com/app/uploads/2017/04/android-kitkat-introduces-art.png" class="lazyload"></a></p><h1 id="Step-2-The-Android-Compilation-Process"><a href="#Step-2-The-Android-Compilation-Process" class="headerlink" title="Step 2 The Android Compilation Process"></a>Step 2 The Android Compilation Process</h1><p><a href="http://www.theappguruz.com/app/uploads/2017/04/the-android-compilation-process.png" data-fancybox="group" data-caption="The Android Compilation Process" class="fancybox"><img alt="The Android Compilation Process" title="The Android Compilation Process" data-src="http://www.theappguruz.com/app/uploads/2017/04/the-android-compilation-process.png" class="lazyload"></a></p><p>When you compile a Java code into an Android app, it goes through a number of stages</p><h2 id="2-1-From-source-code-to-bytecode"><a href="#2-1-From-source-code-to-bytecode" class="headerlink" title="2.1 From source code to bytecode"></a>2.1 From source code to bytecode</h2><p>You will need <strong>JDK</strong> (<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java Developer Kit</a>) <strong>to compile the Java code</strong> of your application.</p><p>Your code and precompiled classes from runtime and custom libraries are compiled first by ‘Javac’ (JIT Compiler/ Standard Java Compiler).</p><p>The Javac outputs a set of Java bytecode files. So far this looks like any Java compiler process but the next compilation step makes the compilation process unique to Android.</p><h2 id="2-2-The-obfuscator-ProGuard-Tool"><a href="#2-2-The-obfuscator-ProGuard-Tool" class="headerlink" title="2.2 The obfuscator! (ProGuard Tool)"></a>2.2 The obfuscator! (ProGuard Tool)</h2><p>This step is optional, you can omit this step if you want to.</p><p>The ProGuard Tool takes the Java bytecode files (output as a step number 1) and sends them through a tool named <a href="https://en.wikipedia.org/wiki/ProGuard_(software)" target="_blank" rel="noopener">ProGuard</a>. It will <strong>minimize</strong> and obfuscate (meaning - To make obscure, unclear or unintelligible) <strong>your code</strong>.</p><p>It is disabled by default in new Android projects but when ProGuard is turned on,it will analyze your code and remove implementations of methods, for example, that aren’t called.</p><p>This can dramatically shrink your distributable app package. It also obfuscates your code by changing method names and so on making it harder to decompile packaged Java code by a third person or organization.</p><p>Regardless of the use of ProGuard you once again end up with .class files (minimized bytecode).</p><h2 id="2-3-From-minimized-bytecode-to-dex-code"><a href="#2-3-From-minimized-bytecode-to-dex-code" class="headerlink" title="2.3 From minimized bytecode to dex code"></a>2.3 From minimized bytecode to dex code</h2><p>The next step is to take the output files from step number 2 and to turn those files into <strong>dex bytecode - Dalvik EXecutable(.DEX)</strong>.</p><p>The DEX bytecode is a format that is optimized for Android and which can be executed by the older DALVIK runtime or the newer ART runtime.</p><h2 id="2-4-Execution-of-Machine-Code"><a href="#2-4-Execution-of-Machine-Code" class="headerlink" title="2.4 Execution of Machine Code"></a>2.4 Execution of Machine Code</h2><p>The device’s runtime read these dex files (output of step number 3) and recompile some of the files to machine code for the fastest possible execution.</p><p>On DALVIK this step happens as the app runs using Just-In-Time or JIT architecture.</p><p>On the newer ART, the recompilation (or translation to machine code) happens when the app is first installed, meaning that the app can run faster when the user runs it on his/her device.</p><p>And that’s how your Java code turns into something that runs on Android. It starts with Java and after a couple of steps, it is transformed into something which the Android runtime can read and execute.</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Compilation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Compilation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解华为正在开发的操作系统</title>
      <link href="/2020/05/17/bbe/"/>
      <url>/2020/05/17/bbe/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>转文学城</p></blockquote><p>读者按： 最近开始研究华为的系统，读了很多文章和代码，计划庖丁解牛的研究华为面临的问题。只有清晰的了解问题后，才可以对症下药。这篇文章有点意思，记录一下以做参考。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/QayQoK.png" data-fancybox="group" data-caption="QayQoK" class="fancybox"><img alt="QayQoK" title="QayQoK" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/QayQoK.png" class="lazyload"></a></p><p>华为消费者业务总裁余承东在朋友圈说最快今年秋天，最晚明年春天，华为自己的操作系统（OS）将可能面市。华为的OS打通了手机、电脑、平板、电视、汽车、智能穿戴，统一成一个操作系统。且华为OS还兼容全部的安卓应用和所有的Web应用，相关安卓应用在华为OS上重新编译后，运行性能提升将超过60%。</p><p>据传这个操作系统叫鸿蒙。鸿蒙本意是中国神话中的在天地开辟之前，一团混沌的元气世界。很奇怪，为什么华为的OS叫鸿蒙。等待开辟？还是一团混沌？</p><p>余承东别号余大嘴，朋友圈的话算不上正式发布，双重不靠谱。</p><p>这位老总一定是把操作系统混同于华为宣传的方舟编译器了。以前华为宣布方舟编译器的终极目标，是推出一个跨平台、跨系统、跨设备多种语言的软件开发平台。操作系统包括的东东比一个编译平台多得多。工作量也大得多。能够跨系统写应用软件不等于一统江湖的跨设备的操作系统。</p><p>根据华为公开的信息，鸿蒙是一个基于安卓的，集成了华为对安卓系统的既往优化的操作系统，包括EMUI5.0 优化，方舟编译平台， GC 优化，EROFS文件系统等等。但主框架仍然脱不了安卓或者Linux的操作系统。由于安卓和Linux都是开放的，这样做没有问题。它让人想起了2014年被收购的红旗Linux。</p><p>当今手机操作系统领域，基本上是苹果和安卓的二分天下。苹果是先行者，谷歌是赶超者。先行者有先发优势。即使不开放，也能占领很大市场。安卓不同于苹果系统是它的开放性，它采用了跨平台操作的JAVA语言，支持不同硬件设备，环境对应用开发商开放。苹果手机使用自己的硬件，严格管控应用开发商。苹果的封闭环境，使它更易于高效，更容易优化，这就是为什么苹果手机使用规格较低的硬件还能让用户感受流畅的体验。谷歌为了培养生态系统，采用了开源的安卓，对效率和性能不得不有所牺牲。谷歌的开放，使很多新制造商（包括华为）可以快速进入智能手机领域。也使安卓的应用大量增加。据2017年年底统计，安卓的应用比苹果多了42%。全球范围内，安卓用户占86%，苹果用户占14%。</p><p>手机操作系统的后发者，还有诺基亚的塞班，Palm的Palm OS和微软的window Phone，都是由于没有杀手锏以及生态圈没做好，惨遭淘汰。</p><p>具体来说，安卓系统在两个性能上落后于苹果OS。一个是为了跨硬件操作，JAVA使用了虚拟机。功能是将各种硬件抽象成Java的运行环境，JAVA只管虚拟机。而虚拟机负责连接具体硬件。因此Java实现了跨平台——不管是X86，ARM，还是其他CPU的机器都没有问题。虚拟机里有一个解释器，将JAVA语言逐句翻译成硬件懂得的机器码。而苹果由于没有跨平台的问题，事先把整个程序编译成机器码，执行起来就快了。另一个瓶颈是安卓需要回收不再使用的内存，这个工作叫garbage collection （GC）。GC时，虚拟机要停止运行，判断哪些内存不再使用并释放。这个停顿会造成手机的卡顿。</p><p>谷歌和其他安卓手机制造商，也在持续优化安卓，一方面是硬件提升。由于硬件越来越便宜，手机上的CPU增至8核，速度也增加了很多。内存也由几百M增加到8G。软件上，谷歌采用了JIT（Just In Time）编译。当系统发现程序内有一段代码频繁执行的时候，下次调用就不用重复解释，直接执行上次解释出的机器指令。虚拟机进化到ART（Android Run Time）后，采用了AOT编译器（Ahead Of Time），就是运行之前，将部分代码静态编译为机器码，极大地提升了效率。但对于那些Java动态特性的部分，还有其他部分，仍然做不到直接编译，还是要解释执行。GC方面谷歌也做了优化，将GC的频率和时间都减少了。综合效果是，如果你用的是一个比较新的手机，硬件配置属于中高端，安卓版本比较新，基本上感觉不到卡顿，运行比较流畅。</p><p>当不能得到谷歌GMS授权后，华为如果能很快推出新手机操作系统，而且这个操作系统有革命性的创新，且性能大大领先于现有的安卓，就会成为一个大杀器，挽回流失的用户。但是作为后发者的华为进入手机操作系统领域，除了为培育生态圈，必须开源之外，还要有一些杀手锏。方舟编译器似乎就是是鸿蒙寄予深厚希望的一个杀手锏。华为宣称，方舟编译器可让系统操作流畅度提升24％，系统响应速度提升44％，第三方应用编译后流畅度可提升60％！是革命性的优化，全程执行机器码，高效运行应用，彻底解决安卓应用“边解释边执行”造成的低效率。</p><p>根据目前公开的资料。方舟编译器不再使用Java的虚拟机，而是开发者在应用打包的时候就将所有程序，包括静态和动态的部分直接编译成机器指令。 这种编译会带来跨平台问题，java使用虚拟机解决的正是这个问题。方舟对跨平台问题的解决方法，是同时编译出所有硬件平台对应的机器码文件，之后在具体手机安装的时候选择针对当前硬件平台的机器码装入手机。因此会出现安装包容量大的问题（因为安装包包含所有硬件平台的二进制文件）。导致应用安装包和安装后的机器码占用空间增大。据估计，方舟编译器重新编译的安装包要比安卓大两三倍，手机安装后的机器码要大0.5-1倍。带来的问题是占用存贮和内存显著增加。用户下载安装包会消耗越来越多的时间和流量。这是一个用空间换取运行速度的策略。</p><p>方舟编译器会有严重的生态问题。首先华为必须将编译器代码开放，让应用开发商免费下载。应用开发商将其已发布的应用重新编译，并再次对安卓的所有版本和所有硬件平台进行测试。改正Bug后，重新发布，在所有应用商店上架。这个工作必须让各个应用开发商自己做，华为不能代劳，因为由于安全原因，每个应用都要有开发者的签名。这基本上是一个不可能完成的任务。你可以在爱国情怀下忽悠国内的部分开发者，但不可能让全球的应用开发者来跟随。大多数的app开发商是中小规模的，甚至是个人，怎么可能有时间有精力开发编译测试如此多的版本？</p><p>方舟编译器还有维护的困难。当新的非华为（高通，联发科等）硬件平台发布后，方舟编译器必须及时跟进，并将新版本推送给所有的开发商。随着越来越多新硬件的发布，方舟编译出的安装包势必会越来越大。用户下载安装包会消耗越来越多时间和流量。同时开发商编译时间会越来越长，需要测试的硬件会越来越多。</p><p><a href="https://inews.gtimg.com/newsapp_match/0/10158083033/0" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://inews.gtimg.com/newsapp_match/0/10158083033/0" class="lazyload"></a></p><p>这么大的麻烦换取的是最多44%的系统响应速度。而且这个提升很可能是在实验室特定条件下测得的。体现在用户感知上，很可能要大打折扣。根据用户感知测试，一般人对在0.2秒以下的速度提升没有感知。在这个区间，人的感知已经达到饱和。换句话说，把响应速度从0.2秒提升到0.1秒，大部分人感觉不到区别。据我的经验，目前中高端安卓手机的性能瓶颈不是CPU的处理速度， 更不在解释执行速度。 所以对这个方舟的优化，用户很可能无感。</p><p>另一个华为宣传的对安卓的优化是内存垃圾回收（GC），从全局统一回收改变为随用随回收，回收时无需暂停应用，宣称消除了因内存回收的卡顿。但问题是，安卓自5.0版本以后，采用ART虚拟机，GC的次数和停顿时间已经大大改善，GC引起的卡顿几乎感知不到了。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q732on.png" data-fancybox="group" data-caption="Q732on" class="fancybox"><img alt="Q732on" title="Q732on" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q732on.png" class="lazyload"></a></p><p>最重要的是，华为这些对安卓的改善可以说都是工程方面的，没有技术的创新。消除JNI的开销,把Java和C在一起编译，来自于甲骨文的GraalVM和开源的LLVM；无需虚拟机类似于苹果swift语言的执行和谷歌的AOT；引用计数的垃圾回收也是业界已有的建议。所有的思路都是谷歌曾经想到的，但为了可移植性做的牺牲。</p><p>谷歌也在对安卓优化，开发下一代操作系统。项目叫Fuchsia。 Fuchsia基于微内核架构，用于嵌入式系统，主要使用C语言和C++编写。Fuchsia的设计目标之一是可运行在众多的设备上，包括移动电话和个人计算机。</p><p>比较谷歌和华为的操作系统，目标虽然相同。但谷歌的系统包含更多的技术创新，而华为的系统著重于工程集成。这反映了两个公司的区别。谷歌代表的是技术创新。而华为擅长的是工程能力，还需要更多的创新！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> 鸿蒙 </tag>
            
            <tag> 方舟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Architecture</title>
      <link href="/2020/05/17/b272/"/>
      <url>/2020/05/17/b272/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Android is designed so that there’s no central point of failure, where one industry player restricts or controls the innovations of another. The result is a full, production-quality consumer product with source code open for customization and porting.</p><p><a href="https://source.android.com/images/android_framework_details.png" data-fancybox="group" data-caption="Android framework details" class="fancybox"><img alt="Android framework details" title="Android framework details" data-src="https://source.android.com/images/android_framework_details.png" class="lazyload"></a></p><h1 id="Platform-Architecture"><a href="#Platform-Architecture" class="headerlink" title="Platform Architecture"></a>Platform Architecture</h1><p>Android is an open source, Linux-based software stack created for a wide array of devices and form factors. The following diagram shows the major components of the Android platform.</p><p><a href="https://developer.android.com/guide/platform/images/android-stack_2x.png" data-fancybox="group" data-caption="The Android software stack" class="fancybox"><img alt="The Android software stack" title="The Android software stack" data-src="https://developer.android.com/guide/platform/images/android-stack_2x.png" class="lazyload"></a></p><p><strong>Figure 1.</strong> The Android software stack.</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美方完美封杀华为 特朗普打响中美贸易战2.0</title>
      <link href="/2020/05/17/2bbd/"/>
      <url>/2020/05/17/2bbd/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>中美关係在刚过去的周五（15日）发生了两件关键大事，一是美国决定进一步收紧向中国电讯设备巨头华为供货，二是华为芯片主要供应者台积电，宣布在美国设立高端芯片厂的计划。两事相隔仅数小时，绝非偶然巧合，客观上产生的效应是：美国升级攻击华为供应链，而作为华为伙伴的台积电，释出站在美国一方的姿态。如再结合特朗普政府近期不断重申的中美「脱钩论」，可以合理推敲，美国已为攻击中国供应链掀起大幕。有观察者形容，这是中美贸易战的第二波。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/9iVdMh.png" data-fancybox="group" data-caption="9iVdMh" class="fancybox"><img alt="9iVdMh" title="9iVdMh" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/9iVdMh.png" class="lazyload"></a></p><p>新冠肺情令中美关係陷于低谷，但中方连日来大手购买美国大豆、猪肉等产品，展示愿意履行第一阶段中美贸易协议的姿；但此举似乎不足以解读为「中美贸易战缓和」；相反，上周五两个与美国相关的消息，足以说明中美贸易矛盾不仅没放轻，且还有恶化趋势。</p><p>其一：美方收紧向华为供应半导体的限制：</p><p>美国商务部宣布新规定，要求各国採用美国科技、卖给华为的半导体产品，一律须取得美国政府许可，这远比过去的「美国技术含量15%」以上才受限，更为严苛。</p><p>商务部工业和安全局声明提到，美方自去年将华为及其114间关联企业列入「出口管制实体名单」，限制美国企业供货华为后，华为却继续通过委託使用美国设备的海外代工厂生产，又使用美国的软件和技术来设计芯片，破坏「实体名单」目的。美方因此堵塞漏洞。</p><p>其二：全球芯片代工龙头台积电宣布赴美设厂计划：</p><p>台积电宣布计划投资120亿美元，在美国亚利桑那州新建工厂，生产目前最高端的5纳米芯片，预计4年后投产、每月产出2万片芯片。</p><p>伯恩斯坦证券估计，台积电美厂房未来月产2万片芯片，只佔到4年后的台积总产能不到2%，这对苹果（Apple）等每月要用上6到10万片，根本是极杯水车薪。因此，预计亚利桑那厂生产的，该是敏感度最高、最需要在美国製造的军用晶片，例如战斗机用的处理器。此举是要防止军工技术转移中国。</p><p>路透社解读指，美国推出新版的华为禁令，旨在瞄准打击华为供应链，而台积电在几乎同一时间宣布在美设厂，便颇有站队美国的意思；而中美科技产业对抗升级，更可能导致华为手机全面难产。事实上，由于华为已经不再使用高通的产品，而是由华为自家子公司—海思半导体研发，并交付台积电代工生产晶片。美方上述组合拳，是要完美封杀华为。</p><p>值得注意是，美国总统特朗普在周四（14日）播出的霍士财经频道访问中提到，新冠肺炎疫情凸显了美国本土製造业的重要性，应把供应链迁离中国。因此有理由相信，美方针对华为的动作只是前奏，未来有可能拓散到中美其他领域。</p><p>有一名美国半导体业副总更形容，特朗普打击华为的新政，「是第二波中美贸易战开打」。华为虽亦有在中国南京设厂，但只生产16纳米的晶圆产品、比今天最高端的心片落后了一代，未来的发展挑战重重。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 国际经济 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> 中美对抗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全球化2.0与中国“战略性分手”的三种形式</title>
      <link href="/2020/05/17/ba7b/"/>
      <url>/2020/05/17/ba7b/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>文章来源: 自由亚洲电台</p></blockquote><p>全球化2.0与中国“战略性分手”（自由亚洲电台制图）</p><p>西方五眼联盟学者提出了与中国的”战略性分手”三管齐下的策略。这可能在全球化2.0之际，重创中国的经济地位。</p><p>美国总统特朗普周四刚发表了“切断和中国关系”的讲话，周五，美商务部宣布新出口禁令，扩大对华为供应链封锁；同日，台湾的半导体大厂台积电宣布斥资在美国亚利桑纳州建造芯片厂，获得美国官员的大力赞扬。</p><p>中国外交部发言人赵立坚5月15日则批评”美中脱钩”的氛围。赵立坚：”合则两利，斗则俱伤，搞脱钩和切割没有出路。”</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/kWhH6I.png" data-fancybox="group" data-caption="kWhH6I" class="fancybox"><img alt="kWhH6I" title="kWhH6I" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/kWhH6I.png" class="lazyload"></a></p><h1 id="中国不再是可靠的伙伴"><a href="#中国不再是可靠的伙伴" class="headerlink" title="中国不再是可靠的伙伴"></a>中国不再是可靠的伙伴</h1><p>英国智库“亨利·杰克逊协会” (Henry Jackson Seciety)的研究部主任安德鲁·福克萨尔(Andrew Foxall)告诉自由亚洲电台，”与中国脱钩”的概念自美中贸易战打响开始就在西方世界传播，新冠疫情加速让世界重新思考产业链过于依赖中国的危险性。</p><p>福克萨尔：”（疫情）让西方更清楚地意识到，中国不再是可靠的伙伴。这种（与中国）脱钩或说成是战略性的分手，确实困难，但绝对有必要。”</p><p>亨利·杰克逊协会14日发布的报告，详细分析了五眼联盟国家在关键进口商品上对中国的”战略依赖”程度。所谓“战略依赖”，指该商品有50％以上来自中国供应链，且中国控制该商品30%以上的全球市场。</p><p>报告发现，“五眼联盟”成员澳大利亚、新西兰、美国、加拿大、英国共有831种进口商品对中国有“战略依赖”，其中260种是国家基础设施（CNI）的关键组成部分。所谓“五眼联盟”是这些国家组成的一个分享情报的机制。</p><p>报告的共同作者、亨利·杰克逊学会 “全球英国”计划负责人罗杰斯(James Rogers)在接受自由亚洲电台专访时表示，这份报告的目的是把对中国依赖程度高的关键商品找出来，让这些国家政府在制定与中国脱钩计划时，能做出清楚的选择。</p><p>罗杰斯：”我们把重点放在影响国家关键基础设施的产业，比如医疗、国防、科技，以及会影响进入第四次工业革命的生技、化学原料、稀土等。五眼联盟必须确保在这些方面不依赖中国。”</p><p><a href="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevy9gdph4j30pc0e8kdo.jpg" data-fancybox="group" data-caption="image-20200517101508098" class="fancybox"><img alt="image-20200517101508098" title="image-20200517101508098" data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevy9gdph4j30pc0e8kdo.jpg" class="lazyload"></a></p><p>变态辣椒：全球化2.0即将开通 疫情雷区请绕行 Photo: RFA</p><h1 id="学者提与中国”战略性分手”的三种形式"><a href="#学者提与中国”战略性分手”的三种形式" class="headerlink" title="学者提与中国”战略性分手”的三种形式"></a>学者提与中国”战略性分手”的三种形式</h1><p>福克萨尔告诉本台，西方国家不应该完全切断与中国的关系。所谓的与中国脱钩不是提倡保护主义，更不该被诠释为反全球化、反对自由贸易，重点是在战略产业不再集中依赖中国。</p><p>这份报告提出了对中国脱钩策略需要三管齐下。第一”消极性脱钩”，指的是对关键性中国商品的进口予以限制；第二”积极性脱钩”，指在本国或其它国家拓展产业链；第三”合作性脱钩”，则是由五眼联盟国的经济合作、情报共享开始，并进一步扩大到印太区域的合作伙伴如日本、韩国、台湾、印度和越南等。</p><h1 id="中国制造2025化为幻影？"><a href="#中国制造2025化为幻影？" class="headerlink" title="中国制造2025化为幻影？"></a>中国制造2025化为幻影？</h1><p>2015年，中国国务院总理李克强曾提出”中国制造2025”的政策，希望中国从低端制造大国跻身高端产业的制造业强国。</p><p>罗杰斯告诉自由亚洲电台，在这场由美国引领的全球与中国脱钩计划下，势必对中国造成”重大影响”，中国势必要重新拟定战略计划。</p><p>罗杰斯：”美国一直是中国工业现代化的主要投资者及最大的市场。如今从美国到五眼联盟再到世界各国越广泛的与中国脱钩，势必对中国的计划造成重大影响。”</p><p>两位学者都提到了上世纪九十年代的全球化政策。西方国家很多人都期待全球化会加速中国中产阶级崛起，最终能够成为推动中国融入全球政治经济体的力量。</p><p>罗杰斯说，全球化的基础是各国对贸易规则的尊重与合作。但是从中国现任政府看来，中国并没有选择往这条路走。他说，而当世界发现全球化1.0这条路不再与各国利益相符，终将采取行动，在全球化2.0的进程中一起”约束中国”。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 国际经济 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中美对抗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国封杀华为“断芯”升级 中国或砍苹果出气</title>
      <link href="/2020/05/17/7b8a/"/>
      <url>/2020/05/17/7b8a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>美国商务部星期五（5月15日）宣布扩大对中国华为公司的禁令，要求那些依赖美国设备和软件的外国芯片制造商必须取得美国商务部的特许，方可向中国华为公司出口芯片产品。中国官方媒体暗示，中国可能出台针对苹果、波音等美国企业的报复措施。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/YqpgBI.png" data-fancybox="group" data-caption="YqpgBI" class="fancybox"><img alt="YqpgBI" title="YqpgBI" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/YqpgBI.png" class="lazyload"></a></p><p>美国官员说，华为一直在通过从美国以外的制造商获取芯片，规避美国制裁。</p><p>美国商务部的声明说，新推出的决定将切断华为对美国出口管制的“破坏努力”，商务部下属的工业和安全局（BIS）正在修订“外国直接产品规则”和“实体清单”，以具有战略性做法专门针对华为试图获取的、直接通过美国软件和技术制造的半导体产品。</p><p>美国商务部长罗斯星期五在接受福克斯商业频道采访时说：“一直以来，华为都在用一个非常有技术性的漏洞通过外国晶圆生产商使用美国的技术。”他说，新的规定“试图纠正这个漏洞，并确保美国的晶圆厂与外国晶圆厂在平等的基础上竞争。”</p><p>华为去年被列入美国商务部“实体清单”。美国政府以国家安全为由，限制美国制造的产品卖给华为，禁令也针对一些包含美国技术的外国产品。路透社说，特朗普政府中的对华强硬派对实体清单的作用仍然不满，因为某些外国供应商仍然可以向华为供货，于是从去年11月开始推动进一步加强对华为的出口限令。</p><p>美国商务部资深官员星期五上午在一场背景说明会上说，美国商务部正在与美国出口管制部门进行跨部门合作，在“设计”和“生产”两个方面封堵华为使用海外制造设施获取芯片的渠道。</p><p>这名官员说：“在设计方面，如果华为使用来源于美国的软件生产芯片，现在就需要执照。这些产品现在就要受到华为实体清单规定下的美国BIS执照规定的约束。”</p><p>在制造层面，这名官员表示，新的管制措施约束的着眼点是制造芯片所使用的技术和硬件设备。“如果这些产品是华为设计的、或者是由清单上华为的114个分支实体设计的，如果这些设计是通过使用美国控制的技术，特别是半导体设施和技术而生产，其产品就需要获得美国商务部的执照。”</p><p>美国以国家安全的名义，于2019年5月发布针对华为的“实体清单”。华为则试图壮大旗下的海思半导体走自力更生之路，但仍然指定上海的中芯国际和台湾台积电等厂商制造其设计的芯片。《纽约时报》说，中芯与台积电都使用美国的设备。</p><p>美国国务卿蓬佩奥星期五发表声明说，商务部此次为了阻挡华为绕过美国法律、扩大外国直接产品规则，进一步保护了美国安全与5G网络的安全性。</p><p>蓬佩奥在声明中说：“华为是一个不值得信任的供应商，是中国共产党的工具，听命于中共的指令。美国司法部已经起诉华为偷窃美国技术、帮助伊朗躲避制裁，美国商务部在2019年将华为列入实体清单。一年多来，美国国务院一直在与世界各地的盟友和合作伙伴分享我们对华为和其他不值得信任的供应商的了解。”</p><p>在美中两国政治与经济对弈中陷入两难的台积电日前宣布将在美国亚利桑那州投资120亿美元兴建晶圆厂，生产高端的5纳米芯片。</p><p>中国光大证券去年的一份报告显示，大多数芯片制造商依赖美国设备，这些公司包括科磊（KLA Corp）、泛林集团（Lam Research）以及应用材料公司（Applied Materials）。</p><p>美国德汇律师事务所（Dorsey & Whitney）在提供给美国之音的一份出自该公司高级合伙人邓锦明（Nelson Dong）的分析中说：美国商务部的“这一新举措将影响到世界各地、特别是中国、台湾、韩国和日本的集成电路设计者和生产商。”</p><p>他说：“由于全球半导体行业往往非常依赖源自美国的半导体设计软件和美国的半导体制造设备，这一修订后的‘直接产品规则’可能会导致一些短期和长期的后果。”</p><p>新出口限令预计从5月15日开始计算的120天以后开始执行。执行细则尚未公布。</p><p>美国商务部宣布新的制裁后，中国共产党官方报纸《人民日报》旗下的《环球时报》立刻作出回应，其英文网站援引“中国政府消息人士”的话说，如果美国计划对华为实行半导体产品禁运，中国将采取“一系列反制措施”，例如将美国公司列入中国的“不可靠实体清单”，根据中国的网络安全法和反垄断法对苹果、高通和思科等公司进行调查和实施限令，和暂停购买波音飞机等。</p><p>不过，《环球时报》的报道并没有指出其消息来源的身份和姓名。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中芯国际获国家200亿注资，拟取代台积电曲线救华为</title>
      <link href="/2020/05/17/a204/"/>
      <url>/2020/05/17/a204/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>转载6park</p></blockquote><p>近日，来自中芯国际官方消息，国家集成电路基金会等多方同意分别向中芯南方注资15亿美元及7.5亿美元。消息已证实，中芯控股与国家集成电路基金等多方签订新合资合同及新增资扩股协议，中芯南方注册资本将由35亿美元增加至65亿美元，被新增注资金额折合人民币近200亿元。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/hhPIyD.png" data-fancybox="group" data-caption="hhPIyD" class="fancybox"><img alt="hhPIyD" title="hhPIyD" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/hhPIyD.png" class="lazyload"></a>联想到近几天川建国那边捅出的幺蛾子，不难看出国家有意通过注资的方式助力中国芯片产业，曲线救华为的意图也十分清晰。要知道，这两天川建国曾宣布将阻止全球芯片制造商向华为出售或运输半导体芯片，且美国商务部也正在修改一项出口新规，计划从战略上直接针对华为收购通过美国软件和技术制造的半导体产品。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/30GWcf.png" data-fancybox="group" data-caption="30GWcf" class="fancybox"><img alt="30GWcf" title="30GWcf" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/30GWcf.png" class="lazyload"></a>从美国三次延期华为“临时通用许可”的行为来看，不是对华为的宽限，而是给使用华为设备的用户的美国运营商提供空间，特别是针对美国农村地区的用户和运营商，要求加快向替代供应商过渡。而且川建国也在酝酿着修改“外国直接产品”再出口规则，意在限制台积电等重要供应商继续向华为供应半导体产品。联系到台积电计划斥资120亿美元在亚利桑那州建造芯片工厂的举动，不难看出川建国的指令正在逐步生效，华为被“卡脖子”似乎也将成为事实。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/HZ3WdL.png" data-fancybox="group" data-caption="HZ3WdL" class="fancybox"><img alt="HZ3WdL" title="HZ3WdL" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/HZ3WdL.png" class="lazyload"></a>现在华为积极自救，不但将自家电子设备零部件的国产替代率提升到41.8%，比遭受制裁前大大提升16.5%，将美国产电子设备零件比例压缩至总体的1.5%，还在新款5G机型上用自家海思半导体替代了美国大型通信芯片企业思佳讯的产品，为中国芯争了一口气。目前，拿华为Mate30 5G版为例，非国产零部件除了日本的摄像头、闪存和双工器等，以及韩国的显示器、DRAM和触摸屏外，只有机身的玻璃盖板依赖美国康宁公司。而这一零部件在手机整体32美元的总成本中仅占3美元，且随时可以被中国产品替代，这一点从华为和京东方的合作中不难看出其可能性。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Ls6EtC.png" data-fancybox="group" data-caption="Ls6EtC" class="fancybox"><img alt="Ls6EtC" title="Ls6EtC" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Ls6EtC.png" class="lazyload"></a></p><p>另外，华为把14纳米芯片转到中芯国际研发生产，也有计划将7纳米芯片交给中芯作进一步研发。尽管中芯国际在短时间内很难替代台积电，至少在1-2年内难以实现超越，但国家资本的注入势必会加快中芯国际的研发速度，更加先进工艺的半导体产品将在中芯国际的操作台喷涌而出。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国人的“芯病”何去何从</title>
      <link href="/2020/05/16/f2b1/"/>
      <url>/2020/05/16/f2b1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="中国芯片之殇"><a href="#中国芯片之殇" class="headerlink" title="中国芯片之殇"></a>中国芯片之殇</h1><p>2019年5月18日，美国将华为列入了“实体名单”。</p><p>所谓“实体名单”是美国为了维护其国家利益，作为出口管制的重要手段。进入到这个名单的公司，在没有得到美国政府许可的情况下，美国公司不能和名单上的企业合作。</p><p>简单说实体名单就是一份黑名单，企业一旦上榜就被剥夺了和美国进行贸易的机会，华为开始被美国政府掐住了喉咙。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y8Rzld.png" data-fancybox="group" data-caption="Y8Rzld" class="fancybox"><img alt="Y8Rzld" title="Y8Rzld" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y8Rzld.png" class="lazyload"></a></p><p>尽管当时限制了美国公司和华为的合作，但华为还有一线生机。华为手里有自己的芯片设计公司：“一夜转正”的华为海思。</p><p>虽然华为没有芯片生产能力，所幸的是世界上最大的芯片代工企业是台湾的台积电，并不是一家美国公司。华为还能够通过台积电代加工得到自己的高性能芯片。</p><p>一年后的现在，美国对华为要落井下石。</p><p>2020年5月15日，美国商务部发布一则公告：一年前只是禁止美国公司和华为开展业务，现在美国限制了全世界所有的半导体工厂，这些工厂不管是哪个国家的，只要有使用到美国软件和设备，在为华为生产芯片之前，就必须获得美国政府的许可。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/GC5BGD.png" data-fancybox="group" data-caption="GC5BGD" class="fancybox"><img alt="GC5BGD" title="GC5BGD" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/GC5BGD.png" class="lazyload"></a></p><p>▲美国商务部：华为破坏了实体名单限制华为使用美国科技生产产品</p><p>最狠的是这条禁令是无差别全面打击，不只是华为，所有需要美国软件、技术、设备的芯片制造商，不管是中国、日本、还是韩国企业，都逃不开美国的技术和设备。只要是为华为造芯片，就要受美国管制。</p><p>此令一出，中方表示，如果美国针对华为的方案实施，那么将予以强力反击，将相关企业列入“不可靠实体清单”，依照相关法律对高通、思科、苹果等美国企业展开限制与调查，甚至暂停采购波音客机。</p><p>一场科技封锁战的铁幕在大国之间落下已然是事实。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwZrvibV8nkic8y2nWZxLoERDuQsRtIrMFKx9moYox1IGrkGmXCsBE0ltQ/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwZrvibV8nkic8y2nWZxLoERDuQsRtIrMFKx9moYox1IGrkGmXCsBE0ltQ/640?wx_fmt=gif" class="lazyload"></a></p><h1 id="01-信息时代“芯”是有多么重要"><a href="#01-信息时代“芯”是有多么重要" class="headerlink" title="01 信息时代“芯”是有多么重要"></a>01 信息时代“芯”是有多么重要</h1><p>我们常说如今社会步入了信息化时代，一个手机基本就能搞定每个人每天的所有诉求，玩“吃鸡”逛淘宝，外卖小哥顺着定位就能给你送餐到家，一个智能手机已经是时代标配。</p><p>从小小的手机，到大型工业设备设施的运行，乃至网络，电力，国防，没有一个环节离不开硬件的支撑。而硬件之核心，乃是芯片。</p><p>抛开芯片谈信息技术发展，就如同跟陌生女孩聊结婚，都是耍无赖行为。</p><p>而信息时代中这些社会运转的基础就是芯片，中国人需要的芯片有多依赖进口？看这样一组数据。</p><p>中国高端芯片完全不能自给自足，80%依赖进口。去年中国进口芯片花掉3000多亿美元，是进口原油价格的两倍，约等于中国军费的两倍，相当于造80艘航空母舰的开销。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/tIjojk.png" data-fancybox="group" data-caption="tIjojk" class="fancybox"><img alt="tIjojk" title="tIjojk" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/tIjojk.png" class="lazyload"></a></p><p>据《G20国家创新竞争力黄皮书》显示：中国在军用航天级芯片上基本能实现自给自足，中低档的芯片甚至满足自己的需要外还能大量出口，但是在高端芯片上进口依赖度飙升，80%靠进口。</p><p>电子消费级市场也很难见到中国自己的高端芯片。每个人离不开的电脑手机，其中高端芯片基本是国外产品的天下，有时候事实体现在钱上更有说服力。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/EcHCwq.png" data-fancybox="group" data-caption="EcHCwq" class="fancybox"><img alt="EcHCwq" title="EcHCwq" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/EcHCwq.png" class="lazyload"></a></p><p>▲2018年进口额达到3120.58亿美元图片来自：中商产业研究院</p><p>从2012年开始，中国集成电路进口额连续突破2000亿美元，2000亿美元什么概念？按照2017年汇率来算，2000亿美元折合人民币是13200亿人民币。</p><p>2017年中国军费开支是10433亿人民币，如果按照网上所言，山东舰造价250亿人民币左右（不包含舰载机等费用），2018年中国进口芯片的开支也就比军费多出来10艘辽宁舰吧！</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/JcJa1w.png" data-fancybox="group" data-caption="JcJa1w" class="fancybox"><img alt="JcJa1w" title="JcJa1w" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/JcJa1w.png" class="lazyload"></a></p><p>▲2019原油进口额1662亿美元图片来自：中商产业研究院</p><p>2019年中国集成电路进口额更是达到了3055亿美元（21048亿人民币），占中国整年总进口额的14.7%，同年中国原油进口额是1662亿美元约为芯片进口额的一半。</p><p>10年前美国杂志《连线》一篇文章开篇中写到：“试想，一个国家需要完全依靠从一个与之有着战事冲突或者经济往来不稳定的国家进口某种珍贵商品，而且没有这种商品，其整个社会将被迫停顿。假如这个国家是中国，与之有冲突的国家是美国，而该商品就是芯片。”</p><p>中国、美国、贸易冲突、芯片，《连线》杂志一语成谶。中方的反制措施当然很有必要，但是依然无法掩饰中国在芯片领域的落后。</p><p>指甲盖大小的芯片，已然成为这场大国较量中的主角。</p><h1 id="02-芯片怎么造？"><a href="#02-芯片怎么造？" class="headerlink" title="02 芯片怎么造？"></a>02 芯片怎么造？</h1><p>芯片是世界上最硬核的高科技产业，以纳米来计量的制造过程极为复杂，产业链涉及到50多个行业、数千个环节，世界上没有多少公司能够包办芯片生产的所有环节，芯片产业形成一条齐整的产业链。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/FHpv6U.png" data-fancybox="group" data-caption="FHpv6U" class="fancybox"><img alt="FHpv6U" title="FHpv6U" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/FHpv6U.png" class="lazyload"></a></p><p>总的来说有芯片设计、芯片制造、芯片封测、芯片材料、芯片设备这5大类，整个产业链条里，中国占据的份额极少。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/UE39V3.png" data-fancybox="group" data-caption="UE39V3" class="fancybox"><img alt="UE39V3" title="UE39V3" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/UE39V3.png" class="lazyload"></a><br>▲芯片设计公司华为海思排名第5</p><p> 为了方便大家更直观的了解芯片，不妨通过一个有意思的比方来讲。</p><p>我们如果把做芯片看作厨师做菜，那么做好一个菜，首先要有好的食材，然后你这个厨子做菜的炊具要好，最后当然是你这个厨子肚子里面有没有好的菜谱。</p><p>做芯片粗看一下也可以理解成这么几块，首先要有好的原材料，还要有好的生产制作工具，而且还要有优秀的芯片设计，这三个能力OK，好的芯片才能做出来。</p><p>先说“食材”部分</p><p>芯片听起来挺高级，制造原料实际是蓝星最不值钱的沙子。芯片主要的原材料是硅，硅元素在地球上的储量仅次于氧元素。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/QRGe2J.png" data-fancybox="group" data-caption="QRGe2J" class="fancybox"><img alt="QRGe2J" title="QRGe2J" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/QRGe2J.png" class="lazyload"></a></p><p>▲芯片的原材料就是长这样</p><p>如果你家门口有一堆沙，那么恭喜你已经有了制造高性能芯片的原材料，可也仅仅是原材料。</p><p>沙子很多，但是难得是要把沙子里的硅提纯出来，如果要生产高性能芯片，一般的硅纯度完全不够，需要纯度达到99.999999999%的电子级多晶硅，这么9不是我瞎打的，一共9个9。</p><p>也就是说在100万个硅原子中最多只允许存在1个杂质原子，这个尺度放大一些，也就是说5000吨的电子级多晶硅杂质含量仅仅有1枚1元硬币那么多。 商场里的金饰为了标榜自己的高纯度，经常会有千足金的标签，也就是说金的纯度是99.999%，和千足金类比，那99.999999999%纯度的电子级多晶硅可以改个名字叫亿足硅。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwfmGtZxFujZoHib4ljwHuAGXiaarGSaRwwYJN2WjHdrbJBIsibb6xtvwMQ/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwfmGtZxFujZoHib4ljwHuAGXiaarGSaRwwYJN2WjHdrbJBIsibb6xtvwMQ/640?wx_fmt=gif" class="lazyload"></a></p><p>▲沙子提纯单晶硅棒</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9Hwic69cHCQiblzTDFqwu25GQw9e7IGGGMOeUJrxBiaLR9IGPF5WHI2Akq2Q/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9Hwic69cHCQiblzTDFqwu25GQw9e7IGGGMOeUJrxBiaLR9IGPF5WHI2Akq2Q/640?wx_fmt=gif" class="lazyload"></a></p><p>▲硅棒切割成晶圆 得到电子级多晶硅锭以后，将圆柱形的硅锭横向切割成圆形的单个硅片，叫做晶圆，切割好的晶圆表面几乎是完美无瑕的。</p><p>造芯片最基础的电子级多晶硅就是中国还没有迈过去的一个坎。</p><p>大厨想要做好菜，缺了好食材不行。在芯片材料方面日本一家独大。拿硅晶圆全球份额占比来说，日本公司占去50%，中国台湾地区17%，德国15%，韩国9%，这5个地区占去了全球94%的份额，在这里中国大陆没有名字。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwwklCw956CQicqO7ALjnp5sU5ialia1THZl7Z2Qr006luXxTNQMF650Jfw/640?wx_fmt=jpeg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwwklCw956CQicqO7ALjnp5sU5ialia1THZl7Z2Qr006luXxTNQMF650Jfw/640?wx_fmt=jpeg" class="lazyload"></a></p><p>▲世界芯片设备份额占比来源：招商证券</p><p>“厨师的工具与菜谱”</p><p>有了好的原材料“硅晶圆”之后就轮到大厨用菜刀按照菜谱处理了。“菜刀”就是生产芯片的设备，菜谱就是芯片的设计。</p><p>芯片设计通俗来说就是“写菜谱”的。以2018年统计数据为例，世界芯片设计产业中美国的博通、高通、英伟达霸榜前3名，第4名是中国台湾地区的联发科，第5名是中国大陆的华为海思。</p><p>芯片核心外表看起来很光滑，可芯片刻蚀不只是一层，要经过多次重复刻蚀，形成一个分层的立体结构，打个比方，相当于在一平方厘米的土地上盖高层写字楼一样，难度可想而知。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Mgprdp.png" data-fancybox="group" data-caption="Mgprdp" class="fancybox"><img alt="Mgprdp" title="Mgprdp" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Mgprdp.png" class="lazyload"></a></p><p>▲看似光滑的芯片表面，其实有多层复杂电路设计</p><p>美国在全球芯片设计领域市场占有率是68%，中国台湾地区市场占有率是16%位居第2，中国大陆则以13%的市场占有率位居第3。中国占比13%嫌低？在芯片产业链中，相比其他阶段，中国在芯片设计中表现是最好的。</p><p>华为海思就是这么一个“写菜谱”的。去年华为发布最新的手机处理芯片麒麟990采用7纳米工艺拥有103亿晶体管，是世界上首个突破百亿晶体管的手机处理器，总体性能可以和高通和苹果同类产品比肩。</p><p>菜谱写完以后完成后交给大厨去做菜，大厨就是芯片制造企业。世界上三大芯片制造巨头分别是中国台湾地区的台积电、韩国的三星和美国的英特尔。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEHb16CLmlFAIBCkfyRdpzR4ylg1IZaL2wiacpplJIUMBU4zDzbESMrNw/640?wx_fmt=jpeg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEHb16CLmlFAIBCkfyRdpzR4ylg1IZaL2wiacpplJIUMBU4zDzbESMrNw/640?wx_fmt=jpeg" class="lazyload"></a></p><p>▲全球前五的芯片制造企业</p><p>以排名第一的台湾台积电为例，台积电主营业务就是芯片代工，台积电现在以自己的7nm芯片生产线称霸江湖。台积电仅凭芯片代工就达到了2000亿美元市值，和中国中石油差距只有不到10%。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/GcBhFr.png" data-fancybox="group" data-caption="GcBhFr" class="fancybox"><img alt="GcBhFr" title="GcBhFr" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/GcBhFr.png" class="lazyload"></a></p><p>▲台积电的标志就是一个晶圆</p><p>中国芯片制造方面顶尖的中芯国际只有28纳米的生产工艺，14纳米工艺才刚刚开始量产，中国芯片制造只能占到世界7.3%的份额。由于中国大陆没有能力生产这样的高规格芯片，华为的麒麟990只能交给中国台湾地区的台积电代工生产。</p><p>那么大厨有没有一把好刀呢？芯片制造设备公司就是生产“刀”的。可惜全球芯片设备制造产业集中在日本、荷兰、美国、韩国四个国家。而这把刀就是”光刻机“。</p><p>就是下图这个究极神器——光刻机，这个神器也是中国求之不得的。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/nhjH33.png" data-fancybox="group" data-caption="nhjH33" class="fancybox"><img alt="nhjH33" title="nhjH33" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/nhjH33.png" class="lazyload"></a></p><p>▲人类工业皇冠上的明珠——光刻机</p><p>荷兰的ASML基本垄断了高端光刻机领域，特别是最新的EUV极紫外光光刻机有生产7纳米制成的能力，ASML全球市场份额100%。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwicNES06yDauIwzXxEPguOelUf90Cm9ousoXOC0qSdicuZknmVFqAHCdw/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwicNES06yDauIwzXxEPguOelUf90Cm9ousoXOC0qSdicuZknmVFqAHCdw/640?wx_fmt=gif" class="lazyload"></a></p><p>光刻机可以简单理解为：用“紫外线”作刀，对晶圆进行雕刻，让芯片上的电路变成人们想要的图案。四个字形容：“硅上雕花”</p><p>人类芯片的发展史其实就是芯片这几平方厘米的面积上锱铢必较的过程。1978年英特尔设计的8086处理器的刻蚀尺寸是3微米，2000年英特尔发布的奔腾4处理器刻蚀尺寸达到了0.09微米（90纳米）。</p><p>请大家记住90纳米这个数字，这是英特尔2000年的技术。之后2015年初发布的第五代酷睿处理器，刻蚀尺寸为14纳米。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/cSmQL1.png" data-fancybox="group" data-caption="cSmQL1" class="fancybox"><img alt="cSmQL1" title="cSmQL1" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/cSmQL1.png" class="lazyload"></a></p><p>▲英特尔90纳米的奔腾4处理器</p><p>2019年AMD发布了7nm的三代锐龙处理器，40年间人类处理器刻蚀尺寸从3微米（3000纳米）到7纳米，翻了400多倍。</p><p>在知乎上有这样一个问题“搞光刻机难还是搞氢弹难？” <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Cpjp8y.png" data-fancybox="group" data-caption="Cpjp8y" class="fancybox"><img alt="Cpjp8y" title="Cpjp8y" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Cpjp8y.png" class="lazyload"></a></p><p>光刻机被誉为”人类工业皇冠上的明珠“不是没有道理的。有人这样形容光刻机：这是一种集合了数学、光学、流体力学、高分子物理与化学、表面物理与化学、精密仪器、机械、自动化、软件、图像识别领域顶尖技术的产物。</p><p>先进的光刻机上有10w个零件，（一辆汽车大概是5000个零件）。</p><p>难道中国人就造不出自己的光刻机了吗？也不是，我们能造落后别人好几代的国产光刻机，别小看这个能力，关键时候，这个能力至少能保证国家的国防等重大领域不被卡脖子。</p><p>国内上海微电子芯片公司的光刻机水平最高，刚刚突破90纳米工艺，90纳米是英特尔2000年奔腾4处理器的水平，距离7纳米顶尖水平还有差好几个珠穆朗玛峰。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/OVNR2i.png" data-fancybox="group" data-caption="OVNR2i" class="fancybox"><img alt="OVNR2i" title="OVNR2i" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/OVNR2i.png" class="lazyload"></a></p><p>▲上海微电子芯片公司SSA600/20最高能达才达到90纳米分辨率</p><p>很多朋友可能会有疑问，既然造不出来，买不行么？咱国家现在也不差钱呀？</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEMFZC3Rm5ydWjgNQJWnootD0TBydzSa8zx2b6luf9iayOA0gzI3tKR9g/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEMFZC3Rm5ydWjgNQJWnootD0TBydzSa8zx2b6luf9iayOA0gzI3tKR9g/640?wx_fmt=gif" class="lazyload"></a></p><p>不好意思，有时候真不是有钱就能为所欲为的。想买？不给！</p><p>1996年，美国和他的小伙伴们签署了一个叫做《瓦森纳安排》的协定，没错这个协定就叫做“安排”，目的就是把那些不听美国话的国家给他安排的明明白白。</p><p>瓦森纳安排签署的国家有42个，美国、韩国、日本、德国、荷兰等国家都在列，囊括了几乎所有西方发达国家，中国、伊朗、利比亚等国被纳入受限制国家。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5eOs0L.png" data-fancybox="group" data-caption="5eOs0L" class="fancybox"><img alt="5eOs0L" title="5eOs0L" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5eOs0L.png" class="lazyload"></a></p><p>▲瓦森纳安排缔约国家世界上主要国家都在这里了</p><p>瓦森纳安排包含两份控制清单：一份是军民两用商品和技术清单，涵盖了先进材料、材料处理、电子器件、计算机、电信与信息安全、传感与激光、导航与航空电子仪器、船舶与海事设备、推进系统等9大类；另一份是军品清单，涵盖了各类武器弹药、设备及作战平台等共22类，清单长达234页。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/NcpXjN.png" data-fancybox="group" data-caption="NcpXjN" class="fancybox"><img alt="NcpXjN" title="NcpXjN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/NcpXjN.png" class="lazyload"></a></p><p>▲绿色为签署瓦森纳安排的国家</p><p>签约国家严禁对中国这些被安排国家清单中的高科技和武器。瓦森纳安排虽然允许成员国在自愿的基础上对各自的技术出口实施控制，但实际上成员国在重要的技术出口决策上受到美国的影响。光刻机之类的究极神器，中国想都不要想。</p><p>最狠的是瓦森纳安排还不断在调整，针对中国发展情况围追堵截。2020年初，瓦森纳安排管制品类扩大，新增了“可转为军用的半导体制造材料及网络软件”。实在是劳美国费心了，在遏制中国半导体产业的路上兢兢业业。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/dbtB4H.png" data-fancybox="group" data-caption="dbtB4H" class="fancybox"><img alt="dbtB4H" title="dbtB4H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/dbtB4H.png" class="lazyload"></a></p><p>如前文所说，荷兰的ASML公司在光刻机领域是当之无愧的老大，最新的极紫外光EUV光刻机能够生产7纳米的CPU，世界上只此一家别无分号，市场份额100%。现在世界主流处理器都开始步入7纳米行列，想生产7纳米芯片就必须有ASML的EUV光刻机。</p><p>既然完全垄断，那价格也是ASML自己说了算，价格不贵1亿美元一台。</p><p>1亿美元对中国来说不算啥，北京二环内几套房而已。一年3000亿美元芯片进口费用，拿几亿出来买EUV也不算啥。</p><p>有钱想买，可惜却买不到。</p><p>2018年中国最大的芯片制造企业向荷兰的ASML花了1.2亿美金订购了一台EUV光刻机，两年过去了，这台光刻机还没拿到荷兰的出口许可。而中国台湾的台积电去年从ASML拿到了十几台EUV光刻机。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/4SUFpJ.png" data-fancybox="group" data-caption="4SUFpJ" class="fancybox"><img alt="4SUFpJ" title="4SUFpJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/4SUFpJ.png" class="lazyload"></a></p><p>▲19年ASML的EUV光刻机一半交付台湾地区的台积电</p><p>就连最基础的电子级多晶硅中国有太多课要补。中国的工业硅、多晶硅产量世界第一，可制造芯片用的高纯度电子级多晶硅完全依赖进口。 回到上面那个问题：芯片难造还是氢弹难造？造好用的芯片难。</p><p>氢弹不是商品，不需要考虑市场，不需要考虑高速换代，不需要考虑企业生存，不需要考虑性价比，氢弹要考虑的是按下按钮的那一刻，炸响。</p><p>最终芯片经过一系列复杂的程序，最后的成品长下面这个样子：</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/cziYlN.png" data-fancybox="group" data-caption="cziYlN" class="fancybox"><img alt="cziYlN" title="cziYlN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/cziYlN.png" class="lazyload"></a></p><p>▲中间黑色部分就是芯片的核心</p><p>所以从上面的介绍，大家应该清楚了我们目前的处境，一个懂一些菜谱的厨师，没有好的食材，没有好的炊具，想做出上等佳肴来，太难了。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEpSnCmHbR2lshOn4aZOlmnDB2IdzlhrFezbqNpMhxHRRShAUm6icNvZg/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEpSnCmHbR2lshOn4aZOlmnDB2IdzlhrFezbqNpMhxHRRShAUm6icNvZg/640?wx_fmt=gif" class="lazyload"></a></p><h1 id="03-中国对“芯”的渴望"><a href="#03-中国对“芯”的渴望" class="headerlink" title="03 中国对“芯”的渴望"></a>03 中国对“芯”的渴望</h1><p>有人说，中国为什么不早点搞自己的芯片？搞过。 现在美国对华为封锁，让很多人开始关心中国芯片的发展历程，其实20年前中国搞芯片的热情比现在还要大。 20年前我们国家提出口号，要发展自己的半导体产业。2000年左右是中国芯片发展的黄金时期，1999年北大研制了中国第一个完全自主研发的CPU架构。</p><p>这是中国人最荣耀的时刻，《人民日报》在20世纪的最后一天刊文，称这一成果是“献给新千年的礼物”。可尚在摇篮里的中国芯片毁在了一个骗子手里。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q2Dz51.png" data-fancybox="group" data-caption="Q2Dz51" class="fancybox"><img alt="Q2Dz51" title="Q2Dz51" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q2Dz51.png" class="lazyload"></a></p><p>▲人民日报：献给新千年的礼物 2003年，上海交大微电子学院的院长陈进，带领自己的团队搞出了一个芯片，叫做“汉芯一号”。有关部门对“汉芯一号”做了测试，得出结论让所有人震惊：汉芯一号已经接近了国际先进水平，一些方面甚至实现了超越。</p><p>这对当时幼小的中国半导体产业来说，就是饿极了想吃个馒头，没想到天上掉下来一大盆红烧肉。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/d84pMO.png" data-fancybox="group" data-caption="d84pMO" class="fancybox"><img alt="d84pMO" title="d84pMO" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/d84pMO.png" class="lazyload"></a></p><p>▲汉芯一号处理器</p><p>陈进被视为是汉芯一号的发明人，更是荣誉加身，授予长江学者称号，随后陈进的“汉芯二号”“汉芯三号”“汉芯四号”项目成功上马，陈进也得到了国家的数亿科研经费。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/7HP7gI.png" data-fancybox="group" data-caption="7HP7gI" class="fancybox"><img alt="7HP7gI" title="7HP7gI" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/7HP7gI.png" class="lazyload"></a></p><p>▲陈进其人</p><p>关于汉芯的荣誉到了2006年戛然而止。清华大学论坛上一个名叫“汉芯黑幕”的帖子曝光汉芯造假。</p><p>经过调查，汉芯一号根本就是一个骗局，这枚举世瞩目的芯片其实是陈进从美国摩托罗拉买的56800芯片，找几个装修师傅打磨掉摩托罗拉的字样，再印上“汉芯一号”，就变成了中国自主研发的芯片。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5gXD6H.png" data-fancybox="group" data-caption="5gXD6H" class="fancybox"><img alt="5gXD6H" title="5gXD6H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5gXD6H.png" class="lazyload"></a></p><p>▲打磨汉芯的民工日记 甚至负责打磨字样的师傅声称自己负责了汉芯的外观设计，这可是中国最有牌面的民工师傅了。</p><p>民工师傅牛皮吹爽了，可中国芯片很不爽。从这以后中国没有人再敢去搞芯片，谁知道你是不是搞得假的？</p><p>新项目上马的时候主管部门审核也变得极为谨慎，谁知道你是不是想套经费？一盆假的“红烧肉”，让中国芯片连吃“馒头”都变得谨慎了起来。 04</p><p>芯片，勒紧裤腰带也得搞</p><p> 2007年秋天，以色列出动战斗机炸毁了叙利亚的一处核设施。</p><p>出动的是F15/F16这样的非隐身战斗机，但是叙利亚严密的防空体系毫无反应。有趣的是，在以色列突袭前一天叙利亚的防空系统雷达刚好坏了，本来以为是正常的损坏，最后才发现是雷达CPU的后门引起的。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y0qwFG.png" data-fancybox="group" data-caption="Y0qwFG" class="fancybox"><img alt="Y0qwFG" title="Y0qwFG" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y0qwFG.png" class="lazyload"></a></p><p>▲叙利亚设施被摧毁</p><p>叙利亚不是最后一个。2013年伊朗核离心机几千台莫名其妙损坏，几千台离心机疯狂开转，转坏为止。最后发现也是核离心机控制系统出了问题，处理器早就被动了手脚。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/p7DtF4.png" data-fancybox="group" data-caption="p7DtF4" class="fancybox"><img alt="p7DtF4" title="p7DtF4" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/p7DtF4.png" class="lazyload"></a></p><p>现在轮到了中国。</p><p>日经中文网报道，其实在去年美国开始针对华为之后，日本人通过拆解华为手机后，发现华为最高端新机型中国产零件的使用率已经从25%左右大幅上涨到42%，与此同时美国产零部件则从11%左右降到了约1%。</p><p>今天，华为在心声社区发了一张内涵颇深的图</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/w1Jno7.png" data-fancybox="group" data-caption="w1Jno7" class="fancybox"><img alt="w1Jno7" title="w1Jno7" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/w1Jno7.png" class="lazyload"></a></p><p>让我想起一句名言，大意是“阻碍弱者前进路上的花岗岩，会成为强者脚下的垫脚石。“</p><p>想当年美国人用原子弹威胁过我们，苏联人叫嚣着要对我们实施外科手术式的核打击，尽管这样，咱们屈服了吗？没有。</p><p>我们国家当年一穷二白不都照样挺过来么，还搞出了自己的核武器，新中国成立以来就从没怕过谁威胁。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdME4PBDdADOYHJ9w0LgrIEkL6d5A04YftawAdSr4NugKUwBG2PYtthLbA/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdME4PBDdADOYHJ9w0LgrIEkL6d5A04YftawAdSr4NugKUwBG2PYtthLbA/640?wx_fmt=gif" class="lazyload"></a></p><p>▲又想威胁我？NO！去你妈的</p><p>中国人的芯片之路必然艰辛，除了义无反顾，我们别无选择。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 华为 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to modify ova file</title>
      <link href="/2020/01/10/55d2/"/>
      <url>/2020/01/10/55d2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Extract-the-ova-file"><a href="#Extract-the-ova-file" class="headerlink" title="Extract the ova file"></a>Extract the ova file</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf vmName.ova</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Modify-ovf-for-some-invalid-tag"><a href="#Modify-ovf-for-some-invalid-tag" class="headerlink" title="Modify ovf for some invalid tag"></a>Modify ovf for some invalid tag</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">elixir</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vi vmName.ovf</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Re-calculate-sha1-from-vmName-ovf-then-modify-the-hash-value-of-vmName-mf"><a href="#Re-calculate-sha1-from-vmName-ovf-then-modify-the-hash-value-of-vmName-mf" class="headerlink" title="Re-calculate sha1 from vmName.ovf, then modify the hash value of vmName.mf"></a>Re-calculate sha1 from vmName.ovf, then modify the hash value of vmName.mf</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sha1sum vmName.ovf</span><br><span class="line">$ vi vmName.mf</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Package-to-ova-which-source-files-from-vmName-ovf-vmName-disk1-vmdk-vmName-mf"><a href="#Package-to-ova-which-source-files-from-vmName-ovf-vmName-disk1-vmdk-vmName-mf" class="headerlink" title="Package to ova which source files from [vmName.ovf, vmName-disk1.vmdk, vmName.mf]"></a>Package to ova which source files from [vmName.ovf, vmName-disk1.vmdk, vmName.mf]</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf vmName-NEW.ova vmName.ovf vmName-disk1.vmdk vmName.mf</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> ova </tag>
            
            <tag> vmdk </tag>
            
            <tag> ovftool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP系统完整性保护怎么禁用？SIP系统完整性关闭方法</title>
      <link href="/2020/01/08/69ef/"/>
      <url>/2020/01/08/69ef/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>许多Mac用户反应，装了部分软件后打不开，那可能是sip系统完整性没有关闭。下面我们就来看一下如何关闭sip系统完整性。</p></blockquote><blockquote><p>系统完整性保护是 OS X El Capitan 及更高版本所采用的一项安全技术，能够帮助防止潜在恶意软件修改 Mac 上受保护的文件和文件夹。系统完整性保护可以限制 root 用户帐户，以及 root 用户能够在 Mac 操作系统的受保护部分完成的操作。</p></blockquote><p>上面是官方的介绍，说的有点吓人。<code>我们换一个说法，SIP类似windows的防火墙，安卓手机Root</code>，这应该可以解决很多的人困惑。</p><p>苹果应用商店的软件都是用沙盒运行的，无法访问系统文件，所以大部分软件都是阉割版的。很多优秀软件没有在Apple Store上架就是因为需要SIP系统权限，苹果不过审核，一些软件采取双版本，分为官方版和App Store版，App Store 是精简单版，全功能版需要单独下载，都是这个原因。比如腾讯柠檬之类的系统应用。</p><ol><li>macOS默认只允许运行通过苹果应用商店下载的软件。</li><li>macOS如果想安装第三方应用需要到<code>系统偏好设置 》 安全性与隐私 》 通用</code>中开启允许<code>App Store 和被认可的开发者</code>选项</li><li>macOS如果想安装第三方未签名的应用需要在终端中执行命令行 <code>sudo spctl --master-disable</code> 开启<code>任何来源</code>选项，<code>系统偏好设置 》 安全性与隐私 》 通用</code> 中默认是没有这个选项的。</li><li>macOS如果想安装一些反编译破解的应用需要关闭SIP。</li></ol><p>通过上面大家也应该能看出来，苹果为了大家的安全煞费苦心，但是事情仅仅真的是只是大家看到的这样的吗？</p><p>你想要安装任意来源的软件，需要打开终端输入命令才可以，你要关闭SIP需要关机才可以操作（在macOS早期系统是不需要关机的），为什么越来越麻烦呢？</p><p>上架到苹果应用商店，每卖一次，苹果抽成1/3。比如你软件卖100元，苹果抽33.33元。</p><p>所谓的认可的开发者就是去苹果买开发者账号，然后用开发者账号对应用进行签名。购买苹果的开发者账号，个人99美元/年，约合人民币688元/年。企业299美元/年，约合人民币2000元/年。</p><p>买完对应用签名一下就不是恶意软件了，你说搞笑不搞笑？</p><p>不搞得麻烦一点，怎么让小白害怕，不搞得麻烦一点，苹果商店怎么赚钱？真是万恶的资本主义！！！</p><hr><p>废话不多说了，切入正题吧。</p><p><code>目前最新的10.15.x系统使用破解软件基本上都需要关闭SIP才可以打开，就算是正版软件也有大量需要关闭SIP的，是需要永久关闭！</code>，不要再问类似 [Sip关了还能再打开吗] 这样的问题了。</p><h5 id="看了上面的说明，还是不放心开放系统权限，那你有下面的选择，"><a href="#看了上面的说明，还是不放心开放系统权限，那你有下面的选择，" class="headerlink" title="看了上面的说明，还是不放心开放系统权限，那你有下面的选择，"></a>看了上面的说明，还是不放心开放系统权限，那你有下面的选择，</h5><ul><li>我不绝不关闭SIP，我不要用这个软件了！</li></ul><h2 id="在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护"><a href="#在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护" class="headerlink" title="在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护?"></a>在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护?</h2><p>打开终端输入以下命令并回车</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil status</span><br></pre></td></tr></tbody></table></figure></div><p>你会看到以下信息中的一个，指示SIP状态</p><p>已打开:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">erlang</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight erlang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System Integrity Protection status: enabled.</span><br></pre></td></tr></tbody></table></figure></div><p>已关闭:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">fortran</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System Integrity Protection <span class="keyword">status</span>: disabled</span><br></pre></td></tr></tbody></table></figure></div><p>![image-20200108180318851](/Users/dhrsong/Library/Application Support/typora-user-images/image-20200108180318851.png)</p><h2 id="Mac上-sip系统完整性关闭方法具体操作步骤如下："><a href="#Mac上-sip系统完整性关闭方法具体操作步骤如下：" class="headerlink" title="Mac上 sip系统完整性关闭方法具体操作步骤如下："></a>Mac上 sip系统完整性关闭方法具体操作步骤如下：</h2><ol><li>关机，然后重新启动你的Mac电脑，在开机时一直按住Command+R迸入Recovery模式。</li><li>进入Recovery模式后打开终端，如图：</li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NsiF6f.png" data-fancybox="group" data-caption="NsiF6f" class="fancybox"><img alt="NsiF6f" title="NsiF6f" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NsiF6f.png" class="lazyload"></a></p><ol><li>在终端上输入命令 csrutil disable然后回车。</li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/JEsowh.png" data-fancybox="group" data-caption="JEsowh" class="fancybox"><img alt="JEsowh" title="JEsowh" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/JEsowh.png" class="lazyload"></a></p><ol><li>点击左上角苹果图标，再点击重新启动</li></ol></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> SIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Spring全家桶7大知识点</title>
      <link href="/2019/12/30/9b0a/"/>
      <url>/2019/12/30/9b0a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Spring框架自诞生以来一直备受开发者青睐，有人亲切的称之为：Spring 全家桶。它包括SpringMVC、SpringBoot、Spring Cloud、Spring Cloud Dataflow等解决方案。<br>很多研发人员把spring看作心目中最好的java项目，没有之一。<br>所以这是重点也是难点，工作中必须会，面试时肯定考。</p><p><strong>那么，今天花费10分钟，梳理Spring框架相关知识。</strong></p><h1 id="Spring知识点-汇总"><a href="#Spring知识点-汇总" class="headerlink" title="Spring知识点-汇总"></a>Spring知识点-汇总</h1><p>spring系列包含非常多的项目，可以满足java开发中的方方面面。先来看常用框架的知识点汇总，如图：<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/vaNdQc.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/vaNdQc.jpg" class="lazyload"></a></p><h1 id="一、5个常用的spring框架"><a href="#一、5个常用的spring框架" class="headerlink" title="一、5个常用的spring框架"></a><strong>一、5个常用的spring框架</strong></h1><h2 id="spring-framework"><a href="#spring-framework" class="headerlink" title="spring framework"></a>spring framework</h2><p>也就是我们经常说的spring框架，包括了ioc依赖注入，Context上下文、bean管理、springmvc等众多功能模块，其它spring项目比如spring boot也会依赖spring框架。</p><h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p>它的目标是简化Spring应用和服务的创建、开发与部署，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用的微服务功能，可以和spring cloud联合部署。<br>Spring Boot的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p><h2 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h2><p>是一个数据访问及操作的工具集，封装了多种数据源的操作能力，包括：jdbc、Redis、MongoDB等。</p><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。Spring Cloud基于Spring Boot，简化了分布式系统的开发，集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。比如sleuth提供了全链路追踪能力，Netflix套件提供了hystrix熔断器、zuul网关等众多的治理组件。config组件提供了动态配置能力，bus组件支持使用RabbitMQ、kafka、Activemq等消息队列，实现分布式服务之间的事件通信。</p><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>主要用于快速构建安全的应用程序和服务，在Spring Boot和Spring Security OAuth2的基础上，可以快速实现常见安全模型，如单点登录，令牌中继和令牌交换。你可以了解一下oauth2授权机制和jwt认证方式。oauth2是一种授权机制，规定了完备的授权、认证流程。JWT全称是JSON Web Token，是一种把认证信息包含在token中的认证实现，oauth2授权机制中就可以应用jwt来作为认证的具体实现方法。</p><h1 id="二、Struts的具体作用"><a href="#二、Struts的具体作用" class="headerlink" title="二、Struts的具体作用"></a>二、Struts的具体作用</h1><p>struts是曾经非常火爆的web组合ssh中的控制层。我们知道web服务一般都采用MVC分层模型构建，就是model层负责内部数据模型，controller负责请求的分发控制，view层负责返回给用户展示的视图。struts实现的就是其中控制层的角色。<br>Struts采用Filter实现，针对类进行拦截，每次请求就会创建一个Action。使用struts的SSH组合已经逐渐被使用springMVC的SSM组合代替，也就是Spring-MVC+Spring+MyBatis的组合，一方面原因是由于struts对几次安全漏洞的处理，让大家对struts的信心受到影响；另一方面，springmvc更加的灵活，不需要额外配置，不存在和spring整合等问题，使用更加方便，所以建议以SSM框架的学习为主。</p><h1 id="三、常用的ORM框架"><a href="#三、常用的ORM框架" class="headerlink" title="三、常用的ORM框架"></a>三、常用的ORM框架</h1><p>ORM就是对象关系匹配，是为了解决面向对象与关系数据库存在的互不匹配的问题。简单来说，就是把关系数据库中的数据转换成面向对象程序中的对象。<br>常用的ORM框架有Hibernate和MyBatis，也就是ssh组合和ssm组合中的h与m。<br><strong>它们的特点和区别如下：</strong><br>Hibernate对数据库结构提供了完整的封装，实现了POJO对象与数据库表之间的映射，能够自动生成并执行SQL语句。只要定义了POJO 到数据库表的映射关系，就可以通过Hibernate提供的方法完成数据库操作。Hibernate符合JPA规范，就是Java持久层API。<br>mybatis通过映射配置文件，将SQL所需的参数和返回的结果字段映射到指定对象，mybatis不会自动生成sql，需要自己定义sql语句，不过更方便对sql语句进行优化。<br>总结起来：</p><ol><li>hibernate配置要比mybatis复杂的多，学习成本也比mybatis高。mybatis，简单、高效、灵活，但是需要自己维护sql；</li><li>hibernate功能强大、全自动、适配不同数据库，但是非常复杂，灵活性稍差。</li></ol><h1 id="四、Netty简介"><a href="#四、Netty简介" class="headerlink" title="四、Netty简介"></a>四、Netty简介</h1><p>Netty是一个高性能的异步事件驱动的网络通信框架，Netty对JDK原生NIO进行封装，简化了网络服务的开发。下文会详细讲解<br>另外，同类型的框架还有mina、grizzly，不过目前使用的相对较少，一般不会在面试中出现，可以作为兴趣简单了解。</p><h1 id="五、RPC服务"><a href="#五、RPC服务" class="headerlink" title="五、RPC服务"></a>五、RPC服务</h1><p>Motan、Dubbo、gRPC都是比较常用的高性能rpc框架，可以提供完善的服务治理能力，java版本的通信层都是基于前面提到的Netty实现。它们的特点稍后介绍。</p><h1 id="六、其他常用框架"><a href="#六、其他常用框架" class="headerlink" title="六、其他常用框架"></a>六、其他常用框架</h1><p>jersy和restEasy都是可以快速开发restful服务的框架。<br>和springmvc相比，这两个框架都是基于jax-rs标准，而springmvcs基于servlet，使用自己构建的API，是两个不同的标准。<br>shiro框架是一个与spring security类似的开源的权限管理框架，用于访问授权、认证、加密及会话管理。能够支持单机与分布式session管理。<br>相比security，shiro更加简单易用。</p><p><strong>本篇文章将重点阐述Spring相关知识点，其他框架请期待下一篇</strong></p><h1 id="Spring知识点-详解"><a href="#Spring知识点-详解" class="headerlink" title="Spring知识点-详解"></a>Spring知识点-详解</h1><h2 id="一、spring基本概念"><a href="#一、spring基本概念" class="headerlink" title="一、spring基本概念"></a>一、spring基本概念</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PsImmN.jpg" data-fancybox="group" data-caption="PsImmN" class="fancybox"><img alt="PsImmN" title="PsImmN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PsImmN.jpg" class="lazyload"></a><br>Sping中的基本概念<br>本文涉及的流程与实现默认都是基于最新的5.x版本。<br>spring中的几个重要概念如下：</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC，就是控制反转，如最左边，拿公司招聘岗位来举例：<br>假设一个公司有产品、研发、测试等岗位。如果是公司根据岗位要求，逐个安排人选，如图中向下的箭头，这是正向流程。如果反过来，不用公司来安排候选人，而是由第三方猎头来匹配岗位和候选人，然后进行推荐，如图中向上的箭头，这就是控制反转。<br>在spring中，对象的属性是由对象自己创建的，就是正向流程；如果属性不是对象创建，而是由spring来自动进行装配，就是控制反转。这里的DI也就是依赖注入，就是实现控制反转的方式。正向流程导致了对象于对象之间的高耦合，IOC可以解决对象耦合的问题，有利于功能的复用，能够使程序的结构变得非常灵活。</p><h3 id="context上下文和bean"><a href="#context上下文和bean" class="headerlink" title="context上下文和bean"></a>context上下文和bean</h3><p>spring进行IOC实现时使用的有两个概念：context上下文和bean。<br>如中间图所示，所有被spring管理的、由spring创建的、用于依赖注入的对象，就叫做一个bean。Spring创建并完成依赖注入后，所有bean统一放在一个叫做context的上下文中进行管理。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP就是面向切面编程。如右面的图，一般程序执行流程是从controller层调用service层、然后service层调用DAO层访问数据，最后在逐层返回结果。<br>这个是图中向下箭头所示的按程序执行顺序的纵向处理。但是，一个系统中会有多个不同的服务，例如用户服务、商品信息服务等等，每个服务的controller层都需要验证参数，都需要处理异常，如果按照图中红色的部分，对不同服务的纵向处理流程进行横切，在每个切面上完成通用的功能，例如身份认证、验证参数、处理异常等等、这样就不用在每个服务中都写相同的逻辑了，这就是AOP思想解决的问题。<br>AOP以功能进行划分，对服务顺序执行流程中的不同位置进行横切，完成各服务共同需要实现的功能。</p><h2 id="二、spring框架"><a href="#二、spring框架" class="headerlink" title="二、spring框架"></a>二、spring框架</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/GCCqBa.jpg" data-fancybox="group" data-caption="GCCqBa" class="fancybox"><img alt="GCCqBa" title="GCCqBa" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/GCCqBa.jpg" class="lazyload"></a><br>Spring框架组件<br>上图列出了spring框架主要包含的组件。这张图来自spring4.x的文档。目前最新的5.x版本中右面的portlet组件已经被废弃掉，同时增加了用于异步响应式处理的WebFlux组件。<br>并不需要对所有的组件都详细了解，只需重点了解最常用的几个组件实现，以及知道每个组件用来实现哪一类功能。<br>图中红框是比较重要的组件，core组件是spring所有组件的核心；bean组件和context组件我刚才提到了，是实现IOC和依赖注入的基础；AOP组件用来实现面向切面编程；web组件包括springmvc是web服务的控制层实现。</p><h2 id="三、spring中机制和实现"><a href="#三、spring中机制和实现" class="headerlink" title="三、spring中机制和实现"></a>三、spring中机制和实现</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/cMVJi5.jpg" data-fancybox="group" data-caption="cMVJi5" class="fancybox"><img alt="cMVJi5" title="cMVJi5" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/cMVJi5.jpg" class="lazyload"></a></p><h3 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h3><p>AOP的实现是通过代理模式，在调用对象的某个方法时，执行插入的切面逻辑。实现的方式有动态代理也叫运行时增强，比如jdk代理、CGLIB；静态代理是在编译时进行织入或类加载时进行织入，比如AspectJ。<br>关于AOP还需要了解一下对应的Aspect、pointcut、advice等注解和具体使用方式。</p><h3 id="placeHolder动态替换"><a href="#placeHolder动态替换" class="headerlink" title="placeHolder动态替换"></a>placeHolder动态替换</h3><p>主要需要了解替换发生的时间，是在bean definition创建完成后，bean初始化之前，是通过实现BeanFactoryPostProcessor接口实现的。主要实现方式有PropertyPlaceholderConfigurer和PropertySourcesPlaceholderConfigurer。这两个类实现逻辑不一样，spring boot使用PropertySourcesPlaceholderConfigurer实现。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>需要了解spring 中对事务规定的隔离类型和事务传播类型。要知道事务的隔离级别是由具体的数据库来实现的，在数据库部分我会详细介绍。<br>事务的传播类型，可以重点了解最常用的REQUIRED和SUPPORTS类型。</p><h3 id="核心接口类"><a href="#核心接口类" class="headerlink" title="核心接口类"></a>核心接口类</h3><ul><li>ApplicationContext保存了ioc的整个应用上下文，可以通过其中的beanfactory获取到任意到bean；</li><li>BeanFactory主要的作用是根据bean definition来创建具体的bean；</li><li>BeanWrapper是对Bean的包装，一般情况下是在spring ioc内部使用，提供了访问bean的属性值、属性编辑器注册、类型转换等功能，方便ioc容器用统一的方式来访问bean的属性；</li><li>FactoryBean通过getObject方法返回实际的bean对象，例如motan框架中referer对service的动态代理就是通过FactoryBean来实现的。<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3>bean的scope是指bean的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从beanFactory中获取bean都会创建一个新的bean。<br>request、session、global-session是在web服务中使用的scope，request每次请求都创建一个实例，session是在一个会话周期内保证只有一个实例。<br>global-session在5.x版本中已经不在使用，同时增加了Application和Websocket两种scope，分别保证在一个ServletContext与一个WebSocket中只创建一个实例。<h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3>spring的事件机制需要知道spring定义的五种标准事件，具体事件可见上图，了解如何自定义事件和实现对应的applicationListener来处理自定义事件。<h2 id="spring应用相关"><a href="#spring应用相关" class="headerlink" title="spring应用相关"></a>spring应用相关</h2><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/ScLmyQ.jpg" data-fancybox="group" data-caption="ScLmyQ" class="fancybox"><img alt="ScLmyQ" title="ScLmyQ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/ScLmyQ.jpg" class="lazyload"></a><h3 id="常用注释"><a href="#常用注释" class="headerlink" title="常用注释"></a>常用注释</h3><h4 id="类型类注释"><a href="#类型类注释" class="headerlink" title="类型类注释"></a>类型类注释</h4>类型类注释包括controller、service等，需要重点了解<br>其中component和bean注解的区别如下：<ul><li>@Component注解在类上使用表明这个类是个组件类，需要Spring为这个类创建bean。</li><li>@Bean注解使用在方法上，告诉Spring这个方法将会返回一个Bean对象，需要把返回的对象注册到Spring的应用上下文中。<h4 id="设置类注解"><a href="#设置类注解" class="headerlink" title="设置类注解"></a>设置类注解</h4>重点了解@Autowire和@Qualifier以及bytype、byname等不同的自动装配机制。<h4 id="web类注解"><a href="#web类注解" class="headerlink" title="web类注解"></a>web类注解</h4>主要以了解为主，关注@RequestMapping、@GetMapping、@PostMapping等路径匹配注解，以及@PathVariable、@RequestParam 等参数获取注解。<h4 id="功能类注解"><a href="#功能类注解" class="headerlink" title="功能类注解"></a>功能类注解</h4>包括@ImportResource引用配置、@ComponentScan注解自动扫描、@Transactional事务注解等等，这里不一一介绍了。<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3>需要了解配置spring的几种方式，xml文件配置、注解配置和使用api进行配置。<br>自动装配机制需要了解按类型匹配进行自动装配，按bean名称进行自动装配，构造器中的自动装配和自动检测等主要的四种方式。<br>还需要了解一下list、set、map等集合类属性的配置方式以及内部bean的使用。</li></ul></li></ul><h2 id="四、Spring的Context的初始化流程"><a href="#四、Spring的Context的初始化流程" class="headerlink" title="四、Spring的Context的初始化流程"></a>四、Spring的Context的初始化流程</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PjJyQL.jpg" data-fancybox="group" data-caption="PjJyQL" class="fancybox"><img alt="PjJyQL" title="PjJyQL" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PjJyQL.jpg" class="lazyload"></a><br>Spring Context初始化流程<br>图中左上角是三种类型的context，xml配置方式的context、springboot的context和web服务的context。不论哪种context，创建后都会调用到AbstractApplicationContext类的refresh方法，这个方法是我们要重点分析的。</p><h3 id="refresh方法中，操作共分13步"><a href="#refresh方法中，操作共分13步" class="headerlink" title="refresh方法中，操作共分13步"></a>refresh方法中，操作共分13步</h3><ol><li>对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的properties；</li><li>刷新并获得内部的bean factory；</li><li>对bean factory进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境bean；</li><li>为context的子类提供后置处理bean factory的扩展能力。如果子类想在bean定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法；</li><li>执行context中注册的bean factory后缀处理器；<blockquote><p>注：这里有两种后置处理器，一种是可以注册bean的后缀处理器，另一种是针对bean factory进行处理的后置处理器。执行的顺序是，先按优先级执行可注册bean的处理器，在按优先级执行针对beanfactory的处理器。对springboot来说，这一步会进行注解bean definition的解析。流程如右面小框中所示，由ConfigurationClassPostProcessor触发、由ClassPathBeanDefinitionScanner解析并注册到bean factory。</p></blockquote></li><li>按优先级顺序在beanfactory中注册bean的后缀处理器，bean后置处理器可以在bean初始化前、后执行处理；</li><li>初始化消息源，消息源用来支持消息的国际化；</li><li>初始化应用事件广播器。事件广播器用来向applicationListener通知各种应用产生的事件，是一个标准的观察者模式；</li><li>是留给子类的扩展步骤，用来让特定的context子类初始化其他的bean；</li><li>把实现了ApplicationListener的bean注册到事件广播器，并对广播器中的早期未广播事件进行通知；</li><li>冻结所有bean描述信息的修改，实例化非延迟加载的单例bean；</li><li>完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件；</li><li>在finally中，执行第十三步，重置公共的缓存，比如ReflectionUtils中的缓存、AnnotationUtils中的缓存等等；</li></ol><p>至此，spring的context初始化完成。这里仅介绍了最主要的主流程，建议课后阅读源码来复习这个知识点，补全细节。</p><h2 id="五、Spring中bean的生命周期"><a href="#五、Spring中bean的生命周期" class="headerlink" title="五、Spring中bean的生命周期"></a>五、Spring中bean的生命周期</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/1BcbwS.jpg" data-fancybox="group" data-caption="1BcbwS" class="fancybox"><img alt="1BcbwS" title="1BcbwS" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/1BcbwS.jpg" class="lazyload"></a><br>Spring中bean的生命周期<br><strong>面试中经常问到的bean的生命周期，先看绿色的部分，bean的创建过程:</strong></p><ol><li>调用bean的构造方法创建bean；</li><li>通过反射调用setter方法进行属性的依赖注入；</li><li>如果实现BeanNameAware接口的话，会设置bean的name；</li><li>如果实现了BeanFactoryAware，会把bean factory设置给bean；</li><li>如果实现了ApplicationContextAware，会给bean设置ApplictionContext；</li><li>如果实现了BeanPostProcessor接口，则执行前置处理方法；</li><li>实现了InitializingBean接口的话，执行afterPropertiesSet方法；</li><li>执行自定义的init方法；</li><li>执行BeanPostProcessor接口的后置处理方法。</li></ol><p>这时，就完成了bean的创建过程。在使用完bean需要销毁时，会先执行DisposableBean接口的destroy方法，然后在执行自定义的destroy方法。这部分也建议阅读源码加深理解。</p><h2 id="六、Spring扩展接口"><a href="#六、Spring扩展接口" class="headerlink" title="六、Spring扩展接口"></a>六、Spring扩展接口</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/7sNv8H.jpg" data-fancybox="group" data-caption="7sNv8H" class="fancybox"><img alt="7sNv8H" title="7sNv8H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/7sNv8H.jpg" class="lazyload"></a><br>Spring扩展接口对spring进行定制化功能扩展时，可以选择如下一些扩展点：</p><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>是beanFactory后置处理器，支持在bean factory标准初始化完成后，对bean factory进行一些额外处理。在讲context初始化流程时介绍过，这时所有的bean的描述信息已经加载完毕，但是还没有进行bean初始化。例如前面提到的PropertyPlaceholderConfigurer，就是在这个扩展点上对bean属性中的占位符进行替换。</p><h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p>它扩展自BeanFactoryPostProcessor，在执行BeanFactoryPostProcessor的功能前，提供了可以添加bean definition的能力，允许在初始化一般bean前，注册额外的bean。例如可以在这里根据bean的scope创建一个新的代理bean。</p><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>提供了在bean初始化之前和之后插入自定义逻辑的能力。与BeanFactoryPostProcessor的区别是处理的对象不同，BeanFactoryPostProcessor是对beanfactory进行处理，BeanPostProcessor是对bean进行处理。<br><strong>注：上面这三个扩展点，可以通过实现Ordered和PriorityOrdered接口来指定执行顺序。实现PriorityOrdered接口的processor会先于实现Ordered接口的执行。</strong></p><h3 id="ApplicationContextAware"><a href="#ApplicationContextAware" class="headerlink" title="ApplicationContextAware"></a>ApplicationContextAware</h3><p>可以获得ApplicationContext及其中的bean，当需要在代码中动态获取bean时，可以通过实现这个接口来实现。</p><h3 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h3><p>可以在bean初始化完成，所有属性设置完成后执行特定逻辑，例如对自动装配对属性进行验证等等。</p><h3 id="DisposableBean"><a href="#DisposableBean" class="headerlink" title="DisposableBean"></a>DisposableBean</h3><p>用于在bean被销毁前执行特定的逻辑，例如做一些回收工作等。</p><h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p>用来监听spring的标准应用事件或者自定义事件。</p><h2 id="七、springboot相关的知识点"><a href="#七、springboot相关的知识点" class="headerlink" title="七、springboot相关的知识点"></a>七、springboot相关的知识点</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/UkH2xV.jpg" data-fancybox="group" data-caption="UkH2xV" class="fancybox"><img alt="UkH2xV" title="UkH2xV" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/UkH2xV.jpg" class="lazyload"></a></p><h3 id="1-启动流程"><a href="#1-启动流程" class="headerlink" title="1. 启动流程"></a>1. 启动流程</h3><p>主要步骤首先要配置environment，然后准备context上下文，包括执行applicationContext的后置处理、初始化initializer、通知listener处理contextPrepared和contextLoaded事件。最后执行refreshContext，也就是前面介绍过的AbstractApplicationContext类的refresh方法。</p><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p>然后要知道在Spring Boot中有两种上下文，一种是bootstrap, 另外一种是application。<br>bootstrap是应用程序的父上下文，也就是说bootstrap会先于applicaton加载。bootstrap主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。bootstrap里面的属性会优先加载，默认也不能被本地相同配置覆盖。</p><h3 id="3-注解"><a href="#3-注解" class="headerlink" title="3. 注解"></a>3. 注解</h3><p>@SpringBootApplication包含了@ComponentScan、@EnableAutoConfiguration、@SpringBootConfiguration三个注解。 而@SpringBootConfiguration注解包含了@Configuration注解。也就是springboot的自动配置功能。@Conditional注解就是控制自动配置的生效条件的注解，例如bean或class存在、不存在时进行配置，当满足条件时进行配置等等。</p><h3 id="4-特色模块"><a href="#4-特色模块" class="headerlink" title="4. 特色模块"></a>4. 特色模块</h3><ul><li>starter是springboot提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由Spring Boot自动配置进行bean的创建。例如需要使用web功能时，只需要在依赖中引入spring-boot-starter-web即可。</li><li>actuator是用来对应用程序进行监视和管理，通过restful api请求来监管、审计、收集应用的运行情况。</li><li>devtools提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。</li><li>CLI就是命令行接口，是一个命令行工具，支持使用Groovy脚本，可以快速搭建spring原型项目。</li></ul><p>以上为Spring框架需要掌握的内容，前面提到的核心机制、核心流程，建议阅读源码加深理解。<br>以上内容摘取自《32个Java面试必考点》 第07讲：必会框架-Spring全家桶</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 全家桶 10 Days - Day 1 Spring 家族的主要成员</title>
      <link href="/2019/12/30/f2b0/"/>
      <url>/2019/12/30/f2b0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Spring-Framework-History"><a href="#Spring-Framework-History" class="headerlink" title="Spring Framework History"></a>Spring Framework History</h1><ul><li>Born in 2002, the earliest Author Rod Johnson</li><li>Today, Spring 5.x, Support JDK 8-11 and Java EE 8.</li></ul><h1 id="Spring-The-source-for-modern-java"><a href="#Spring-The-source-for-modern-java" class="headerlink" title="Spring: The source for modern java"></a>Spring: The source for modern java</h1><p>Spring，始于框架，但不不限于框架<br>    <a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/oUY3eJ.jpg" data-fancybox="group" data-caption="oUY3eJ" class="fancybox"><img alt="oUY3eJ" title="oUY3eJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/oUY3eJ.jpg" class="lazyload"></a></p><h1 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h1><blockquote><p>用于构架企业应用的轻量级一站式解决方案</p></blockquote><h2 id="设计理理念"><a href="#设计理理念" class="headerlink" title="设计理理念"></a>设计理理念</h2><ul><li>⼒力力争让选择⽆无处不不在</li><li>体现海海纳百川的精神</li><li>保持向后兼容性</li><li>专注 API 设计</li><li>追求严苛的代码质量量</li></ul><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><blockquote><p>快速构架基于Spring的应用程序</p></blockquote><ul><li>快，非常快</li><li>开箱即用，按需改动</li><li>提供非功能特性</li><li>不用生成代码，没有XML配置</li></ul><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/DwpoV5.jpg" data-fancybox="group" data-caption="DwpoV5" class="fancybox"><img alt="DwpoV5" title="DwpoV5" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/DwpoV5.jpg" class="lazyload"></a></p><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="简化分布式系统的开发"><a href="#简化分布式系统的开发" class="headerlink" title="简化分布式系统的开发"></a>简化分布式系统的开发</h2><ul><li>配置管理理</li><li>服务注册与发现</li><li>熔断</li><li>服务追踪</li></ul><h1 id="Spring-5-x-的改变暗示了了什什么"><a href="#Spring-5-x-的改变暗示了了什什么" class="headerlink" title="Spring 5.x 的改变暗示了了什什么"></a>Spring 5.x 的改变暗示了了什什么</h1><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/OE30HW.jpg" data-fancybox="group" data-caption="OE30HW" class="fancybox"><img alt="OE30HW" title="OE30HW" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/OE30HW.jpg" class="lazyload"></a></p><h1 id="第一个Spring程序-Hello-Spring"><a href="#第一个Spring程序-Hello-Spring" class="headerlink" title="第一个Spring程序 Hello Spring"></a>第一个Spring程序 Hello Spring</h1><ol><li><p>Open IntelliJ</p></li><li><p>Create a new project</p></li><li><p>Choose Spring Initializr<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Z1dDju.jpg" data-fancybox="group" data-caption="Z1dDju" class="fancybox"><img alt="Z1dDju" title="Z1dDju" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Z1dDju.jpg" class="lazyload"></a></p></li><li><p>Fill in the Project Metadata<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kd0ntJ.jpg" data-fancybox="group" data-caption="Kd0ntJ" class="fancybox"><img alt="Kd0ntJ" title="Kd0ntJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kd0ntJ.jpg" class="lazyload"></a></p></li><li><p>Choose Dependencies: Spring Web and Spring Boot Actuator<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/sc3cGw.jpg" data-fancybox="group" data-caption="sc3cGw" class="fancybox"><img alt="sc3cGw" title="sc3cGw" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/sc3cGw.jpg" class="lazyload"></a></p></li><li><p>Finish the project</p></li></ol></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
            <tag> IntelliJ </tag>
            
            <tag> Java </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup a Hexo Editor Environment on Mac</title>
      <link href="/2019/12/30/3803/"/>
      <url>/2019/12/30/3803/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a name="diUkv"></a></p><h1 id="Use-Upic-to-Upload-to-the-Image-Bed"><a href="#Use-Upic-to-Upload-to-the-Image-Bed" class="headerlink" title="Use Upic to Upload to the Image Bed"></a>Use Upic to Upload to the Image Bed</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install upic</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Setup-Image-Bed-on-the-Github"><a href="#Setup-Image-Bed-on-the-Github" class="headerlink" title="Setup Image Bed on the Github"></a>Setup Image Bed on the Github</h2><ol><li><p>Generate the App Secret<br>Go to the Github->Setting->Developer Settings->Personal access tokens</p></li><li><p>Open uPic->Preferences, to add Github as the image bed<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/uksitl.jpg" data-fancybox="group" data-caption="uksitl" class="fancybox"><img alt="uksitl" title="uksitl" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/uksitl.jpg" class="lazyload"></a></p></li><li><p>Set the github repo information<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kw2jG9.jpg" data-fancybox="group" data-caption="Kw2jG9" class="fancybox"><img alt="Kw2jG9" title="Kw2jG9" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kw2jG9.jpg" class="lazyload"></a></p></li></ol><h1 id="Prepare-Hexo-Env"><a href="#Prepare-Hexo-Env" class="headerlink" title="Prepare Hexo Env"></a>Prepare Hexo Env</h1><h2 id="Install-Node"><a href="#Install-Node" class="headerlink" title="Install Node"></a>Install Node</h2><p>There are many ways to install nodes. Most advanced users want to install multiple versions of nodes instead of one version only. To have multiple versions of node installed, I chose to use nvm.<br><a name="u1DzV"></a></p><h3 id="Install-nvm-via-brew"><a href="#Install-nvm-via-brew" class="headerlink" title="Install nvm via brew"></a>Install nvm via brew</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bew install nvm</span><br><span class="line">mkdir ~/.nvm</span><br><span class="line"><span class="comment">#put the following the in the .zshrc</span></span><br><span class="line">  <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">  [ -s <span class="string">"/usr/local/opt/nvm/nvm.sh"</span> ] && . <span class="string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">  [ -s <span class="string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span> ] && . <span class="string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></tbody></table></figure></div><p><a name="pkBHr"></a></p><h3 id="To-see-what-Node-versions-are-available-to-install-run"><a href="#To-see-what-Node-versions-are-available-to-install-run" class="headerlink" title="To see what Node versions are available to install run"></a>To see what Node versions are available to install run</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></tbody></table></figure></div><p><a name="2spx7"></a></p><h3 id="Install-the-LTS"><a href="#Install-the-LTS" class="headerlink" title="Install the LTS"></a>Install the LTS</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v12.14.0</span><br></pre></td></tr></tbody></table></figure></div><p>After installing you can verify what is installed with</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><p><a name="Ai8HU"></a></p><h3 id="Swith-between-different-node-versions"><a href="#Swith-between-different-node-versions" class="headerlink" title="Swith between different node versions"></a>Swith between different node versions</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 11</span><br></pre></td></tr></tbody></table></figure></div><p><a name="D17ZW"></a></p><h1 id="Add-SSH-keys-for-the-Github-repo"><a href="#Add-SSH-keys-for-the-Github-repo" class="headerlink" title="Add SSH keys for the Github repo"></a>Add SSH keys for the Github repo</h1><p><a name="EljiX"></a></p><h2 id="Generate-SSh-keys"><a href="#Generate-SSh-keys" class="headerlink" title="Generate SSh keys"></a>Generate SSh keys</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></tbody></table></figure></div><p><a name="adding-your-ssh-key-to-the-ssh-agent"></a></p><h3 id="Adding-your-SSH-key-to-the-ssh-agent"><a href="#Adding-your-SSH-key-to-the-ssh-agent" class="headerlink" title="Adding your SSH key to the ssh-agent"></a><a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">Adding your SSH key to the ssh-agent</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure></div><p><a name="IeIjJ"></a></p><h2 id="Copy-the-SSH-key-to-your-clipboard"><a href="#Copy-the-SSH-key-to-your-clipboard" class="headerlink" title="Copy the SSH key to your clipboard"></a>Copy the SSH key to your clipboard</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy < ~/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure></div><p><a name="iP1c2"></a></p><h1 id="Checkout-Hexo-Blog-Repo"><a href="#Checkout-Hexo-Blog-Repo" class="headerlink" title="Checkout Hexo Blog Repo"></a>Checkout Hexo Blog Repo</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:geekdanny/hexo.git</span><br></pre></td></tr></tbody></table></figure></div><p><a name="wM3H5"></a></p><h1 id="Install-Hexo-on-Mac"><a href="#Install-Hexo-on-Mac" class="headerlink" title="Install Hexo on Mac"></a>Install Hexo on Mac</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#install hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure></div><p><a name="mhSbi"></a></p><h2 id="Add-Butterfly-Theme-Specific-Dependencies"><a href="#Add-Butterfly-Theme-Specific-Dependencies" class="headerlink" title="Add Butterfly Theme Specific Dependencies"></a>Add Butterfly Theme Specific Dependencies</h2><p>My hexo uses the Butterfly Theme, which requires some specific dependencies. The bufferfly repo located at <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">https://github.com/jerryc127/hexo-theme-butterfly</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Go to the blog folder</span></span><br><span class="line"><span class="built_in">cd</span> /Users/admin/Development/personal/hexo/blog/</span><br><span class="line"><span class="comment">#clone the butterfly theme</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"><span class="comment">#Install cheerio</span></span><br><span class="line">npm install cheerio</span><br><span class="line"><span class="comment">#Install live2d</span></span><br><span class="line">npm install hexo-helper-live2d</span><br><span class="line"><span class="comment">#Install local search</span></span><br><span class="line">npm install hexo-generator-search</span><br><span class="line"><span class="comment">#Install WordCount</span></span><br><span class="line">npm install hexo-wordcount</span><br><span class="line"><span class="comment">#Install hexo-abbrlink</span></span><br><span class="line">npm install hexo-abbrlink</span><br></pre></td></tr></tbody></table></figure></div><p><a name="ov482"></a></p><h2 id="Sync-YuQue-with-Hexo"><a href="#Sync-YuQue-with-Hexo" class="headerlink" title="Sync YuQue with Hexo"></a>Sync YuQue with Hexo</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yuque-hexo</span><br></pre></td></tr></tbody></table></figure></div><p><a name="dhV06"></a></p><h3 id="Add-the-YuQue-config-to-the-package-json"><a href="#Add-the-YuQue-config-to-the-package-json" class="headerlink" title="Add the YuQue config to the package.json"></a>Add the YuQue config to the package.json</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"yuqueConfig"</span>: {</span><br><span class="line">  <span class="string">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">  <span class="string">"login"</span>: <span class="string">"geekdanny"</span>,</span><br><span class="line">  <span class="string">"repo"</span>: <span class="string">"hexo"</span>,</span><br><span class="line">  <span class="string">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">  <span class="string">"postPath"</span>: <span class="string">"source/_posts/yuque"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Yuque </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoDaddy with Github Pages</title>
      <link href="/2019/12/29/7e78/"/>
      <url>/2019/12/29/7e78/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Github provides <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">docs</a> to wire up your domain with your gh-pages, but I’m going to cover the set up in 7simple steps</p><ol><li><p>First, the most difficult part…decide on a domain name and buy it on GoDaddy (<em>fingers-crossed you get the domain name you want and someone else hasn’t already taken it</em>).</p></li><li><p>On the home page of your account the in Domain Manager “Menu Domains” Go to all domains and select Use My Domains in Next Steps Colums</p></li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/TIuLcH.jpg" data-fancybox="group" data-caption="TIuLcH" class="fancybox"><img alt="TIuLcH" title="TIuLcH" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/TIuLcH.jpg" class="lazyload"></a></p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NHUhQt.jpg" data-fancybox="group" data-caption="NHUhQt" class="fancybox"><img alt="NHUhQt" title="NHUhQt" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NHUhQt.jpg" class="lazyload"></a></p><ol start="3"><li>Within the DNS management page you will need to make five changes:</li></ol><ul><li><p>In the Type “A” row update the IP address to: 185.199.108.153<br>(<em>this will point your custom domain to GitHub’s server over HTTPS</em>)</p></li><li><p>In the CNAME row with Name “www” input your gh-pages website (<em>username.github.io</em>)</p></li><li><p>At the bottom click the “ADD” button and make 3 more Type “A” rows with the IP addresses of: 185.199.109.153, 185.199.110.153, 185.199.111.153<br>(<em>don’t worry when you leave the page it will alphabetize the types</em>)</p></li></ul><p><a href="https://cdn-images-1.medium.com/max/2008/1*Uqz2xPi6uWdBm8HqFwf9IQ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/2008/1*Uqz2xPi6uWdBm8HqFwf9IQ.png" class="lazyload"></a></p><ol start="4"><li>Go to your editor and in the repository of your website create a new file named “CNAME” in the root of your directory.</li></ol><p><a href="https://cdn-images-1.medium.com/max/2046/1*IYBtpap1lyj1xJzhM5V3GQ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/2046/1*IYBtpap1lyj1xJzhM5V3GQ.png" class="lazyload"></a></p><ol start="5"><li><p>In the “CNAME” file add your domain name purchased from GoDaddy.</p></li><li><p>Add, commit, and push your changes to Github.</p></li><li><p>Within your repository you will need to allow your website to be served through HTTPS. Check “Enforce HTTPS” in the Settings tab of your repo. This permission might take awhile because the certificate needs to be issued, but make sure you check this enforcement option when allowed.</p></li></ol><p><a href="https://cdn-images-1.medium.com/max/1472/1*n3m607Jv1jIBXWZgg6gR2w.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/1472/1*n3m607Jv1jIBXWZgg6gR2w.png" class="lazyload"></a></p><p>You can confirm that your DNS is set-up correctly by using the <code>dig</code> command in your terminal with your custom domain. You should see that your “A” Types point to the IP addresses that you had specified in GoDaddy’s DNS management page, in other words you’re pointing your DNS to GitHub’s server. Below is an example of the <code>dig</code> command:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dig</span> <span class="selector-tag">gramabharathi</span><span class="selector-class">.in</span></span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://cdn-images-1.medium.com/max/1452/1*0WN6XMpUMFe8dWlJwsqVWg.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/1452/1*0WN6XMpUMFe8dWlJwsqVWg.png" class="lazyload"></a></p><p>If you’re encountering any problems, this <a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="noopener">GitHub Troubleshooting Custom Domains</a> documentation is a good reference.</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> GoDaddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to install Node on Mac using NVM and Homebrew</title>
      <link href="/2019/12/23/956a/"/>
      <url>/2019/12/23/956a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><strong>Version Manager makes it easy to install multiple versions of Node on a Mac. You install NVM using Homebrew, and if you don’t have Homebrew installed yet, read this article.</strong></p><h1 id="Step-1-Install-NVM"><a href="#Step-1-Install-NVM" class="headerlink" title="Step 1: Install NVM"></a>Step 1: Install NVM</h1><p>Install node version manager.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-2-Create-a-directory-for-NVM"><a href="#Step-2-Create-a-directory-for-NVM" class="headerlink" title="Step 2: Create a directory for NVM"></a>Step 2: Create a directory for NVM</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.nvm/</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-3-Configure-your-environmental-variables"><a href="#Step-3-Configure-your-environmental-variables" class="headerlink" title="Step 3: Configure your environmental variables"></a>Step 3: Configure your environmental variables</h1><p>Either create or open your .bash_profile.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure></div><p>Paste this.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></tbody></table></figure></div><p>Execute the content we just pasted.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-4-Double-check-your-work"><a href="#Step-4-Double-check-your-work" class="headerlink" title="Step 4: Double-check your work"></a>Step 4: Double-check your work</h1><p>If you’ve done everything correctly, you should be able to run the nvm command and ask it to list which versions node are available.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-5-Install-Node"><a href="#Step-5-Install-Node" class="headerlink" title="Step 5: Install Node"></a>Step 5: Install Node</h1><p>You can see a list of previously released versions of node from the NodeJS release page<br>Install Node 6.x.x.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 6.x.x</span><br></pre></td></tr></tbody></table></figure></div><p>Install Node 8.x.x</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.x.x</span><br></pre></td></tr></tbody></table></figure></div><p>Double-check your installation.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-6-Set-Node-Globally"><a href="#Step-6-Set-Node-Globally" class="headerlink" title="Step 6: Set Node Globally"></a>Step 6: Set Node Globally</h1><p>You can set a specific version of Node as your default.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default 12.x.x</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h1><p>Error Example #1<br>If you are having issues with npm, then you might want to try this.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">brew uninstall node</span><br></pre></td></tr></tbody></table></figure></div><p>Install Node version 12.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install node@12</span><br><span class="line"><span class="built_in">echo</span> prefix=~/.npm-packages >> ~/.npmrc</span><br><span class="line">curl -L https://www.npmjs.com/install.sh | sh</span><br></pre></td></tr></tbody></table></figure></div><p>Add this to your local variables so that npm and global npm are usable.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.npm-packages/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure></div><p>Source</p><h2 id="Error-Example-2"><a href="#Error-Example-2" class="headerlink" title="Error Example #2"></a>Error Example #2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fetching: https://registry.npmjs.org/npm/-/npm-6.4.1.tgz</span><br><span class="line">up to date <span class="keyword">in</span> 0.027s</span><br><span class="line">sh: rimraf: <span class="built_in">command</span> not found</span><br><span class="line">npm ERR! file sh</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno ENOENT</span><br><span class="line">npm ERR! syscall spawn</span><br><span class="line">npm ERR! npm@6.4.1 prepare: `node bin/npm-cli.js --no-audit --no-timing prune --prefix=. --no-global && rimraf <span class="built_in">test</span>/*/*/node_modules && make -j4 doc`</span><br><span class="line">npm ERR! spawn ENOENT</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the npm@6.4.1 prepare script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/myaccount/.npm/_logs/*-debug.log</span><br><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found: 0.99s@latest</span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/myaccount/.npm/_logs/*-debug.log</span><br><span class="line">It failed</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/12/10/1c53/"/>
      <url>/2019/12/10/1c53/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><div class="justified-gallery"><p><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg" alt title></a><br><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg" alt title></a><br><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg" alt title></a></p>          </div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install K8S on Centos 7.5</title>
      <link href="/2019/12/07/cbc1/"/>
      <url>/2019/12/07/cbc1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Install-K8S-on-Centos-7-5"><a href="#Install-K8S-on-Centos-7-5" class="headerlink" title="Install K8S on Centos 7.5"></a>Install K8S on Centos 7.5</h1><p>Kubernetes (K8s) uses a containerization platform like Docker, containerd, etc. and requires a Registry to download and use Docker images. Docker Hub is the global public registry that serves the purpose. However, there are situations, when we want to use Kubernetes (K8s) in a private network. In such a situation, we cannot access Docker Hub, therefore, we must configure a Private Docker Registry for our Kubernetes (K8s) cluster.</p><p>In this article, we will install Kubernetes (K8s) offline on CentOS 7. We are not configuring a Private Docker Registry here, but you can read our following articles to configure it by yourself.</p><ul><li>Configure Secure Registry with Docker-Distribution on CentOS 7</li><li>Configure a Private Docker Registry on CentOS 7<h2 id="Install-and-prepare-the-Centos7-5-Virtual-Machine"><a href="#Install-and-prepare-the-Centos7-5-Virtual-Machine" class="headerlink" title="Install and prepare the Centos7.5 Virtual Machine"></a>Install and prepare the Centos7.5 Virtual Machine</h2>I chose to install Centos7.5 VM on VSphere, you can choose to install th centos on your local virtualbox.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/E8SrS9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/E8SrS9.png" class="lazyload"></a><br>Finish the installation first. Make sure to turn on the network during the installation.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/xRzPkJ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/xRzPkJ.png" class="lazyload"></a><br>In our example, we will use one <strong>master</strong> and one <strong>one node</strong>.<h3 id="Prepare-the-Virtual-Machine"><a href="#Prepare-the-Virtual-Machine" class="headerlink" title="Prepare the Virtual Machine"></a>Prepare the Virtual Machine</h3><h4 id="System-Specifiction"><a href="#System-Specifiction" class="headerlink" title="System Specifiction"></a>System Specifiction</h4>We have configured two CentOS 7 virtual machines.<table><thead><tr><th>Hostname</th><th>docker-online.example.com</th><th>docker-offline.example.com</th></tr></thead><tbody><tr><td>Operating System</td><td>CentOS 7.6</td><td>CentOS 7.6</td></tr><tr><td>Internet</td><td>Yes</td><td>No</td></tr><tr><td>Docker Version</td><td>B3</td><td>C3</td></tr></tbody></table></li></ul><h2 id="Download-the-kube"><a href="#Download-the-kube" class="headerlink" title="Download the kube"></a>Download the kube</h2></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduce K8S</title>
      <link href="/2019/12/07/1031/"/>
      <url>/2019/12/07/1031/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h1><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5UmgFx.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5UmgFx.png" class="lazyload"></a></p><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><p>A physical machine. It is using to monitor and dispatch to each node to work. The master is the controller.</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>A node can be a virtual or physical machine. A node is a worker</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><ul><li>A pod is the smallest unit in K8S. A pod is a container of containers.</li><li>A pod contains can container many containers.</li><li>A pod is a process.</li><li>Each pod has its own IP address.</li><li>Each pod can communicate, but the communication has to go via kube-proxy.</li><li>Pause is a root container in the pod.</li><li>Pod should contain a complete module per container.</li><li>You can use the analogy that each pod is a virtual machine.</li><li>All the communication should go through the pause between it goes out the pod<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/wyVam5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/wyVam5.png" class="lazyload"></a><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2>Label is a description tag of a pod.<h2 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h2>It is used to replicate, delete, add new pods. It monitors the system has enough pods between nodes.<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2>Service is a logic group. Usually, the same services are put into the same pod. E.g Backend services are grouped into one pod and frontend services are grouped in another pod.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/4iMG69.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/4iMG69.png" class="lazyload"></a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
