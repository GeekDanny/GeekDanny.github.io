<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全球化2.0与中国“战略性分手”的三种形式</title>
      <link href="/2020/05/17/ba7b/"/>
      <url>/2020/05/17/ba7b/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>文章来源: 自由亚洲电台</p></blockquote><p>全球化2.0与中国“战略性分手”（自由亚洲电台制图）</p><p>西方五眼联盟学者提出了与中国的”战略性分手”三管齐下的策略。这可能在全球化2.0之际，重创中国的经济地位。</p><p>美国总统特朗普周四刚发表了“切断和中国关系”的讲话，周五，美商务部宣布新出口禁令，扩大对华为供应链封锁；同日，台湾的半导体大厂台积电宣布斥资在美国亚利桑纳州建造芯片厂，获得美国官员的大力赞扬。</p><p>中国外交部发言人赵立坚5月15日则批评”美中脱钩”的氛围。赵立坚：”合则两利，斗则俱伤，搞脱钩和切割没有出路。”</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/kWhH6I.png" data-fancybox="group" data-caption="kWhH6I" class="fancybox"><img alt="kWhH6I" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/kWhH6I.png" class="lazyload" title="kWhH6I"></a></p><p><strong>中国不再是可靠的伙伴**</strong>“**</p><p>英国智库“亨利·杰克逊协会” (Henry Jackson Seciety)的研究部主任安德鲁·福克萨尔(Andrew Foxall)告诉自由亚洲电台，”与中国脱钩”的概念自美中贸易战打响开始就在西方世界传播，新冠疫情加速让世界重新思考产业链过于依赖中国的危险性。</p><p>福克萨尔：”（疫情）让西方更清楚地意识到，中国不再是可靠的伙伴。这种（与中国）脱钩或说成是战略性的分手，确实困难，但绝对有必要。”</p><p>亨利·杰克逊协会14日发布的报告，详细分析了五眼联盟国家在关键进口商品上对中国的”战略依赖”程度。所谓“战略依赖”，指该商品有50％以上来自中国供应链，且中国控制该商品30%以上的全球市场。</p><p>报告发现，“五眼联盟”成员澳大利亚、新西兰、美国、加拿大、英国共有831种进口商品对中国有“战略依赖”，其中260种是国家基础设施（CNI）的关键组成部分。所谓“五眼联盟”是这些国家组成的一个分享情报的机制。</p><p>报告的共同作者、亨利·杰克逊学会 “全球英国”计划负责人罗杰斯(James Rogers)在接受自由亚洲电台专访时表示，这份报告的目的是把对中国依赖程度高的关键商品找出来，让这些国家政府在制定与中国脱钩计划时，能做出清楚的选择。</p><p>罗杰斯：”我们把重点放在影响国家关键基础设施的产业，比如医疗、国防、科技，以及会影响进入第四次工业革命的生技、化学原料、稀土等。五眼联盟必须确保在这些方面不依赖中国。”</p><p><a href="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevy9gdph4j30pc0e8kdo.jpg" data-fancybox="group" data-caption="image-20200517101508098" class="fancybox"><img alt="image-20200517101508098" data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevy9gdph4j30pc0e8kdo.jpg" class="lazyload" title="image-20200517101508098"></a></p><p>变态辣椒：全球化2.0即将开通 疫情雷区请绕行 Photo: RFA</p><p><strong>学者提与中国**</strong>“<strong><strong>战略性分手</strong></strong>“<strong>**的三种形式</strong></p><p>福克萨尔告诉本台，西方国家不应该完全切断与中国的关系。所谓的与中国脱钩不是提倡保护主义，更不该被诠释为反全球化、反对自由贸易，重点是在战略产业不再集中依赖中国。</p><p>这份报告提出了对中国脱钩策略需要三管齐下。第一”消极性脱钩”，指的是对关键性中国商品的进口予以限制；第二”积极性脱钩”，指在本国或其它国家拓展产业链；第三”合作性脱钩”，则是由五眼联盟国的经济合作、情报共享开始，并进一步扩大到印太区域的合作伙伴如日本、韩国、台湾、印度和越南等。</p><p><strong>中国制造**</strong>2025<strong>**化为幻影？</strong></p><p>2015年，中国国务院总理李克强曾提出”中国制造2025”的政策，希望中国从低端制造大国跻身高端产业的制造业强国。</p><p>罗杰斯告诉自由亚洲电台，在这场由美国引领的全球与中国脱钩计划下，势必对中国造成”重大影响”，中国势必要重新拟定战略计划。</p><p>罗杰斯：”美国一直是中国工业现代化的主要投资者及最大的市场。如今从美国到五眼联盟再到世界各国越广泛的与中国脱钩，势必对中国的计划造成重大影响。”</p><p>两位学者都提到了上世纪九十年代的全球化政策。西方国家很多人都期待全球化会加速中国中产阶级崛起，最终能够成为推动中国融入全球政治经济体的力量。</p><p>罗杰斯说，全球化的基础是各国对贸易规则的尊重与合作。但是从中国现任政府看来，中国并没有选择往这条路走。他说，而当世界发现全球化1.0这条路不再与各国利益相符，终将采取行动，在全球化2.0的进程中一起”约束中国”。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 国际经济 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中美对抗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国封杀华为“断芯”升级 中国或砍苹果出气</title>
      <link href="/2020/05/17/7b8a/"/>
      <url>/2020/05/17/7b8a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>美国商务部星期五（5月15日）宣布扩大对中国华为公司的禁令，要求那些依赖美国设备和软件的外国芯片制造商必须取得美国商务部的特许，方可向中国华为公司出口芯片产品。中国官方媒体暗示，中国可能出台针对苹果、波音等美国企业的报复措施。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/YqpgBI.png" data-fancybox="group" data-caption="YqpgBI" class="fancybox"><img alt="YqpgBI" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/YqpgBI.png" class="lazyload" title="YqpgBI"></a></p><p>美国官员说，华为一直在通过从美国以外的制造商获取芯片，规避美国制裁。</p><p>美国商务部的声明说，新推出的决定将切断华为对美国出口管制的“破坏努力”，商务部下属的工业和安全局（BIS）正在修订“外国直接产品规则”和“实体清单”，以具有战略性做法专门针对华为试图获取的、直接通过美国软件和技术制造的半导体产品。</p><p>美国商务部长罗斯星期五在接受福克斯商业频道采访时说：“一直以来，华为都在用一个非常有技术性的漏洞通过外国晶圆生产商使用美国的技术。”他说，新的规定“试图纠正这个漏洞，并确保美国的晶圆厂与外国晶圆厂在平等的基础上竞争。”</p><p>华为去年被列入美国商务部“实体清单”。美国政府以国家安全为由，限制美国制造的产品卖给华为，禁令也针对一些包含美国技术的外国产品。路透社说，特朗普政府中的对华强硬派对实体清单的作用仍然不满，因为某些外国供应商仍然可以向华为供货，于是从去年11月开始推动进一步加强对华为的出口限令。</p><p>美国商务部资深官员星期五上午在一场背景说明会上说，美国商务部正在与美国出口管制部门进行跨部门合作，在“设计”和“生产”两个方面封堵华为使用海外制造设施获取芯片的渠道。</p><p>这名官员说：“在设计方面，如果华为使用来源于美国的软件生产芯片，现在就需要执照。这些产品现在就要受到华为实体清单规定下的美国BIS执照规定的约束。”</p><p>在制造层面，这名官员表示，新的管制措施约束的着眼点是制造芯片所使用的技术和硬件设备。“如果这些产品是华为设计的、或者是由清单上华为的114个分支实体设计的，如果这些设计是通过使用美国控制的技术，特别是半导体设施和技术而生产，其产品就需要获得美国商务部的执照。”</p><p>美国以国家安全的名义，于2019年5月发布针对华为的“实体清单”。华为则试图壮大旗下的海思半导体走自力更生之路，但仍然指定上海的中芯国际和台湾台积电等厂商制造其设计的芯片。《纽约时报》说，中芯与台积电都使用美国的设备。</p><p>美国国务卿蓬佩奥星期五发表声明说，商务部此次为了阻挡华为绕过美国法律、扩大外国直接产品规则，进一步保护了美国安全与5G网络的安全性。</p><p>蓬佩奥在声明中说：“华为是一个不值得信任的供应商，是中国共产党的工具，听命于中共的指令。美国司法部已经起诉华为偷窃美国技术、帮助伊朗躲避制裁，美国商务部在2019年将华为列入实体清单。一年多来，美国国务院一直在与世界各地的盟友和合作伙伴分享我们对华为和其他不值得信任的供应商的了解。”</p><p>在美中两国政治与经济对弈中陷入两难的台积电日前宣布将在美国亚利桑那州投资120亿美元兴建晶圆厂，生产高端的5纳米芯片。</p><p>中国光大证券去年的一份报告显示，大多数芯片制造商依赖美国设备，这些公司包括科磊（KLA Corp）、泛林集团（Lam Research）以及应用材料公司（Applied Materials）。</p><p>美国德汇律师事务所（Dorsey & Whitney）在提供给美国之音的一份出自该公司高级合伙人邓锦明（Nelson Dong）的分析中说：美国商务部的“这一新举措将影响到世界各地、特别是中国、台湾、韩国和日本的集成电路设计者和生产商。”</p><p>他说：“由于全球半导体行业往往非常依赖源自美国的半导体设计软件和美国的半导体制造设备，这一修订后的‘直接产品规则’可能会导致一些短期和长期的后果。”</p><p>新出口限令预计从5月15日开始计算的120天以后开始执行。执行细则尚未公布。</p><p>美国商务部宣布新的制裁后，中国共产党官方报纸《人民日报》旗下的《环球时报》立刻作出回应，其英文网站援引“中国政府消息人士”的话说，如果美国计划对华为实行半导体产品禁运，中国将采取“一系列反制措施”，例如将美国公司列入中国的“不可靠实体清单”，根据中国的网络安全法和反垄断法对苹果、高通和思科等公司进行调查和实施限令，和暂停购买波音飞机等。</p><p>不过，《环球时报》的报道并没有指出其消息来源的身份和姓名。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 芯片 </category>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> 芯片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中芯国际获国家200亿注资，拟取代台积电曲线救华为</title>
      <link href="/2020/05/17/a204/"/>
      <url>/2020/05/17/a204/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>转载6park</p></blockquote><p>近日，来自中芯国际官方消息，国家集成电路基金会等多方同意分别向中芯南方注资15亿美元及7.5亿美元。消息已证实，中芯控股与国家集成电路基金等多方签订新合资合同及新增资扩股协议，中芯南方注册资本将由35亿美元增加至65亿美元，被新增注资金额折合人民币近200亿元。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/hhPIyD.png" data-fancybox="group" data-caption="hhPIyD" class="fancybox"><img alt="hhPIyD" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/hhPIyD.png" class="lazyload" title="hhPIyD"></a>联想到近几天川建国那边捅出的幺蛾子，不难看出国家有意通过注资的方式助力中国芯片产业，曲线救华为的意图也十分清晰。要知道，这两天川建国曾宣布将阻止全球芯片制造商向华为出售或运输半导体芯片，且美国商务部也正在修改一项出口新规，计划从战略上直接针对华为收购通过美国软件和技术制造的半导体产品。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/30GWcf.png" data-fancybox="group" data-caption="30GWcf" class="fancybox"><img alt="30GWcf" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/30GWcf.png" class="lazyload" title="30GWcf"></a>从美国三次延期华为“临时通用许可”的行为来看，不是对华为的宽限，而是给使用华为设备的用户的美国运营商提供空间，特别是针对美国农村地区的用户和运营商，要求加快向替代供应商过渡。而且川建国也在酝酿着修改“外国直接产品”再出口规则，意在限制台积电等重要供应商继续向华为供应半导体产品。联系到台积电计划斥资120亿美元在亚利桑那州建造芯片工厂的举动，不难看出川建国的指令正在逐步生效，华为被“卡脖子”似乎也将成为事实。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/HZ3WdL.png" data-fancybox="group" data-caption="HZ3WdL" class="fancybox"><img alt="HZ3WdL" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/HZ3WdL.png" class="lazyload" title="HZ3WdL"></a>现在华为积极自救，不但将自家电子设备零部件的国产替代率提升到41.8%，比遭受制裁前大大提升16.5%，将美国产电子设备零件比例压缩至总体的1.5%，还在新款5G机型上用自家海思半导体替代了美国大型通信芯片企业思佳讯的产品，为中国芯争了一口气。目前，拿华为Mate30 5G版为例，非国产零部件除了日本的摄像头、闪存和双工器等，以及韩国的显示器、DRAM和触摸屏外，只有机身的玻璃盖板依赖美国康宁公司。而这一零部件在手机整体32美元的总成本中仅占3美元，且随时可以被中国产品替代，这一点从华为和京东方的合作中不难看出其可能性。 </p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Ls6EtC.png" data-fancybox="group" data-caption="Ls6EtC" class="fancybox"><img alt="Ls6EtC" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Ls6EtC.png" class="lazyload" title="Ls6EtC"></a></p><p>另外，华为把14纳米芯片转到中芯国际研发生产，也有计划将7纳米芯片交给中芯作进一步研发。尽管中芯国际在短时间内很难替代台积电，至少在1-2年内难以实现超越，但国家资本的注入势必会加快中芯国际的研发速度，更加先进工艺的半导体产品将在中芯国际的操作台喷涌而出。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 芯片 </category>
          
          <category> 科技观察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> 芯片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国人的“芯病”何去何从</title>
      <link href="/2020/05/16/f2b1/"/>
      <url>/2020/05/16/f2b1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="中国芯片之殇"><a href="#中国芯片之殇" class="headerlink" title="中国芯片之殇"></a>中国芯片之殇</h1><p>2019年5月18日，美国将华为列入了“实体名单”。</p><p>所谓“实体名单”是美国为了维护其国家利益，作为出口管制的重要手段。进入到这个名单的公司，在没有得到美国政府许可的情况下，美国公司不能和名单上的企业合作。</p><p>简单说实体名单就是一份黑名单，企业一旦上榜就被剥夺了和美国进行贸易的机会，华为开始被美国政府掐住了喉咙。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y8Rzld.png" data-fancybox="group" data-caption="Y8Rzld" class="fancybox"><img alt="Y8Rzld" title="Y8Rzld" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y8Rzld.png" class="lazyload"></a></p><p>尽管当时限制了美国公司和华为的合作，但华为还有一线生机。华为手里有自己的芯片设计公司：“一夜转正”的华为海思。</p><p>虽然华为没有芯片生产能力，所幸的是世界上最大的芯片代工企业是台湾的台积电，并不是一家美国公司。华为还能够通过台积电代加工得到自己的高性能芯片。</p><p>一年后的现在，美国对华为要落井下石。</p><p>2020年5月15日，美国商务部发布一则公告：一年前只是禁止美国公司和华为开展业务，现在美国限制了全世界所有的半导体工厂，这些工厂不管是哪个国家的，只要有使用到美国软件和设备，在为华为生产芯片之前，就必须获得美国政府的许可。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/GC5BGD.png" data-fancybox="group" data-caption="GC5BGD" class="fancybox"><img alt="GC5BGD" title="GC5BGD" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/GC5BGD.png" class="lazyload"></a></p><p>▲美国商务部：华为破坏了实体名单限制华为使用美国科技生产产品</p><p>最狠的是这条禁令是无差别全面打击，不只是华为，所有需要美国软件、技术、设备的芯片制造商，不管是中国、日本、还是韩国企业，都逃不开美国的技术和设备。只要是为华为造芯片，就要受美国管制。</p><p>此令一出，中方表示，如果美国针对华为的方案实施，那么将予以强力反击，将相关企业列入“不可靠实体清单”，依照相关法律对高通、思科、苹果等美国企业展开限制与调查，甚至暂停采购波音客机。</p><p>一场科技封锁战的铁幕在大国之间落下已然是事实。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwZrvibV8nkic8y2nWZxLoERDuQsRtIrMFKx9moYox1IGrkGmXCsBE0ltQ/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwZrvibV8nkic8y2nWZxLoERDuQsRtIrMFKx9moYox1IGrkGmXCsBE0ltQ/640?wx_fmt=gif" class="lazyload"></a></p><h1 id="01-信息时代“芯”是有多么重要"><a href="#01-信息时代“芯”是有多么重要" class="headerlink" title="01 信息时代“芯”是有多么重要"></a>01 信息时代“芯”是有多么重要</h1><p>我们常说如今社会步入了信息化时代，一个手机基本就能搞定每个人每天的所有诉求，玩“吃鸡”逛淘宝，外卖小哥顺着定位就能给你送餐到家，一个智能手机已经是时代标配。</p><p>从小小的手机，到大型工业设备设施的运行，乃至网络，电力，国防，没有一个环节离不开硬件的支撑。而硬件之核心，乃是芯片。</p><p>抛开芯片谈信息技术发展，就如同跟陌生女孩聊结婚，都是耍无赖行为。</p><p>而信息时代中这些社会运转的基础就是芯片，中国人需要的芯片有多依赖进口？看这样一组数据。</p><p>中国高端芯片完全不能自给自足，80%依赖进口。去年中国进口芯片花掉3000多亿美元，是进口原油价格的两倍，约等于中国军费的两倍，相当于造80艘航空母舰的开销。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/tIjojk.png" data-fancybox="group" data-caption="tIjojk" class="fancybox"><img alt="tIjojk" title="tIjojk" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/tIjojk.png" class="lazyload"></a></p><p>据《G20国家创新竞争力黄皮书》显示：中国在军用航天级芯片上基本能实现自给自足，中低档的芯片甚至满足自己的需要外还能大量出口，但是在高端芯片上进口依赖度飙升，80%靠进口。</p><p>电子消费级市场也很难见到中国自己的高端芯片。每个人离不开的电脑手机，其中高端芯片基本是国外产品的天下，有时候事实体现在钱上更有说服力。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/EcHCwq.png" data-fancybox="group" data-caption="EcHCwq" class="fancybox"><img alt="EcHCwq" title="EcHCwq" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/EcHCwq.png" class="lazyload"></a></p><p>▲2018年进口额达到3120.58亿美元图片来自：中商产业研究院</p><p>从2012年开始，中国集成电路进口额连续突破2000亿美元，2000亿美元什么概念？按照2017年汇率来算，2000亿美元折合人民币是13200亿人民币。</p><p>2017年中国军费开支是10433亿人民币，如果按照网上所言，山东舰造价250亿人民币左右（不包含舰载机等费用），2018年中国进口芯片的开支也就比军费多出来10艘辽宁舰吧！</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/JcJa1w.png" data-fancybox="group" data-caption="JcJa1w" class="fancybox"><img alt="JcJa1w" title="JcJa1w" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/JcJa1w.png" class="lazyload"></a></p><p>▲2019原油进口额1662亿美元图片来自：中商产业研究院</p><p>2019年中国集成电路进口额更是达到了3055亿美元（21048亿人民币），占中国整年总进口额的14.7%，同年中国原油进口额是1662亿美元约为芯片进口额的一半。</p><p>10年前美国杂志《连线》一篇文章开篇中写到：“试想，一个国家需要完全依靠从一个与之有着战事冲突或者经济往来不稳定的国家进口某种珍贵商品，而且没有这种商品，其整个社会将被迫停顿。假如这个国家是中国，与之有冲突的国家是美国，而该商品就是芯片。”</p><p>中国、美国、贸易冲突、芯片，《连线》杂志一语成谶。中方的反制措施当然很有必要，但是依然无法掩饰中国在芯片领域的落后。</p><p>指甲盖大小的芯片，已然成为这场大国较量中的主角。</p><h1 id="02-芯片怎么造？"><a href="#02-芯片怎么造？" class="headerlink" title="02 芯片怎么造？"></a>02 芯片怎么造？</h1><p>芯片是世界上最硬核的高科技产业，以纳米来计量的制造过程极为复杂，产业链涉及到50多个行业、数千个环节，世界上没有多少公司能够包办芯片生产的所有环节，芯片产业形成一条齐整的产业链。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/FHpv6U.png" data-fancybox="group" data-caption="FHpv6U" class="fancybox"><img alt="FHpv6U" title="FHpv6U" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/FHpv6U.png" class="lazyload"></a></p><p>总的来说有芯片设计、芯片制造、芯片封测、芯片材料、芯片设备这5大类，整个产业链条里，中国占据的份额极少。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/UE39V3.png" data-fancybox="group" data-caption="UE39V3" class="fancybox"><img alt="UE39V3" title="UE39V3" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/UE39V3.png" class="lazyload"></a><br>▲芯片设计公司华为海思排名第5</p><p> 为了方便大家更直观的了解芯片，不妨通过一个有意思的比方来讲。</p><p>我们如果把做芯片看作厨师做菜，那么做好一个菜，首先要有好的食材，然后你这个厨子做菜的炊具要好，最后当然是你这个厨子肚子里面有没有好的菜谱。</p><p>做芯片粗看一下也可以理解成这么几块，首先要有好的原材料，还要有好的生产制作工具，而且还要有优秀的芯片设计，这三个能力OK，好的芯片才能做出来。</p><p>先说“食材”部分</p><p>芯片听起来挺高级，制造原料实际是蓝星最不值钱的沙子。芯片主要的原材料是硅，硅元素在地球上的储量仅次于氧元素。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/QRGe2J.png" data-fancybox="group" data-caption="QRGe2J" class="fancybox"><img alt="QRGe2J" title="QRGe2J" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/QRGe2J.png" class="lazyload"></a></p><p>▲芯片的原材料就是长这样</p><p>如果你家门口有一堆沙，那么恭喜你已经有了制造高性能芯片的原材料，可也仅仅是原材料。</p><p>沙子很多，但是难得是要把沙子里的硅提纯出来，如果要生产高性能芯片，一般的硅纯度完全不够，需要纯度达到99.999999999%的电子级多晶硅，这么9不是我瞎打的，一共9个9。</p><p>也就是说在100万个硅原子中最多只允许存在1个杂质原子，这个尺度放大一些，也就是说5000吨的电子级多晶硅杂质含量仅仅有1枚1元硬币那么多。 商场里的金饰为了标榜自己的高纯度，经常会有千足金的标签，也就是说金的纯度是99.999%，和千足金类比，那99.999999999%纯度的电子级多晶硅可以改个名字叫亿足硅。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwfmGtZxFujZoHib4ljwHuAGXiaarGSaRwwYJN2WjHdrbJBIsibb6xtvwMQ/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwfmGtZxFujZoHib4ljwHuAGXiaarGSaRwwYJN2WjHdrbJBIsibb6xtvwMQ/640?wx_fmt=gif" class="lazyload"></a></p><p>▲沙子提纯单晶硅棒</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9Hwic69cHCQiblzTDFqwu25GQw9e7IGGGMOeUJrxBiaLR9IGPF5WHI2Akq2Q/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9Hwic69cHCQiblzTDFqwu25GQw9e7IGGGMOeUJrxBiaLR9IGPF5WHI2Akq2Q/640?wx_fmt=gif" class="lazyload"></a></p><p>▲硅棒切割成晶圆 得到电子级多晶硅锭以后，将圆柱形的硅锭横向切割成圆形的单个硅片，叫做晶圆，切割好的晶圆表面几乎是完美无瑕的。</p><p>造芯片最基础的电子级多晶硅就是中国还没有迈过去的一个坎。</p><p>大厨想要做好菜，缺了好食材不行。在芯片材料方面日本一家独大。拿硅晶圆全球份额占比来说，日本公司占去50%，中国台湾地区17%，德国15%，韩国9%，这5个地区占去了全球94%的份额，在这里中国大陆没有名字。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwwklCw956CQicqO7ALjnp5sU5ialia1THZl7Z2Qr006luXxTNQMF650Jfw/640?wx_fmt=jpeg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwwklCw956CQicqO7ALjnp5sU5ialia1THZl7Z2Qr006luXxTNQMF650Jfw/640?wx_fmt=jpeg" class="lazyload"></a></p><p>▲世界芯片设备份额占比来源：招商证券</p><p>“厨师的工具与菜谱”</p><p>有了好的原材料“硅晶圆”之后就轮到大厨用菜刀按照菜谱处理了。“菜刀”就是生产芯片的设备，菜谱就是芯片的设计。</p><p>芯片设计通俗来说就是“写菜谱”的。以2018年统计数据为例，世界芯片设计产业中美国的博通、高通、英伟达霸榜前3名，第4名是中国台湾地区的联发科，第5名是中国大陆的华为海思。</p><p>芯片核心外表看起来很光滑，可芯片刻蚀不只是一层，要经过多次重复刻蚀，形成一个分层的立体结构，打个比方，相当于在一平方厘米的土地上盖高层写字楼一样，难度可想而知。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Mgprdp.png" data-fancybox="group" data-caption="Mgprdp" class="fancybox"><img alt="Mgprdp" title="Mgprdp" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Mgprdp.png" class="lazyload"></a></p><p>▲看似光滑的芯片表面，其实有多层复杂电路设计</p><p>美国在全球芯片设计领域市场占有率是68%，中国台湾地区市场占有率是16%位居第2，中国大陆则以13%的市场占有率位居第3。中国占比13%嫌低？在芯片产业链中，相比其他阶段，中国在芯片设计中表现是最好的。</p><p>华为海思就是这么一个“写菜谱”的。去年华为发布最新的手机处理芯片麒麟990采用7纳米工艺拥有103亿晶体管，是世界上首个突破百亿晶体管的手机处理器，总体性能可以和高通和苹果同类产品比肩。</p><p>菜谱写完以后完成后交给大厨去做菜，大厨就是芯片制造企业。世界上三大芯片制造巨头分别是中国台湾地区的台积电、韩国的三星和美国的英特尔。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEHb16CLmlFAIBCkfyRdpzR4ylg1IZaL2wiacpplJIUMBU4zDzbESMrNw/640?wx_fmt=jpeg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEHb16CLmlFAIBCkfyRdpzR4ylg1IZaL2wiacpplJIUMBU4zDzbESMrNw/640?wx_fmt=jpeg" class="lazyload"></a></p><p>▲全球前五的芯片制造企业</p><p>以排名第一的台湾台积电为例，台积电主营业务就是芯片代工，台积电现在以自己的7nm芯片生产线称霸江湖。台积电仅凭芯片代工就达到了2000亿美元市值，和中国中石油差距只有不到10%。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/GcBhFr.png" data-fancybox="group" data-caption="GcBhFr" class="fancybox"><img alt="GcBhFr" title="GcBhFr" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/GcBhFr.png" class="lazyload"></a></p><p>▲台积电的标志就是一个晶圆</p><p>中国芯片制造方面顶尖的中芯国际只有28纳米的生产工艺，14纳米工艺才刚刚开始量产，中国芯片制造只能占到世界7.3%的份额。由于中国大陆没有能力生产这样的高规格芯片，华为的麒麟990只能交给中国台湾地区的台积电代工生产。</p><p>那么大厨有没有一把好刀呢？芯片制造设备公司就是生产“刀”的。可惜全球芯片设备制造产业集中在日本、荷兰、美国、韩国四个国家。而这把刀就是”光刻机“。</p><p>就是下图这个究极神器——光刻机，这个神器也是中国求之不得的。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/nhjH33.png" data-fancybox="group" data-caption="nhjH33" class="fancybox"><img alt="nhjH33" title="nhjH33" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/nhjH33.png" class="lazyload"></a></p><p>▲人类工业皇冠上的明珠——光刻机</p><p>荷兰的ASML基本垄断了高端光刻机领域，特别是最新的EUV极紫外光光刻机有生产7纳米制成的能力，ASML全球市场份额100%。 <a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwicNES06yDauIwzXxEPguOelUf90Cm9ousoXOC0qSdicuZknmVFqAHCdw/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfmzibMuEf9SmWxdYiaLdV9HwicNES06yDauIwzXxEPguOelUf90Cm9ousoXOC0qSdicuZknmVFqAHCdw/640?wx_fmt=gif" class="lazyload"></a></p><p>光刻机可以简单理解为：用“紫外线”作刀，对晶圆进行雕刻，让芯片上的电路变成人们想要的图案。四个字形容：“硅上雕花”</p><p>人类芯片的发展史其实就是芯片这几平方厘米的面积上锱铢必较的过程。1978年英特尔设计的8086处理器的刻蚀尺寸是3微米，2000年英特尔发布的奔腾4处理器刻蚀尺寸达到了0.09微米（90纳米）。</p><p>请大家记住90纳米这个数字，这是英特尔2000年的技术。之后2015年初发布的第五代酷睿处理器，刻蚀尺寸为14纳米。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/cSmQL1.png" data-fancybox="group" data-caption="cSmQL1" class="fancybox"><img alt="cSmQL1" title="cSmQL1" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/cSmQL1.png" class="lazyload"></a></p><p>▲英特尔90纳米的奔腾4处理器</p><p>2019年AMD发布了7nm的三代锐龙处理器，40年间人类处理器刻蚀尺寸从3微米（3000纳米）到7纳米，翻了400多倍。</p><p>在知乎上有这样一个问题“搞光刻机难还是搞氢弹难？” <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Cpjp8y.png" data-fancybox="group" data-caption="Cpjp8y" class="fancybox"><img alt="Cpjp8y" title="Cpjp8y" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Cpjp8y.png" class="lazyload"></a></p><p>光刻机被誉为”人类工业皇冠上的明珠“不是没有道理的。有人这样形容光刻机：这是一种集合了数学、光学、流体力学、高分子物理与化学、表面物理与化学、精密仪器、机械、自动化、软件、图像识别领域顶尖技术的产物。</p><p>先进的光刻机上有10w个零件，（一辆汽车大概是5000个零件）。</p><p>难道中国人就造不出自己的光刻机了吗？也不是，我们能造落后别人好几代的国产光刻机，别小看这个能力，关键时候，这个能力至少能保证国家的国防等重大领域不被卡脖子。</p><p>国内上海微电子芯片公司的光刻机水平最高，刚刚突破90纳米工艺，90纳米是英特尔2000年奔腾4处理器的水平，距离7纳米顶尖水平还有差好几个珠穆朗玛峰。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/OVNR2i.png" data-fancybox="group" data-caption="OVNR2i" class="fancybox"><img alt="OVNR2i" title="OVNR2i" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/OVNR2i.png" class="lazyload"></a></p><p>▲上海微电子芯片公司SSA600/20最高能达才达到90纳米分辨率</p><p>很多朋友可能会有疑问，既然造不出来，买不行么？咱国家现在也不差钱呀？</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEMFZC3Rm5ydWjgNQJWnootD0TBydzSa8zx2b6luf9iayOA0gzI3tKR9g/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEMFZC3Rm5ydWjgNQJWnootD0TBydzSa8zx2b6luf9iayOA0gzI3tKR9g/640?wx_fmt=gif" class="lazyload"></a></p><p>不好意思，有时候真不是有钱就能为所欲为的。想买？不给！</p><p>1996年，美国和他的小伙伴们签署了一个叫做《瓦森纳安排》的协定，没错这个协定就叫做“安排”，目的就是把那些不听美国话的国家给他安排的明明白白。</p><p>瓦森纳安排签署的国家有42个，美国、韩国、日本、德国、荷兰等国家都在列，囊括了几乎所有西方发达国家，中国、伊朗、利比亚等国被纳入受限制国家。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5eOs0L.png" data-fancybox="group" data-caption="5eOs0L" class="fancybox"><img alt="5eOs0L" title="5eOs0L" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5eOs0L.png" class="lazyload"></a></p><p>▲瓦森纳安排缔约国家世界上主要国家都在这里了</p><p>瓦森纳安排包含两份控制清单：一份是军民两用商品和技术清单，涵盖了先进材料、材料处理、电子器件、计算机、电信与信息安全、传感与激光、导航与航空电子仪器、船舶与海事设备、推进系统等9大类；另一份是军品清单，涵盖了各类武器弹药、设备及作战平台等共22类，清单长达234页。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/NcpXjN.png" data-fancybox="group" data-caption="NcpXjN" class="fancybox"><img alt="NcpXjN" title="NcpXjN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/NcpXjN.png" class="lazyload"></a></p><p>▲绿色为签署瓦森纳安排的国家</p><p>签约国家严禁对中国这些被安排国家清单中的高科技和武器。瓦森纳安排虽然允许成员国在自愿的基础上对各自的技术出口实施控制，但实际上成员国在重要的技术出口决策上受到美国的影响。光刻机之类的究极神器，中国想都不要想。</p><p>最狠的是瓦森纳安排还不断在调整，针对中国发展情况围追堵截。2020年初，瓦森纳安排管制品类扩大，新增了“可转为军用的半导体制造材料及网络软件”。实在是劳美国费心了，在遏制中国半导体产业的路上兢兢业业。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/dbtB4H.png" data-fancybox="group" data-caption="dbtB4H" class="fancybox"><img alt="dbtB4H" title="dbtB4H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/dbtB4H.png" class="lazyload"></a></p><p>如前文所说，荷兰的ASML公司在光刻机领域是当之无愧的老大，最新的极紫外光EUV光刻机能够生产7纳米的CPU，世界上只此一家别无分号，市场份额100%。现在世界主流处理器都开始步入7纳米行列，想生产7纳米芯片就必须有ASML的EUV光刻机。</p><p>既然完全垄断，那价格也是ASML自己说了算，价格不贵1亿美元一台。</p><p>1亿美元对中国来说不算啥，北京二环内几套房而已。一年3000亿美元芯片进口费用，拿几亿出来买EUV也不算啥。</p><p>有钱想买，可惜却买不到。</p><p>2018年中国最大的芯片制造企业向荷兰的ASML花了1.2亿美金订购了一台EUV光刻机，两年过去了，这台光刻机还没拿到荷兰的出口许可。而中国台湾的台积电去年从ASML拿到了十几台EUV光刻机。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/4SUFpJ.png" data-fancybox="group" data-caption="4SUFpJ" class="fancybox"><img alt="4SUFpJ" title="4SUFpJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/4SUFpJ.png" class="lazyload"></a></p><p>▲19年ASML的EUV光刻机一半交付台湾地区的台积电</p><p>就连最基础的电子级多晶硅中国有太多课要补。中国的工业硅、多晶硅产量世界第一，可制造芯片用的高纯度电子级多晶硅完全依赖进口。 回到上面那个问题：芯片难造还是氢弹难造？造好用的芯片难。</p><p>氢弹不是商品，不需要考虑市场，不需要考虑高速换代，不需要考虑企业生存，不需要考虑性价比，氢弹要考虑的是按下按钮的那一刻，炸响。</p><p>最终芯片经过一系列复杂的程序，最后的成品长下面这个样子：</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/cziYlN.png" data-fancybox="group" data-caption="cziYlN" class="fancybox"><img alt="cziYlN" title="cziYlN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/cziYlN.png" class="lazyload"></a></p><p>▲中间黑色部分就是芯片的核心</p><p>所以从上面的介绍，大家应该清楚了我们目前的处境，一个懂一些菜谱的厨师，没有好的食材，没有好的炊具，想做出上等佳肴来，太难了。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEpSnCmHbR2lshOn4aZOlmnDB2IdzlhrFezbqNpMhxHRRShAUm6icNvZg/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdMEpSnCmHbR2lshOn4aZOlmnDB2IdzlhrFezbqNpMhxHRRShAUm6icNvZg/640?wx_fmt=gif" class="lazyload"></a></p><h1 id="03-中国对“芯”的渴望"><a href="#03-中国对“芯”的渴望" class="headerlink" title="03 中国对“芯”的渴望"></a>03 中国对“芯”的渴望</h1><p>有人说，中国为什么不早点搞自己的芯片？搞过。 现在美国对华为封锁，让很多人开始关心中国芯片的发展历程，其实20年前中国搞芯片的热情比现在还要大。 20年前我们国家提出口号，要发展自己的半导体产业。2000年左右是中国芯片发展的黄金时期，1999年北大研制了中国第一个完全自主研发的CPU架构。</p><p>这是中国人最荣耀的时刻，《人民日报》在20世纪的最后一天刊文，称这一成果是“献给新千年的礼物”。可尚在摇篮里的中国芯片毁在了一个骗子手里。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q2Dz51.png" data-fancybox="group" data-caption="Q2Dz51" class="fancybox"><img alt="Q2Dz51" title="Q2Dz51" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Q2Dz51.png" class="lazyload"></a></p><p>▲人民日报：献给新千年的礼物 2003年，上海交大微电子学院的院长陈进，带领自己的团队搞出了一个芯片，叫做“汉芯一号”。有关部门对“汉芯一号”做了测试，得出结论让所有人震惊：汉芯一号已经接近了国际先进水平，一些方面甚至实现了超越。</p><p>这对当时幼小的中国半导体产业来说，就是饿极了想吃个馒头，没想到天上掉下来一大盆红烧肉。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/d84pMO.png" data-fancybox="group" data-caption="d84pMO" class="fancybox"><img alt="d84pMO" title="d84pMO" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/d84pMO.png" class="lazyload"></a></p><p>▲汉芯一号处理器</p><p>陈进被视为是汉芯一号的发明人，更是荣誉加身，授予长江学者称号，随后陈进的“汉芯二号”“汉芯三号”“汉芯四号”项目成功上马，陈进也得到了国家的数亿科研经费。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/7HP7gI.png" data-fancybox="group" data-caption="7HP7gI" class="fancybox"><img alt="7HP7gI" title="7HP7gI" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/7HP7gI.png" class="lazyload"></a></p><p>▲陈进其人</p><p>关于汉芯的荣誉到了2006年戛然而止。清华大学论坛上一个名叫“汉芯黑幕”的帖子曝光汉芯造假。</p><p>经过调查，汉芯一号根本就是一个骗局，这枚举世瞩目的芯片其实是陈进从美国摩托罗拉买的56800芯片，找几个装修师傅打磨掉摩托罗拉的字样，再印上“汉芯一号”，就变成了中国自主研发的芯片。</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5gXD6H.png" data-fancybox="group" data-caption="5gXD6H" class="fancybox"><img alt="5gXD6H" title="5gXD6H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5gXD6H.png" class="lazyload"></a></p><p>▲打磨汉芯的民工日记 甚至负责打磨字样的师傅声称自己负责了汉芯的外观设计，这可是中国最有牌面的民工师傅了。</p><p>民工师傅牛皮吹爽了，可中国芯片很不爽。从这以后中国没有人再敢去搞芯片，谁知道你是不是搞得假的？</p><p>新项目上马的时候主管部门审核也变得极为谨慎，谁知道你是不是想套经费？一盆假的“红烧肉”，让中国芯片连吃“馒头”都变得谨慎了起来。 04</p><p>芯片，勒紧裤腰带也得搞</p><p> 2007年秋天，以色列出动战斗机炸毁了叙利亚的一处核设施。</p><p>出动的是F15/F16这样的非隐身战斗机，但是叙利亚严密的防空体系毫无反应。有趣的是，在以色列突袭前一天叙利亚的防空系统雷达刚好坏了，本来以为是正常的损坏，最后才发现是雷达CPU的后门引起的。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y0qwFG.png" data-fancybox="group" data-caption="Y0qwFG" class="fancybox"><img alt="Y0qwFG" title="Y0qwFG" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/Y0qwFG.png" class="lazyload"></a></p><p>▲叙利亚设施被摧毁</p><p>叙利亚不是最后一个。2013年伊朗核离心机几千台莫名其妙损坏，几千台离心机疯狂开转，转坏为止。最后发现也是核离心机控制系统出了问题，处理器早就被动了手脚。 <a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/p7DtF4.png" data-fancybox="group" data-caption="p7DtF4" class="fancybox"><img alt="p7DtF4" title="p7DtF4" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/p7DtF4.png" class="lazyload"></a></p><p>现在轮到了中国。</p><p>日经中文网报道，其实在去年美国开始针对华为之后，日本人通过拆解华为手机后，发现华为最高端新机型中国产零件的使用率已经从25%左右大幅上涨到42%，与此同时美国产零部件则从11%左右降到了约1%。</p><p>今天，华为在心声社区发了一张内涵颇深的图</p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/w1Jno7.png" data-fancybox="group" data-caption="w1Jno7" class="fancybox"><img alt="w1Jno7" title="w1Jno7" data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/w1Jno7.png" class="lazyload"></a></p><p>让我想起一句名言，大意是“阻碍弱者前进路上的花岗岩，会成为强者脚下的垫脚石。“</p><p>想当年美国人用原子弹威胁过我们，苏联人叫嚣着要对我们实施外科手术式的核打击，尽管这样，咱们屈服了吗？没有。</p><p>我们国家当年一穷二白不都照样挺过来么，还搞出了自己的核武器，新中国成立以来就从没怕过谁威胁。</p><p><a href="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdME4PBDdADOYHJ9w0LgrIEkL6d5A04YftawAdSr4NugKUwBG2PYtthLbA/640?wx_fmt=gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://i1.wp.com/mmbiz.qpic.cn/mmbiz_gif/RIQJDM7oiajfQBuKEMvicG8vAan91jBdME4PBDdADOYHJ9w0LgrIEkL6d5A04YftawAdSr4NugKUwBG2PYtthLbA/640?wx_fmt=gif" class="lazyload"></a></p><p>▲又想威胁我？NO！去你妈的</p><p>中国人的芯片之路必然艰辛，除了义无反顾，我们别无选择。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 华为 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to modify ova file</title>
      <link href="/2020/01/10/55d2/"/>
      <url>/2020/01/10/55d2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Extract-the-ova-file"><a href="#Extract-the-ova-file" class="headerlink" title="Extract the ova file"></a>Extract the ova file</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf vmName.ova</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Modify-ovf-for-some-invalid-tag"><a href="#Modify-ovf-for-some-invalid-tag" class="headerlink" title="Modify ovf for some invalid tag"></a>Modify ovf for some invalid tag</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">elixir</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vi vmName.ovf</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Re-calculate-sha1-from-vmName-ovf-then-modify-the-hash-value-of-vmName-mf"><a href="#Re-calculate-sha1-from-vmName-ovf-then-modify-the-hash-value-of-vmName-mf" class="headerlink" title="Re-calculate sha1 from vmName.ovf, then modify the hash value of vmName.mf"></a>Re-calculate sha1 from vmName.ovf, then modify the hash value of vmName.mf</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sha1sum vmName.ovf</span><br><span class="line">$ vi vmName.mf</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Package-to-ova-which-source-files-from-vmName-ovf-vmName-disk1-vmdk-vmName-mf"><a href="#Package-to-ova-which-source-files-from-vmName-ovf-vmName-disk1-vmdk-vmName-mf" class="headerlink" title="Package to ova which source files from [vmName.ovf, vmName-disk1.vmdk, vmName.mf]"></a>Package to ova which source files from [vmName.ovf, vmName-disk1.vmdk, vmName.mf]</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf vmName-NEW.ova vmName.ovf vmName-disk1.vmdk vmName.mf</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> ova </tag>
            
            <tag> vmdk </tag>
            
            <tag> ovftool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP系统完整性保护怎么禁用？SIP系统完整性关闭方法</title>
      <link href="/2020/01/08/69ef/"/>
      <url>/2020/01/08/69ef/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><blockquote><p>许多Mac用户反应，装了部分软件后打不开，那可能是sip系统完整性没有关闭。下面我们就来看一下如何关闭sip系统完整性。</p></blockquote><blockquote><p>系统完整性保护是 OS X El Capitan 及更高版本所采用的一项安全技术，能够帮助防止潜在恶意软件修改 Mac 上受保护的文件和文件夹。系统完整性保护可以限制 root 用户帐户，以及 root 用户能够在 Mac 操作系统的受保护部分完成的操作。</p></blockquote><p>上面是官方的介绍，说的有点吓人。<code>我们换一个说法，SIP类似windows的防火墙，安卓手机Root</code>，这应该可以解决很多的人困惑。</p><p>苹果应用商店的软件都是用沙盒运行的，无法访问系统文件，所以大部分软件都是阉割版的。很多优秀软件没有在Apple Store上架就是因为需要SIP系统权限，苹果不过审核，一些软件采取双版本，分为官方版和App Store版，App Store 是精简单版，全功能版需要单独下载，都是这个原因。比如腾讯柠檬之类的系统应用。</p><ol><li>macOS默认只允许运行通过苹果应用商店下载的软件。</li><li>macOS如果想安装第三方应用需要到<code>系统偏好设置 》 安全性与隐私 》 通用</code>中开启允许<code>App Store 和被认可的开发者</code>选项</li><li>macOS如果想安装第三方未签名的应用需要在终端中执行命令行 <code>sudo spctl --master-disable</code> 开启<code>任何来源</code>选项，<code>系统偏好设置 》 安全性与隐私 》 通用</code> 中默认是没有这个选项的。</li><li>macOS如果想安装一些反编译破解的应用需要关闭SIP。</li></ol><p>通过上面大家也应该能看出来，苹果为了大家的安全煞费苦心，但是事情仅仅真的是只是大家看到的这样的吗？</p><p>你想要安装任意来源的软件，需要打开终端输入命令才可以，你要关闭SIP需要关机才可以操作（在macOS早期系统是不需要关机的），为什么越来越麻烦呢？</p><p>上架到苹果应用商店，每卖一次，苹果抽成1/3。比如你软件卖100元，苹果抽33.33元。</p><p>所谓的认可的开发者就是去苹果买开发者账号，然后用开发者账号对应用进行签名。购买苹果的开发者账号，个人99美元/年，约合人民币688元/年。企业299美元/年，约合人民币2000元/年。</p><p>买完对应用签名一下就不是恶意软件了，你说搞笑不搞笑？</p><p>不搞得麻烦一点，怎么让小白害怕，不搞得麻烦一点，苹果商店怎么赚钱？真是万恶的资本主义！！！</p><hr><p>废话不多说了，切入正题吧。</p><p><code>目前最新的10.15.x系统使用破解软件基本上都需要关闭SIP才可以打开，就算是正版软件也有大量需要关闭SIP的，是需要永久关闭！</code>，不要再问类似 [Sip关了还能再打开吗] 这样的问题了。</p><h5 id="看了上面的说明，还是不放心开放系统权限，那你有下面的选择，"><a href="#看了上面的说明，还是不放心开放系统权限，那你有下面的选择，" class="headerlink" title="看了上面的说明，还是不放心开放系统权限，那你有下面的选择，"></a>看了上面的说明，还是不放心开放系统权限，那你有下面的选择，</h5><ul><li>我不绝不关闭SIP，我不要用这个软件了！</li></ul><h2 id="在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护"><a href="#在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护" class="headerlink" title="在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护?"></a>在sip系统完整性关闭前，我们先检查是否启用了SIP系统完整性保护?</h2><p>打开终端输入以下命令并回车</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil status</span><br></pre></td></tr></tbody></table></figure></div><p>你会看到以下信息中的一个，指示SIP状态</p><p>已打开:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">erlang</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight erlang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System Integrity Protection status: enabled.</span><br></pre></td></tr></tbody></table></figure></div><p>已关闭:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">fortran</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System Integrity Protection <span class="keyword">status</span>: disabled</span><br></pre></td></tr></tbody></table></figure></div><p>![image-20200108180318851](/Users/dhrsong/Library/Application Support/typora-user-images/image-20200108180318851.png)</p><h2 id="Mac上-sip系统完整性关闭方法具体操作步骤如下："><a href="#Mac上-sip系统完整性关闭方法具体操作步骤如下：" class="headerlink" title="Mac上 sip系统完整性关闭方法具体操作步骤如下："></a>Mac上 sip系统完整性关闭方法具体操作步骤如下：</h2><ol><li>关机，然后重新启动你的Mac电脑，在开机时一直按住Command+R迸入Recovery模式。</li><li>进入Recovery模式后打开终端，如图：</li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NsiF6f.png" data-fancybox="group" data-caption="NsiF6f" class="fancybox"><img alt="NsiF6f" title="NsiF6f" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NsiF6f.png" class="lazyload"></a></p><ol><li>在终端上输入命令 csrutil disable然后回车。</li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/JEsowh.png" data-fancybox="group" data-caption="JEsowh" class="fancybox"><img alt="JEsowh" title="JEsowh" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/JEsowh.png" class="lazyload"></a></p><ol><li>点击左上角苹果图标，再点击重新启动</li></ol></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> SIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Spring全家桶7大知识点</title>
      <link href="/2019/12/30/9b0a/"/>
      <url>/2019/12/30/9b0a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Spring框架自诞生以来一直备受开发者青睐，有人亲切的称之为：Spring 全家桶。它包括SpringMVC、SpringBoot、Spring Cloud、Spring Cloud Dataflow等解决方案。<br>很多研发人员把spring看作心目中最好的java项目，没有之一。<br>所以这是重点也是难点，工作中必须会，面试时肯定考。</p><p><strong>那么，今天花费10分钟，梳理Spring框架相关知识。</strong></p><h1 id="Spring知识点-汇总"><a href="#Spring知识点-汇总" class="headerlink" title="Spring知识点-汇总"></a>Spring知识点-汇总</h1><p>spring系列包含非常多的项目，可以满足java开发中的方方面面。先来看常用框架的知识点汇总，如图：<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/vaNdQc.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/vaNdQc.jpg" class="lazyload"></a></p><h1 id="一、5个常用的spring框架"><a href="#一、5个常用的spring框架" class="headerlink" title="一、5个常用的spring框架"></a><strong>一、5个常用的spring框架</strong></h1><h2 id="spring-framework"><a href="#spring-framework" class="headerlink" title="spring framework"></a>spring framework</h2><p>也就是我们经常说的spring框架，包括了ioc依赖注入，Context上下文、bean管理、springmvc等众多功能模块，其它spring项目比如spring boot也会依赖spring框架。</p><h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p>它的目标是简化Spring应用和服务的创建、开发与部署，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用的微服务功能，可以和spring cloud联合部署。<br>Spring Boot的核心思想是约定大于配置，应用只需要很少的配置即可，简化了应用开发模式。</p><h2 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h2><p>是一个数据访问及操作的工具集，封装了多种数据源的操作能力，包括：jdbc、Redis、MongoDB等。</p><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>是一套完整的微服务解决方案，是一系列不同功能的微服务框架的集合。Spring Cloud基于Spring Boot，简化了分布式系统的开发，集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。比如sleuth提供了全链路追踪能力，Netflix套件提供了hystrix熔断器、zuul网关等众多的治理组件。config组件提供了动态配置能力，bus组件支持使用RabbitMQ、kafka、Activemq等消息队列，实现分布式服务之间的事件通信。</p><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>主要用于快速构建安全的应用程序和服务，在Spring Boot和Spring Security OAuth2的基础上，可以快速实现常见安全模型，如单点登录，令牌中继和令牌交换。你可以了解一下oauth2授权机制和jwt认证方式。oauth2是一种授权机制，规定了完备的授权、认证流程。JWT全称是JSON Web Token，是一种把认证信息包含在token中的认证实现，oauth2授权机制中就可以应用jwt来作为认证的具体实现方法。</p><h1 id="二、Struts的具体作用"><a href="#二、Struts的具体作用" class="headerlink" title="二、Struts的具体作用"></a>二、Struts的具体作用</h1><p>struts是曾经非常火爆的web组合ssh中的控制层。我们知道web服务一般都采用MVC分层模型构建，就是model层负责内部数据模型，controller负责请求的分发控制，view层负责返回给用户展示的视图。struts实现的就是其中控制层的角色。<br>Struts采用Filter实现，针对类进行拦截，每次请求就会创建一个Action。使用struts的SSH组合已经逐渐被使用springMVC的SSM组合代替，也就是Spring-MVC+Spring+MyBatis的组合，一方面原因是由于struts对几次安全漏洞的处理，让大家对struts的信心受到影响；另一方面，springmvc更加的灵活，不需要额外配置，不存在和spring整合等问题，使用更加方便，所以建议以SSM框架的学习为主。</p><h1 id="三、常用的ORM框架"><a href="#三、常用的ORM框架" class="headerlink" title="三、常用的ORM框架"></a>三、常用的ORM框架</h1><p>ORM就是对象关系匹配，是为了解决面向对象与关系数据库存在的互不匹配的问题。简单来说，就是把关系数据库中的数据转换成面向对象程序中的对象。<br>常用的ORM框架有Hibernate和MyBatis，也就是ssh组合和ssm组合中的h与m。<br><strong>它们的特点和区别如下：</strong><br>Hibernate对数据库结构提供了完整的封装，实现了POJO对象与数据库表之间的映射，能够自动生成并执行SQL语句。只要定义了POJO 到数据库表的映射关系，就可以通过Hibernate提供的方法完成数据库操作。Hibernate符合JPA规范，就是Java持久层API。<br>mybatis通过映射配置文件，将SQL所需的参数和返回的结果字段映射到指定对象，mybatis不会自动生成sql，需要自己定义sql语句，不过更方便对sql语句进行优化。<br>总结起来：</p><ol><li>hibernate配置要比mybatis复杂的多，学习成本也比mybatis高。mybatis，简单、高效、灵活，但是需要自己维护sql；</li><li>hibernate功能强大、全自动、适配不同数据库，但是非常复杂，灵活性稍差。</li></ol><h1 id="四、Netty简介"><a href="#四、Netty简介" class="headerlink" title="四、Netty简介"></a>四、Netty简介</h1><p>Netty是一个高性能的异步事件驱动的网络通信框架，Netty对JDK原生NIO进行封装，简化了网络服务的开发。下文会详细讲解<br>另外，同类型的框架还有mina、grizzly，不过目前使用的相对较少，一般不会在面试中出现，可以作为兴趣简单了解。</p><h1 id="五、RPC服务"><a href="#五、RPC服务" class="headerlink" title="五、RPC服务"></a>五、RPC服务</h1><p>Motan、Dubbo、gRPC都是比较常用的高性能rpc框架，可以提供完善的服务治理能力，java版本的通信层都是基于前面提到的Netty实现。它们的特点稍后介绍。</p><h1 id="六、其他常用框架"><a href="#六、其他常用框架" class="headerlink" title="六、其他常用框架"></a>六、其他常用框架</h1><p>jersy和restEasy都是可以快速开发restful服务的框架。<br>和springmvc相比，这两个框架都是基于jax-rs标准，而springmvcs基于servlet，使用自己构建的API，是两个不同的标准。<br>shiro框架是一个与spring security类似的开源的权限管理框架，用于访问授权、认证、加密及会话管理。能够支持单机与分布式session管理。<br>相比security，shiro更加简单易用。</p><p><strong>本篇文章将重点阐述Spring相关知识点，其他框架请期待下一篇</strong></p><h1 id="Spring知识点-详解"><a href="#Spring知识点-详解" class="headerlink" title="Spring知识点-详解"></a>Spring知识点-详解</h1><h2 id="一、spring基本概念"><a href="#一、spring基本概念" class="headerlink" title="一、spring基本概念"></a>一、spring基本概念</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PsImmN.jpg" data-fancybox="group" data-caption="PsImmN" class="fancybox"><img alt="PsImmN" title="PsImmN" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PsImmN.jpg" class="lazyload"></a><br>Sping中的基本概念<br>本文涉及的流程与实现默认都是基于最新的5.x版本。<br>spring中的几个重要概念如下：</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC，就是控制反转，如最左边，拿公司招聘岗位来举例：<br>假设一个公司有产品、研发、测试等岗位。如果是公司根据岗位要求，逐个安排人选，如图中向下的箭头，这是正向流程。如果反过来，不用公司来安排候选人，而是由第三方猎头来匹配岗位和候选人，然后进行推荐，如图中向上的箭头，这就是控制反转。<br>在spring中，对象的属性是由对象自己创建的，就是正向流程；如果属性不是对象创建，而是由spring来自动进行装配，就是控制反转。这里的DI也就是依赖注入，就是实现控制反转的方式。正向流程导致了对象于对象之间的高耦合，IOC可以解决对象耦合的问题，有利于功能的复用，能够使程序的结构变得非常灵活。</p><h3 id="context上下文和bean"><a href="#context上下文和bean" class="headerlink" title="context上下文和bean"></a>context上下文和bean</h3><p>spring进行IOC实现时使用的有两个概念：context上下文和bean。<br>如中间图所示，所有被spring管理的、由spring创建的、用于依赖注入的对象，就叫做一个bean。Spring创建并完成依赖注入后，所有bean统一放在一个叫做context的上下文中进行管理。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP就是面向切面编程。如右面的图，一般程序执行流程是从controller层调用service层、然后service层调用DAO层访问数据，最后在逐层返回结果。<br>这个是图中向下箭头所示的按程序执行顺序的纵向处理。但是，一个系统中会有多个不同的服务，例如用户服务、商品信息服务等等，每个服务的controller层都需要验证参数，都需要处理异常，如果按照图中红色的部分，对不同服务的纵向处理流程进行横切，在每个切面上完成通用的功能，例如身份认证、验证参数、处理异常等等、这样就不用在每个服务中都写相同的逻辑了，这就是AOP思想解决的问题。<br>AOP以功能进行划分，对服务顺序执行流程中的不同位置进行横切，完成各服务共同需要实现的功能。</p><h2 id="二、spring框架"><a href="#二、spring框架" class="headerlink" title="二、spring框架"></a>二、spring框架</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/GCCqBa.jpg" data-fancybox="group" data-caption="GCCqBa" class="fancybox"><img alt="GCCqBa" title="GCCqBa" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/GCCqBa.jpg" class="lazyload"></a><br>Spring框架组件<br>上图列出了spring框架主要包含的组件。这张图来自spring4.x的文档。目前最新的5.x版本中右面的portlet组件已经被废弃掉，同时增加了用于异步响应式处理的WebFlux组件。<br>并不需要对所有的组件都详细了解，只需重点了解最常用的几个组件实现，以及知道每个组件用来实现哪一类功能。<br>图中红框是比较重要的组件，core组件是spring所有组件的核心；bean组件和context组件我刚才提到了，是实现IOC和依赖注入的基础；AOP组件用来实现面向切面编程；web组件包括springmvc是web服务的控制层实现。</p><h2 id="三、spring中机制和实现"><a href="#三、spring中机制和实现" class="headerlink" title="三、spring中机制和实现"></a>三、spring中机制和实现</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/cMVJi5.jpg" data-fancybox="group" data-caption="cMVJi5" class="fancybox"><img alt="cMVJi5" title="cMVJi5" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/cMVJi5.jpg" class="lazyload"></a></p><h3 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h3><p>AOP的实现是通过代理模式，在调用对象的某个方法时，执行插入的切面逻辑。实现的方式有动态代理也叫运行时增强，比如jdk代理、CGLIB；静态代理是在编译时进行织入或类加载时进行织入，比如AspectJ。<br>关于AOP还需要了解一下对应的Aspect、pointcut、advice等注解和具体使用方式。</p><h3 id="placeHolder动态替换"><a href="#placeHolder动态替换" class="headerlink" title="placeHolder动态替换"></a>placeHolder动态替换</h3><p>主要需要了解替换发生的时间，是在bean definition创建完成后，bean初始化之前，是通过实现BeanFactoryPostProcessor接口实现的。主要实现方式有PropertyPlaceholderConfigurer和PropertySourcesPlaceholderConfigurer。这两个类实现逻辑不一样，spring boot使用PropertySourcesPlaceholderConfigurer实现。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>需要了解spring 中对事务规定的隔离类型和事务传播类型。要知道事务的隔离级别是由具体的数据库来实现的，在数据库部分我会详细介绍。<br>事务的传播类型，可以重点了解最常用的REQUIRED和SUPPORTS类型。</p><h3 id="核心接口类"><a href="#核心接口类" class="headerlink" title="核心接口类"></a>核心接口类</h3><ul><li>ApplicationContext保存了ioc的整个应用上下文，可以通过其中的beanfactory获取到任意到bean；</li><li>BeanFactory主要的作用是根据bean definition来创建具体的bean；</li><li>BeanWrapper是对Bean的包装，一般情况下是在spring ioc内部使用，提供了访问bean的属性值、属性编辑器注册、类型转换等功能，方便ioc容器用统一的方式来访问bean的属性；</li><li>FactoryBean通过getObject方法返回实际的bean对象，例如motan框架中referer对service的动态代理就是通过FactoryBean来实现的。<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3>bean的scope是指bean的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从beanFactory中获取bean都会创建一个新的bean。<br>request、session、global-session是在web服务中使用的scope，request每次请求都创建一个实例，session是在一个会话周期内保证只有一个实例。<br>global-session在5.x版本中已经不在使用，同时增加了Application和Websocket两种scope，分别保证在一个ServletContext与一个WebSocket中只创建一个实例。<h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3>spring的事件机制需要知道spring定义的五种标准事件，具体事件可见上图，了解如何自定义事件和实现对应的applicationListener来处理自定义事件。<h2 id="spring应用相关"><a href="#spring应用相关" class="headerlink" title="spring应用相关"></a>spring应用相关</h2><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/ScLmyQ.jpg" data-fancybox="group" data-caption="ScLmyQ" class="fancybox"><img alt="ScLmyQ" title="ScLmyQ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/ScLmyQ.jpg" class="lazyload"></a><h3 id="常用注释"><a href="#常用注释" class="headerlink" title="常用注释"></a>常用注释</h3><h4 id="类型类注释"><a href="#类型类注释" class="headerlink" title="类型类注释"></a>类型类注释</h4>类型类注释包括controller、service等，需要重点了解<br>其中component和bean注解的区别如下：<ul><li>@Component注解在类上使用表明这个类是个组件类，需要Spring为这个类创建bean。</li><li>@Bean注解使用在方法上，告诉Spring这个方法将会返回一个Bean对象，需要把返回的对象注册到Spring的应用上下文中。<h4 id="设置类注解"><a href="#设置类注解" class="headerlink" title="设置类注解"></a>设置类注解</h4>重点了解@Autowire和@Qualifier以及bytype、byname等不同的自动装配机制。<h4 id="web类注解"><a href="#web类注解" class="headerlink" title="web类注解"></a>web类注解</h4>主要以了解为主，关注@RequestMapping、@GetMapping、@PostMapping等路径匹配注解，以及@PathVariable、@RequestParam 等参数获取注解。<h4 id="功能类注解"><a href="#功能类注解" class="headerlink" title="功能类注解"></a>功能类注解</h4>包括@ImportResource引用配置、@ComponentScan注解自动扫描、@Transactional事务注解等等，这里不一一介绍了。<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3>需要了解配置spring的几种方式，xml文件配置、注解配置和使用api进行配置。<br>自动装配机制需要了解按类型匹配进行自动装配，按bean名称进行自动装配，构造器中的自动装配和自动检测等主要的四种方式。<br>还需要了解一下list、set、map等集合类属性的配置方式以及内部bean的使用。</li></ul></li></ul><h2 id="四、Spring的Context的初始化流程"><a href="#四、Spring的Context的初始化流程" class="headerlink" title="四、Spring的Context的初始化流程"></a>四、Spring的Context的初始化流程</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PjJyQL.jpg" data-fancybox="group" data-caption="PjJyQL" class="fancybox"><img alt="PjJyQL" title="PjJyQL" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/PjJyQL.jpg" class="lazyload"></a><br>Spring Context初始化流程<br>图中左上角是三种类型的context，xml配置方式的context、springboot的context和web服务的context。不论哪种context，创建后都会调用到AbstractApplicationContext类的refresh方法，这个方法是我们要重点分析的。</p><h3 id="refresh方法中，操作共分13步"><a href="#refresh方法中，操作共分13步" class="headerlink" title="refresh方法中，操作共分13步"></a>refresh方法中，操作共分13步</h3><ol><li>对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符，这个动作根据子类的需求由子类来执行，然后验证是否缺失必要的properties；</li><li>刷新并获得内部的bean factory；</li><li>对bean factory进行准备工作，比如设置类加载器和后置处理器、配置不进行自动装配的类型、注册默认的环境bean；</li><li>为context的子类提供后置处理bean factory的扩展能力。如果子类想在bean定义加载完成后，开始初始化上下文之前做一些特殊逻辑，可以复写这个方法；</li><li>执行context中注册的bean factory后缀处理器；<blockquote><p>注：这里有两种后置处理器，一种是可以注册bean的后缀处理器，另一种是针对bean factory进行处理的后置处理器。执行的顺序是，先按优先级执行可注册bean的处理器，在按优先级执行针对beanfactory的处理器。对springboot来说，这一步会进行注解bean definition的解析。流程如右面小框中所示，由ConfigurationClassPostProcessor触发、由ClassPathBeanDefinitionScanner解析并注册到bean factory。</p></blockquote></li><li>按优先级顺序在beanfactory中注册bean的后缀处理器，bean后置处理器可以在bean初始化前、后执行处理；</li><li>初始化消息源，消息源用来支持消息的国际化；</li><li>初始化应用事件广播器。事件广播器用来向applicationListener通知各种应用产生的事件，是一个标准的观察者模式；</li><li>是留给子类的扩展步骤，用来让特定的context子类初始化其他的bean；</li><li>把实现了ApplicationListener的bean注册到事件广播器，并对广播器中的早期未广播事件进行通知；</li><li>冻结所有bean描述信息的修改，实例化非延迟加载的单例bean；</li><li>完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件；</li><li>在finally中，执行第十三步，重置公共的缓存，比如ReflectionUtils中的缓存、AnnotationUtils中的缓存等等；</li></ol><p>至此，spring的context初始化完成。这里仅介绍了最主要的主流程，建议课后阅读源码来复习这个知识点，补全细节。</p><h2 id="五、Spring中bean的生命周期"><a href="#五、Spring中bean的生命周期" class="headerlink" title="五、Spring中bean的生命周期"></a>五、Spring中bean的生命周期</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/1BcbwS.jpg" data-fancybox="group" data-caption="1BcbwS" class="fancybox"><img alt="1BcbwS" title="1BcbwS" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/1BcbwS.jpg" class="lazyload"></a><br>Spring中bean的生命周期<br><strong>面试中经常问到的bean的生命周期，先看绿色的部分，bean的创建过程:</strong></p><ol><li>调用bean的构造方法创建bean；</li><li>通过反射调用setter方法进行属性的依赖注入；</li><li>如果实现BeanNameAware接口的话，会设置bean的name；</li><li>如果实现了BeanFactoryAware，会把bean factory设置给bean；</li><li>如果实现了ApplicationContextAware，会给bean设置ApplictionContext；</li><li>如果实现了BeanPostProcessor接口，则执行前置处理方法；</li><li>实现了InitializingBean接口的话，执行afterPropertiesSet方法；</li><li>执行自定义的init方法；</li><li>执行BeanPostProcessor接口的后置处理方法。</li></ol><p>这时，就完成了bean的创建过程。在使用完bean需要销毁时，会先执行DisposableBean接口的destroy方法，然后在执行自定义的destroy方法。这部分也建议阅读源码加深理解。</p><h2 id="六、Spring扩展接口"><a href="#六、Spring扩展接口" class="headerlink" title="六、Spring扩展接口"></a>六、Spring扩展接口</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/7sNv8H.jpg" data-fancybox="group" data-caption="7sNv8H" class="fancybox"><img alt="7sNv8H" title="7sNv8H" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/7sNv8H.jpg" class="lazyload"></a><br>Spring扩展接口对spring进行定制化功能扩展时，可以选择如下一些扩展点：</p><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>是beanFactory后置处理器，支持在bean factory标准初始化完成后，对bean factory进行一些额外处理。在讲context初始化流程时介绍过，这时所有的bean的描述信息已经加载完毕，但是还没有进行bean初始化。例如前面提到的PropertyPlaceholderConfigurer，就是在这个扩展点上对bean属性中的占位符进行替换。</p><h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p>它扩展自BeanFactoryPostProcessor，在执行BeanFactoryPostProcessor的功能前，提供了可以添加bean definition的能力，允许在初始化一般bean前，注册额外的bean。例如可以在这里根据bean的scope创建一个新的代理bean。</p><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>提供了在bean初始化之前和之后插入自定义逻辑的能力。与BeanFactoryPostProcessor的区别是处理的对象不同，BeanFactoryPostProcessor是对beanfactory进行处理，BeanPostProcessor是对bean进行处理。<br><strong>注：上面这三个扩展点，可以通过实现Ordered和PriorityOrdered接口来指定执行顺序。实现PriorityOrdered接口的processor会先于实现Ordered接口的执行。</strong></p><h3 id="ApplicationContextAware"><a href="#ApplicationContextAware" class="headerlink" title="ApplicationContextAware"></a>ApplicationContextAware</h3><p>可以获得ApplicationContext及其中的bean，当需要在代码中动态获取bean时，可以通过实现这个接口来实现。</p><h3 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h3><p>可以在bean初始化完成，所有属性设置完成后执行特定逻辑，例如对自动装配对属性进行验证等等。</p><h3 id="DisposableBean"><a href="#DisposableBean" class="headerlink" title="DisposableBean"></a>DisposableBean</h3><p>用于在bean被销毁前执行特定的逻辑，例如做一些回收工作等。</p><h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p>用来监听spring的标准应用事件或者自定义事件。</p><h2 id="七、springboot相关的知识点"><a href="#七、springboot相关的知识点" class="headerlink" title="七、springboot相关的知识点"></a>七、springboot相关的知识点</h2><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/UkH2xV.jpg" data-fancybox="group" data-caption="UkH2xV" class="fancybox"><img alt="UkH2xV" title="UkH2xV" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/UkH2xV.jpg" class="lazyload"></a></p><h3 id="1-启动流程"><a href="#1-启动流程" class="headerlink" title="1. 启动流程"></a>1. 启动流程</h3><p>主要步骤首先要配置environment，然后准备context上下文，包括执行applicationContext的后置处理、初始化initializer、通知listener处理contextPrepared和contextLoaded事件。最后执行refreshContext，也就是前面介绍过的AbstractApplicationContext类的refresh方法。</p><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p>然后要知道在Spring Boot中有两种上下文，一种是bootstrap, 另外一种是application。<br>bootstrap是应用程序的父上下文，也就是说bootstrap会先于applicaton加载。bootstrap主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。bootstrap里面的属性会优先加载，默认也不能被本地相同配置覆盖。</p><h3 id="3-注解"><a href="#3-注解" class="headerlink" title="3. 注解"></a>3. 注解</h3><p>@SpringBootApplication包含了@ComponentScan、@EnableAutoConfiguration、@SpringBootConfiguration三个注解。 而@SpringBootConfiguration注解包含了@Configuration注解。也就是springboot的自动配置功能。@Conditional注解就是控制自动配置的生效条件的注解，例如bean或class存在、不存在时进行配置，当满足条件时进行配置等等。</p><h3 id="4-特色模块"><a href="#4-特色模块" class="headerlink" title="4. 特色模块"></a>4. 特色模块</h3><ul><li>starter是springboot提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由Spring Boot自动配置进行bean的创建。例如需要使用web功能时，只需要在依赖中引入spring-boot-starter-web即可。</li><li>actuator是用来对应用程序进行监视和管理，通过restful api请求来监管、审计、收集应用的运行情况。</li><li>devtools提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。</li><li>CLI就是命令行接口，是一个命令行工具，支持使用Groovy脚本，可以快速搭建spring原型项目。</li></ul><p>以上为Spring框架需要掌握的内容，前面提到的核心机制、核心流程，建议阅读源码加深理解。<br>以上内容摘取自《32个Java面试必考点》 第07讲：必会框架-Spring全家桶</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 全家桶 10 Days - Day 1 Spring 家族的主要成员</title>
      <link href="/2019/12/30/f2b0/"/>
      <url>/2019/12/30/f2b0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Spring-Framework-History"><a href="#Spring-Framework-History" class="headerlink" title="Spring Framework History"></a>Spring Framework History</h1><ul><li>Born in 2002, the earliest Author Rod Johnson</li><li>Today, Spring 5.x, Support JDK 8-11 and Java EE 8.</li></ul><h1 id="Spring-The-source-for-modern-java"><a href="#Spring-The-source-for-modern-java" class="headerlink" title="Spring: The source for modern java"></a>Spring: The source for modern java</h1><p>Spring，始于框架，但不不限于框架<br>    <a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/oUY3eJ.jpg" data-fancybox="group" data-caption="oUY3eJ" class="fancybox"><img alt="oUY3eJ" title="oUY3eJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/oUY3eJ.jpg" class="lazyload"></a></p><h1 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h1><blockquote><p>用于构架企业应用的轻量级一站式解决方案</p></blockquote><h2 id="设计理理念"><a href="#设计理理念" class="headerlink" title="设计理理念"></a>设计理理念</h2><ul><li>⼒力力争让选择⽆无处不不在</li><li>体现海海纳百川的精神</li><li>保持向后兼容性</li><li>专注 API 设计</li><li>追求严苛的代码质量量</li></ul><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><blockquote><p>快速构架基于Spring的应用程序</p></blockquote><ul><li>快，非常快</li><li>开箱即用，按需改动</li><li>提供非功能特性</li><li>不用生成代码，没有XML配置</li></ul><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/DwpoV5.jpg" data-fancybox="group" data-caption="DwpoV5" class="fancybox"><img alt="DwpoV5" title="DwpoV5" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/DwpoV5.jpg" class="lazyload"></a></p><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="简化分布式系统的开发"><a href="#简化分布式系统的开发" class="headerlink" title="简化分布式系统的开发"></a>简化分布式系统的开发</h2><ul><li>配置管理理</li><li>服务注册与发现</li><li>熔断</li><li>服务追踪</li></ul><h1 id="Spring-5-x-的改变暗示了了什什么"><a href="#Spring-5-x-的改变暗示了了什什么" class="headerlink" title="Spring 5.x 的改变暗示了了什什么"></a>Spring 5.x 的改变暗示了了什什么</h1><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/OE30HW.jpg" data-fancybox="group" data-caption="OE30HW" class="fancybox"><img alt="OE30HW" title="OE30HW" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/OE30HW.jpg" class="lazyload"></a></p><h1 id="第一个Spring程序-Hello-Spring"><a href="#第一个Spring程序-Hello-Spring" class="headerlink" title="第一个Spring程序 Hello Spring"></a>第一个Spring程序 Hello Spring</h1><ol><li><p>Open IntelliJ</p></li><li><p>Create a new project</p></li><li><p>Choose Spring Initializr<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Z1dDju.jpg" data-fancybox="group" data-caption="Z1dDju" class="fancybox"><img alt="Z1dDju" title="Z1dDju" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Z1dDju.jpg" class="lazyload"></a></p></li><li><p>Fill in the Project Metadata<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kd0ntJ.jpg" data-fancybox="group" data-caption="Kd0ntJ" class="fancybox"><img alt="Kd0ntJ" title="Kd0ntJ" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kd0ntJ.jpg" class="lazyload"></a></p></li><li><p>Choose Dependencies: Spring Web and Spring Boot Actuator<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/sc3cGw.jpg" data-fancybox="group" data-caption="sc3cGw" class="fancybox"><img alt="sc3cGw" title="sc3cGw" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/sc3cGw.jpg" class="lazyload"></a></p></li><li><p>Finish the project</p></li></ol></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
            <tag> IntelliJ </tag>
            
            <tag> Java </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup a Hexo Editor Environment on Mac</title>
      <link href="/2019/12/30/3803/"/>
      <url>/2019/12/30/3803/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a name="diUkv"></a></p><h1 id="Use-Upic-to-Upload-to-the-Image-Bed"><a href="#Use-Upic-to-Upload-to-the-Image-Bed" class="headerlink" title="Use Upic to Upload to the Image Bed"></a>Use Upic to Upload to the Image Bed</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install upic</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Setup-Image-Bed-on-the-Github"><a href="#Setup-Image-Bed-on-the-Github" class="headerlink" title="Setup Image Bed on the Github"></a>Setup Image Bed on the Github</h2><ol><li><p>Generate the App Secret<br>Go to the Github->Setting->Developer Settings->Personal access tokens</p></li><li><p>Open uPic->Preferences, to add Github as the image bed<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/uksitl.jpg" data-fancybox="group" data-caption="uksitl" class="fancybox"><img alt="uksitl" title="uksitl" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/uksitl.jpg" class="lazyload"></a></p></li><li><p>Set the github repo information<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kw2jG9.jpg" data-fancybox="group" data-caption="Kw2jG9" class="fancybox"><img alt="Kw2jG9" title="Kw2jG9" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/Kw2jG9.jpg" class="lazyload"></a></p></li></ol><h1 id="Prepare-Hexo-Env"><a href="#Prepare-Hexo-Env" class="headerlink" title="Prepare Hexo Env"></a>Prepare Hexo Env</h1><h2 id="Install-Node"><a href="#Install-Node" class="headerlink" title="Install Node"></a>Install Node</h2><p>There are many ways to install nodes. Most advanced users want to install multiple versions of nodes instead of one version only. To have multiple versions of node installed, I chose to use nvm.<br><a name="u1DzV"></a></p><h3 id="Install-nvm-via-brew"><a href="#Install-nvm-via-brew" class="headerlink" title="Install nvm via brew"></a>Install nvm via brew</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bew install nvm</span><br><span class="line">mkdir ~/.nvm</span><br><span class="line"><span class="comment">#put the following the in the .zshrc</span></span><br><span class="line">  <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">  [ -s <span class="string">"/usr/local/opt/nvm/nvm.sh"</span> ] && . <span class="string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">  [ -s <span class="string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span> ] && . <span class="string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></tbody></table></figure></div><p><a name="pkBHr"></a></p><h3 id="To-see-what-Node-versions-are-available-to-install-run"><a href="#To-see-what-Node-versions-are-available-to-install-run" class="headerlink" title="To see what Node versions are available to install run"></a>To see what Node versions are available to install run</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></tbody></table></figure></div><p><a name="2spx7"></a></p><h3 id="Install-the-LTS"><a href="#Install-the-LTS" class="headerlink" title="Install the LTS"></a>Install the LTS</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v12.14.0</span><br></pre></td></tr></tbody></table></figure></div><p>After installing you can verify what is installed with</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><p><a name="Ai8HU"></a></p><h3 id="Swith-between-different-node-versions"><a href="#Swith-between-different-node-versions" class="headerlink" title="Swith between different node versions"></a>Swith between different node versions</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 11</span><br></pre></td></tr></tbody></table></figure></div><p><a name="D17ZW"></a></p><h1 id="Add-SSH-keys-for-the-Github-repo"><a href="#Add-SSH-keys-for-the-Github-repo" class="headerlink" title="Add SSH keys for the Github repo"></a>Add SSH keys for the Github repo</h1><p><a name="EljiX"></a></p><h2 id="Generate-SSh-keys"><a href="#Generate-SSh-keys" class="headerlink" title="Generate SSh keys"></a>Generate SSh keys</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></tbody></table></figure></div><p><a name="adding-your-ssh-key-to-the-ssh-agent"></a></p><h3 id="Adding-your-SSH-key-to-the-ssh-agent"><a href="#Adding-your-SSH-key-to-the-ssh-agent" class="headerlink" title="Adding your SSH key to the ssh-agent"></a><a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">Adding your SSH key to the ssh-agent</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure></div><p><a name="IeIjJ"></a></p><h2 id="Copy-the-SSH-key-to-your-clipboard"><a href="#Copy-the-SSH-key-to-your-clipboard" class="headerlink" title="Copy the SSH key to your clipboard"></a>Copy the SSH key to your clipboard</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy < ~/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure></div><p><a name="iP1c2"></a></p><h1 id="Checkout-Hexo-Blog-Repo"><a href="#Checkout-Hexo-Blog-Repo" class="headerlink" title="Checkout Hexo Blog Repo"></a>Checkout Hexo Blog Repo</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:geekdanny/hexo.git</span><br></pre></td></tr></tbody></table></figure></div><p><a name="wM3H5"></a></p><h1 id="Install-Hexo-on-Mac"><a href="#Install-Hexo-on-Mac" class="headerlink" title="Install Hexo on Mac"></a>Install Hexo on Mac</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#install hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure></div><p><a name="mhSbi"></a></p><h2 id="Add-Butterfly-Theme-Specific-Dependencies"><a href="#Add-Butterfly-Theme-Specific-Dependencies" class="headerlink" title="Add Butterfly Theme Specific Dependencies"></a>Add Butterfly Theme Specific Dependencies</h2><p>My hexo uses the Butterfly Theme, which requires some specific dependencies. The bufferfly repo located at <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">https://github.com/jerryc127/hexo-theme-butterfly</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Go to the blog folder</span></span><br><span class="line"><span class="built_in">cd</span> /Users/admin/Development/personal/hexo/blog/</span><br><span class="line"><span class="comment">#clone the butterfly theme</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"><span class="comment">#Install cheerio</span></span><br><span class="line">npm install cheerio</span><br><span class="line"><span class="comment">#Install live2d</span></span><br><span class="line">npm install hexo-helper-live2d</span><br><span class="line"><span class="comment">#Install local search</span></span><br><span class="line">npm install hexo-generator-search</span><br><span class="line"><span class="comment">#Install WordCount</span></span><br><span class="line">npm install hexo-wordcount</span><br><span class="line"><span class="comment">#Install hexo-abbrlink</span></span><br><span class="line">npm install hexo-abbrlink</span><br></pre></td></tr></tbody></table></figure></div><p><a name="ov482"></a></p><h2 id="Sync-YuQue-with-Hexo"><a href="#Sync-YuQue-with-Hexo" class="headerlink" title="Sync YuQue with Hexo"></a>Sync YuQue with Hexo</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yuque-hexo</span><br></pre></td></tr></tbody></table></figure></div><p><a name="dhV06"></a></p><h3 id="Add-the-YuQue-config-to-the-package-json"><a href="#Add-the-YuQue-config-to-the-package-json" class="headerlink" title="Add the YuQue config to the package.json"></a>Add the YuQue config to the package.json</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"yuqueConfig"</span>: {</span><br><span class="line">  <span class="string">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">  <span class="string">"login"</span>: <span class="string">"geekdanny"</span>,</span><br><span class="line">  <span class="string">"repo"</span>: <span class="string">"hexo"</span>,</span><br><span class="line">  <span class="string">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">  <span class="string">"postPath"</span>: <span class="string">"source/_posts/yuque"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Yuque </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoDaddy with Github Pages</title>
      <link href="/2019/12/29/7e78/"/>
      <url>/2019/12/29/7e78/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Github provides <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">docs</a> to wire up your domain with your gh-pages, but I’m going to cover the set up in 7simple steps</p><ol><li><p>First, the most difficult part…decide on a domain name and buy it on GoDaddy (<em>fingers-crossed you get the domain name you want and someone else hasn’t already taken it</em>).</p></li><li><p>On the home page of your account the in Domain Manager “Menu Domains” Go to all domains and select Use My Domains in Next Steps Colums</p></li></ol><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/TIuLcH.jpg" data-fancybox="group" data-caption="TIuLcH" class="fancybox"><img alt="TIuLcH" title="TIuLcH" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/TIuLcH.jpg" class="lazyload"></a></p><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NHUhQt.jpg" data-fancybox="group" data-caption="NHUhQt" class="fancybox"><img alt="NHUhQt" title="NHUhQt" data-src="https://raw.githubusercontent.com/geekdanny/images/master/uPic/NHUhQt.jpg" class="lazyload"></a></p><ol start="3"><li>Within the DNS management page you will need to make five changes:</li></ol><ul><li><p>In the Type “A” row update the IP address to: 185.199.108.153<br>(<em>this will point your custom domain to GitHub’s server over HTTPS</em>)</p></li><li><p>In the CNAME row with Name “www” input your gh-pages website (<em>username.github.io</em>)</p></li><li><p>At the bottom click the “ADD” button and make 3 more Type “A” rows with the IP addresses of: 185.199.109.153, 185.199.110.153, 185.199.111.153<br>(<em>don’t worry when you leave the page it will alphabetize the types</em>)</p></li></ul><p><a href="https://cdn-images-1.medium.com/max/2008/1*Uqz2xPi6uWdBm8HqFwf9IQ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/2008/1*Uqz2xPi6uWdBm8HqFwf9IQ.png" class="lazyload"></a></p><ol start="4"><li>Go to your editor and in the repository of your website create a new file named “CNAME” in the root of your directory.</li></ol><p><a href="https://cdn-images-1.medium.com/max/2046/1*IYBtpap1lyj1xJzhM5V3GQ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/2046/1*IYBtpap1lyj1xJzhM5V3GQ.png" class="lazyload"></a></p><ol start="5"><li><p>In the “CNAME” file add your domain name purchased from GoDaddy.</p></li><li><p>Add, commit, and push your changes to Github.</p></li><li><p>Within your repository you will need to allow your website to be served through HTTPS. Check “Enforce HTTPS” in the Settings tab of your repo. This permission might take awhile because the certificate needs to be issued, but make sure you check this enforcement option when allowed.</p></li></ol><p><a href="https://cdn-images-1.medium.com/max/1472/1*n3m607Jv1jIBXWZgg6gR2w.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/1472/1*n3m607Jv1jIBXWZgg6gR2w.png" class="lazyload"></a></p><p>You can confirm that your DNS is set-up correctly by using the <code>dig</code> command in your terminal with your custom domain. You should see that your “A” Types point to the IP addresses that you had specified in GoDaddy’s DNS management page, in other words you’re pointing your DNS to GitHub’s server. Below is an example of the <code>dig</code> command:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dig</span> <span class="selector-tag">gramabharathi</span><span class="selector-class">.in</span></span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://cdn-images-1.medium.com/max/1452/1*0WN6XMpUMFe8dWlJwsqVWg.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn-images-1.medium.com/max/1452/1*0WN6XMpUMFe8dWlJwsqVWg.png" class="lazyload"></a></p><p>If you’re encountering any problems, this <a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="noopener">GitHub Troubleshooting Custom Domains</a> documentation is a good reference.</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> GoDaddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to install Node on Mac using NVM and Homebrew</title>
      <link href="/2019/12/23/956a/"/>
      <url>/2019/12/23/956a/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><strong>Version Manager makes it easy to install multiple versions of Node on a Mac. You install NVM using Homebrew, and if you don’t have Homebrew installed yet, read this article.</strong></p><h1 id="Step-1-Install-NVM"><a href="#Step-1-Install-NVM" class="headerlink" title="Step 1: Install NVM"></a>Step 1: Install NVM</h1><p>Install node version manager.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-2-Create-a-directory-for-NVM"><a href="#Step-2-Create-a-directory-for-NVM" class="headerlink" title="Step 2: Create a directory for NVM"></a>Step 2: Create a directory for NVM</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.nvm/</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-3-Configure-your-environmental-variables"><a href="#Step-3-Configure-your-environmental-variables" class="headerlink" title="Step 3: Configure your environmental variables"></a>Step 3: Configure your environmental variables</h1><p>Either create or open your .bash_profile.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure></div><p>Paste this.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></tbody></table></figure></div><p>Execute the content we just pasted.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-4-Double-check-your-work"><a href="#Step-4-Double-check-your-work" class="headerlink" title="Step 4: Double-check your work"></a>Step 4: Double-check your work</h1><p>If you’ve done everything correctly, you should be able to run the nvm command and ask it to list which versions node are available.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-5-Install-Node"><a href="#Step-5-Install-Node" class="headerlink" title="Step 5: Install Node"></a>Step 5: Install Node</h1><p>You can see a list of previously released versions of node from the NodeJS release page<br>Install Node 6.x.x.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 6.x.x</span><br></pre></td></tr></tbody></table></figure></div><p>Install Node 8.x.x</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.x.x</span><br></pre></td></tr></tbody></table></figure></div><p>Double-check your installation.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Step-6-Set-Node-Globally"><a href="#Step-6-Set-Node-Globally" class="headerlink" title="Step 6: Set Node Globally"></a>Step 6: Set Node Globally</h1><p>You can set a specific version of Node as your default.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default 12.x.x</span><br></pre></td></tr></tbody></table></figure></div><h1 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h1><p>Error Example #1<br>If you are having issues with npm, then you might want to try this.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">brew uninstall node</span><br></pre></td></tr></tbody></table></figure></div><p>Install Node version 12.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install node@12</span><br><span class="line"><span class="built_in">echo</span> prefix=~/.npm-packages >> ~/.npmrc</span><br><span class="line">curl -L https://www.npmjs.com/install.sh | sh</span><br></pre></td></tr></tbody></table></figure></div><p>Add this to your local variables so that npm and global npm are usable.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.npm-packages/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure></div><p>Source</p><h2 id="Error-Example-2"><a href="#Error-Example-2" class="headerlink" title="Error Example #2"></a>Error Example #2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fetching: https://registry.npmjs.org/npm/-/npm-6.4.1.tgz</span><br><span class="line">up to date <span class="keyword">in</span> 0.027s</span><br><span class="line">sh: rimraf: <span class="built_in">command</span> not found</span><br><span class="line">npm ERR! file sh</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno ENOENT</span><br><span class="line">npm ERR! syscall spawn</span><br><span class="line">npm ERR! npm@6.4.1 prepare: `node bin/npm-cli.js --no-audit --no-timing prune --prefix=. --no-global && rimraf <span class="built_in">test</span>/*/*/node_modules && make -j4 doc`</span><br><span class="line">npm ERR! spawn ENOENT</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the npm@6.4.1 prepare script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/myaccount/.npm/_logs/*-debug.log</span><br><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found: 0.99s@latest</span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/myaccount/.npm/_logs/*-debug.log</span><br><span class="line">It failed</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/12/10/1c53/"/>
      <url>/2019/12/10/1c53/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><div class="justified-gallery"><p><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg" alt title></a><br><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg" alt title></a><br><a href="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg" alt title></a><br><a href="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg" alt title></a></p>          </div></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install K8S on Centos 7.5</title>
      <link href="/2019/12/07/cbc1/"/>
      <url>/2019/12/07/cbc1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Install-K8S-on-Centos-7-5"><a href="#Install-K8S-on-Centos-7-5" class="headerlink" title="Install K8S on Centos 7.5"></a>Install K8S on Centos 7.5</h1><p>Kubernetes (K8s) uses a containerization platform like Docker, containerd, etc. and requires a Registry to download and use Docker images. Docker Hub is the global public registry that serves the purpose. However, there are situations, when we want to use Kubernetes (K8s) in a private network. In such a situation, we cannot access Docker Hub, therefore, we must configure a Private Docker Registry for our Kubernetes (K8s) cluster.</p><p>In this article, we will install Kubernetes (K8s) offline on CentOS 7. We are not configuring a Private Docker Registry here, but you can read our following articles to configure it by yourself.</p><ul><li>Configure Secure Registry with Docker-Distribution on CentOS 7</li><li>Configure a Private Docker Registry on CentOS 7<h2 id="Install-and-prepare-the-Centos7-5-Virtual-Machine"><a href="#Install-and-prepare-the-Centos7-5-Virtual-Machine" class="headerlink" title="Install and prepare the Centos7.5 Virtual Machine"></a>Install and prepare the Centos7.5 Virtual Machine</h2>I chose to install Centos7.5 VM on VSphere, you can choose to install th centos on your local virtualbox.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/E8SrS9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/E8SrS9.png" class="lazyload"></a><br>Finish the installation first. Make sure to turn on the network during the installation.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/xRzPkJ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/xRzPkJ.png" class="lazyload"></a><br>In our example, we will use one <strong>master</strong> and one <strong>one node</strong>.<h3 id="Prepare-the-Virtual-Machine"><a href="#Prepare-the-Virtual-Machine" class="headerlink" title="Prepare the Virtual Machine"></a>Prepare the Virtual Machine</h3><h4 id="System-Specifiction"><a href="#System-Specifiction" class="headerlink" title="System Specifiction"></a>System Specifiction</h4>We have configured two CentOS 7 virtual machines.<table><thead><tr><th>Hostname</th><th>docker-online.example.com</th><th>docker-offline.example.com</th></tr></thead><tbody><tr><td>Operating System</td><td>CentOS 7.6</td><td>CentOS 7.6</td></tr><tr><td>Internet</td><td>Yes</td><td>No</td></tr><tr><td>Docker Version</td><td>B3</td><td>C3</td></tr></tbody></table></li></ul><h2 id="Download-the-kube"><a href="#Download-the-kube" class="headerlink" title="Download the kube"></a>Download the kube</h2></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduce K8S</title>
      <link href="/2019/12/07/1031/"/>
      <url>/2019/12/07/1031/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h1><p><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/5UmgFx.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/5UmgFx.png" class="lazyload"></a></p><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><p>A physical machine. It is using to monitor and dispatch to each node to work. The master is the controller.</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>A node can be a virtual or physical machine. A node is a worker</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><ul><li>A pod is the smallest unit in K8S. A pod is a container of containers.</li><li>A pod contains can container many containers.</li><li>A pod is a process.</li><li>Each pod has its own IP address.</li><li>Each pod can communicate, but the communication has to go via kube-proxy.</li><li>Pause is a root container in the pod.</li><li>Pod should contain a complete module per container.</li><li>You can use the analogy that each pod is a virtual machine.</li><li>All the communication should go through the pause between it goes out the pod<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/wyVam5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/wyVam5.png" class="lazyload"></a><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2>Label is a description tag of a pod.<h2 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h2>It is used to replicate, delete, add new pods. It monitors the system has enough pods between nodes.<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2>Service is a logic group. Usually, the same services are put into the same pod. E.g Backend services are grouped into one pod and frontend services are grouped in another pod.<br><a href="https://raw.githubusercontent.com/geekdanny/images/master/blog/4iMG69.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/geekdanny/images/master/blog/4iMG69.png" class="lazyload"></a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
